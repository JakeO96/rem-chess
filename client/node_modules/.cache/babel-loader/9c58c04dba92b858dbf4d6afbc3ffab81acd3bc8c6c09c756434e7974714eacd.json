{"ast":null,"code":"export const grid = [['A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1', 'A0'], ['B7', 'B6', 'B5', 'B4', 'B3', 'B2', 'B1', 'B0'], ['C7', 'C6', 'C5', 'C4', 'C3', 'C2', 'C1', 'C0'], ['D7', 'D6', 'D5', 'D4', 'D3', 'D2', 'D1', 'D0'], ['E7', 'E6', 'E5', 'E4', 'E3', 'E2', 'E1', 'E0'], ['F7', 'F6', 'F5', 'F4', 'F3', 'F2', 'F1', 'F0'], ['G7', 'G6', 'G5', 'G4', 'G3', 'G2', 'G1', 'G0'], ['H7', 'H6', 'H5', 'H4', 'H3', 'H2', 'H1', 'H0']];\nexport class Player {\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let alive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let grave = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    this.name = void 0;\n    this.color = void 0;\n    this.alive = void 0;\n    this.grave = void 0;\n    this.name = name;\n    this.color = color;\n    this.alive = alive;\n    this.grave = grave;\n  }\n  toJSON() {\n    return {\n      className: this.constructor.name,\n      name: this.name,\n      color: this.color,\n      alive: this.alive.map(piece => piece.toJSON()),\n      grave: this.grave.map(piece => piece.toJSON())\n    };\n  }\n  static fromJSON(json) {\n    const player = new Player();\n    player.name = json.name;\n    player.color = json.color;\n    player.alive = json.alive.map(pieceJson => Piece.fromJSON(pieceJson));\n    player.grave = json.grave.map(pieceJson => Piece.fromJSON(pieceJson));\n    return player;\n  }\n}\nexport class Piece {\n  constructor(trackerTag, pieceName, position, moved, playerName, playerColor, isWhite) {\n    this.trackerTag = trackerTag;\n    this.pieceName = pieceName;\n    this.position = position;\n    this.moved = moved;\n    this.playerName = playerName;\n    this.playerColor = playerColor;\n    this.isWhite = isWhite;\n  }\n  toJSON() {\n    return {\n      className: this.constructor.name,\n      tackerTag: this.trackerTag,\n      pieceName: this.pieceName,\n      position: this.position,\n      moved: this.moved,\n      playerName: this.playerName,\n      playerColor: this.playerColor,\n      isWhite: this.isWhite\n    };\n  }\n  static fromJSON(json) {\n    if (!(json.className in Piece.classMap)) {\n      throw new Error(`Invalid class name: ${json.className}`);\n    } else {\n      const pieceClass = Piece.classMap[json.className];\n      const piece = new pieceClass(json.trackerTag, json.pieceName, json.position, json.moved, json.playerName, json.playerColor, json.isWhite);\n      return piece;\n    }\n  }\n  get_all_diagonal(grid, state, col, row) {\n    let all_moves = [];\n    all_moves = all_moves.concat(this.recurse_diagonal(col + 1, 8, row + 1, grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col - 1, -1, row - 1, grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col + 1, 8, row - 1, grid, state, [], 'b-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col - 1, -1, row + 1, grid, state, [], 'b-slash'));\n    return all_moves;\n  }\n  get_all_straight(grid, state, col, row) {\n    let all_moves = [];\n    all_moves = all_moves.concat(this.recurse_straight(row + 1, 8, col, grid, state, [], 'vert'));\n    all_moves = all_moves.concat(this.recurse_straight(row - 1, -1, col, grid, state, [], 'vert'));\n    all_moves = all_moves.concat(this.recurse_straight(col + 1, 8, row, grid, state, [], 'hor'));\n    all_moves = all_moves.concat(this.recurse_straight(col - 1, -1, row, grid, state, [], 'hor'));\n    return all_moves;\n  }\n  recurse_straight(looper, end, anchor, grid, state, all_moves, axis) {\n    if (looper === end) {\n      return all_moves;\n    }\n    let spot = axis === 'vert' ? grid[anchor][looper] : grid[looper][anchor];\n    if (state[spot][0] === null) {\n      all_moves.push(spot);\n      if (end === 8) {\n        return this.recurse_straight(looper + 1, end, anchor, grid, state, all_moves, axis);\n      } else {\n        return this.recurse_straight(looper - 1, end, anchor, grid, state, all_moves, axis);\n      }\n    } else if (state[spot][0].playerColor === this.playerColor) {\n      return all_moves;\n    } else {\n      all_moves.push(spot);\n      return all_moves;\n    }\n  }\n  recurse_diagonal(col_rec, end, row_rec, grid, state, all_moves, axis) {\n    if (col_rec === 8 || col_rec === -1 || row_rec === 8 || row_rec === -1) {\n      return all_moves;\n    }\n    let spot = grid[col_rec][row_rec];\n    if (state[spot][0] === null) {\n      all_moves.push(spot);\n      if (axis === 'f-slash' && end === 8) {\n        return this.recurse_diagonal(col_rec + 1, end, row_rec + 1, grid, state, all_moves, axis);\n      } else if (axis === 'f-slash' && end !== 8) {\n        return this.recurse_diagonal(col_rec - 1, end, row_rec - 1, grid, state, all_moves, axis);\n      } else if (axis !== 'f-slash' && end === 8) {\n        return this.recurse_diagonal(col_rec + 1, end, row_rec - 1, grid, state, all_moves, axis);\n      } else {\n        return this.recurse_diagonal(col_rec - 1, end, row_rec + 1, grid, state, all_moves, axis);\n      }\n    } else if (state[spot][0].playerColor === this.playerColor) {\n      return all_moves;\n    } else {\n      all_moves.push(spot);\n      return all_moves;\n    }\n  }\n}\nPiece.classMap = void 0;\nexport class Pawn extends Piece {\n  validPawnMoves(grid, state, col, row) {\n    let all_moves = [];\n    // Check the color of the pawn to decide which direction it should move\n    let nextRow = this.isWhite ? row - 1 : row + 1;\n    if (state[grid[col][nextRow]][0] === null) {\n      all_moves.push(grid[col][nextRow]);\n    }\n    let attacks = [grid[col - 1][nextRow], grid[col + 1][nextRow]];\n    for (let coord of attacks) {\n      const spotPiece = state[coord][0];\n      if (spotPiece === null) {\n        continue;\n      } else if (spotPiece.isWhite) {\n        if (this.playerColor === 'black') {\n          all_moves.push(coord);\n        } else {\n          continue;\n        }\n      } else if (!spotPiece.isWhite) {\n        if (this.playerColor === 'white') {\n          all_moves.push(coord);\n        } else {\n          continue;\n        }\n      }\n    }\n\n    // If the pawn hasn't moved yet, it can move two spaces forward\n    if (!this.moved) {\n      nextRow = this.isWhite ? row - 2 : row + 2;\n      // The pawn can move two spaces forward only if both spaces in front of it are empty\n      if (state[grid[col][nextRow]][0] === null && state[grid[col][nextRow + (this.isWhite ? 1 : -1)]][0] === null) {\n        all_moves.push(grid[col][nextRow]);\n      }\n    }\n    return all_moves;\n  }\n}\nexport class Rook extends Piece {}\nexport class Knight extends Piece {\n  validKnightMoves(grid, state, col, row) {\n    const allMoves = [];\n    const potentialMoves = [[col - 2, row - 1], [col - 2, row + 1], [col + 2, row - 1], [col + 2, row + 1], [col + 1, row + 2], [col - 1, row + 2], [col + 1, row - 2], [col - 1, row - 2]];\n    for (const move of potentialMoves) {\n      if (move[0] < 0 || move[0] > 7 || move[1] < 0 || move[1] > 7) {\n        continue;\n      }\n      const spot = grid[move[0]][move[1]];\n      if (state[spot][0] === null || state[spot][0].playerColor !== this.playerColor) {\n        allMoves.push(spot);\n      }\n    }\n    return allMoves;\n  }\n}\nexport class Bishop extends Piece {}\nexport class Queen extends Piece {}\nexport class King extends Piece {\n  validKingMoves(grid, state, col, row) {\n    const cords = [[col, row + 1], [col - 1, row + 1], [col + 1, row + 1], [col, row - 1], [col - 1, row - 1], [col + 1, row - 1], [col + 1, row], [col - 1, row]];\n    const allMoves = [];\n    for (const c of cords) {\n      if (c[0] === 8 || c[0] === -1 || c[1] === 8 || c[1] === -1) {\n        continue;\n      } else {\n        const spot = grid[c[0]][c[1]];\n        if (state[spot][0] === null) {\n          allMoves.push(spot);\n        } else if (state[spot][0].playerColor === this.playerColor) {\n          continue;\n        } else {\n          allMoves.push(spot);\n        }\n      }\n    }\n    return allMoves;\n  }\n}\nPiece.classMap;\nexport const assignWhitePieces = player => {\n  const playerName = player.name;\n  const playerColor = player.color;\n  for (let col of grid) {\n    player.alive.push(new Pawn('wP', 'whitePawn', col[6], false, playerName, playerColor, true));\n  }\n  player.alive.push(new Rook('wR', 'whiteRook', grid[0][7], false, playerName, playerColor, true), new Knight('wN', 'whiteKnight', grid[1][7], false, playerName, playerColor, true), new Bishop('wB', 'whiteBishop', grid[2][7], false, playerName, playerColor, true), new Queen('wQ', 'whiteQueen', grid[3][7], false, playerName, playerColor, true), new King('wK', 'whiteKing', grid[4][7], false, playerName, playerColor, true), new Bishop('wB', 'whiteBishop', grid[5][7], false, playerName, playerColor, true), new Knight('wN', 'whiteKnight', grid[6][7], false, playerName, playerColor, true), new Rook('wR', 'whiteRook', grid[7][7], false, playerName, playerColor, true));\n};\nexport const assignBlackPieces = player => {\n  const playerName = player.name;\n  const playerColor = player.color;\n  for (let col of grid) {\n    player.alive.push(new Pawn('bP', 'blackPawn', col[1], false, playerName, playerColor, false));\n  }\n  player.alive.push(new Rook('bR', 'blackRook', grid[0][0], false, playerName, playerColor, false), new Knight('bN', 'blackKnight', grid[1][0], false, playerName, playerColor, false), new Bishop('bB', 'blackBishop', grid[2][0], false, playerName, playerColor, false), new Queen('bQ', 'blackQueen', grid[3][0], false, playerName, playerColor, false), new King('bK', 'blackKing', grid[4][0], false, playerName, playerColor, false), new Bishop('bB', 'blackBishop', grid[5][0], false, playerName, playerColor, false), new Knight('bN', 'blackKnight', grid[6][0], false, playerName, playerColor, false), new Rook('bR', 'blackRook', grid[7][0], false, playerName, playerColor, false));\n};","map":{"version":3,"names":["grid","Player","constructor","name","arguments","length","undefined","color","alive","grave","toJSON","className","map","piece","fromJSON","json","player","pieceJson","Piece","trackerTag","pieceName","position","moved","playerName","playerColor","isWhite","tackerTag","classMap","Error","pieceClass","get_all_diagonal","state","col","row","all_moves","concat","recurse_diagonal","get_all_straight","recurse_straight","looper","end","anchor","axis","spot","push","col_rec","row_rec","Pawn","validPawnMoves","nextRow","attacks","coord","spotPiece","Rook","Knight","validKnightMoves","allMoves","potentialMoves","move","Bishop","Queen","King","validKingMoves","cords","c","assignWhitePieces","assignBlackPieces"],"sources":["/home/jake/rem-stack/chess/client/src/utils/game-utils.ts"],"sourcesContent":["export interface Player {\n  name: string;\n  color: string;\n  alive: Piece[];\n  grave: Piece[];\n}\n\nexport const grid: string[][] = [\n  ['A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1', 'A0'],\n  ['B7', 'B6', 'B5', 'B4', 'B3', 'B2', 'B1', 'B0'],\n  ['C7', 'C6', 'C5', 'C4', 'C3', 'C2', 'C1', 'C0'],\n  ['D7', 'D6', 'D5', 'D4', 'D3', 'D2', 'D1', 'D0'],\n  ['E7', 'E6', 'E5', 'E4', 'E3', 'E2', 'E1', 'E0'],\n  ['F7', 'F6', 'F5', 'F4', 'F3', 'F2', 'F1', 'F0'],\n  ['G7', 'G6', 'G5', 'G4', 'G3', 'G2', 'G1', 'G0'],\n  ['H7', 'H6', 'H5', 'H4', 'H3', 'H2', 'H1', 'H0']\n];\n\nexport class Player {\n  name: string;\n  color: string;\n  alive: Piece[];\n  grave: Piece[];\n\n  constructor(name: string = '', color: string = '', alive: Piece[] = [], grave: Piece[] = []) {\n    this.name = name;\n    this.color = color;\n    this.alive = alive;\n    this.grave = grave;\n  }\n\n  toJSON() {\n    return {\n      className: this.constructor.name,\n      name: this.name,\n      color: this.color,\n      alive: this.alive.map(piece => piece.toJSON()),\n      grave: this.grave.map(piece => piece.toJSON()),\n    };\n  }\n\n  static fromJSON(json: any) {\n    const player = new Player();\n    player.name = json.name;\n    player.color = json.color;\n    player.alive = json.alive.map((pieceJson: any) => Piece.fromJSON(pieceJson));\n    player.grave = json.grave.map((pieceJson: any) => Piece.fromJSON(pieceJson));\n    return player;\n  }\n}\n\nexport class Piece {\n  static classMap: { Pawn: typeof Pawn; Rook: typeof Rook; Knight: typeof Knight; Bishop: typeof Bishop; Queen: typeof Queen; King: typeof King; };\n  constructor(\n    public trackerTag: string,\n    public pieceName: string,\n    public position: string,\n    public moved: boolean,\n    public playerName: string,\n    public playerColor: string,\n    public isWhite: boolean,\n  ) { }\n\n  toJSON() {\n    return {\n      className: this.constructor.name,\n      tackerTag: this.trackerTag,\n      pieceName: this.pieceName,\n      position: this.position,\n      moved: this.moved,\n      playerName: this.playerName,\n      playerColor: this.playerColor,\n      isWhite: this.isWhite\n    };\n  }\n\n  static fromJSON(json: any) {\n    if (!(json.className in Piece.classMap)) {\n      throw new Error(`Invalid class name: ${json.className}`);\n    } else {\n      const pieceClass = Piece.classMap[json.className as keyof typeof Piece.classMap];\n      const piece = new pieceClass(\n        json.trackerTag,\n        json.pieceName,\n        json.position,\n        json.moved,\n        json.playerName,\n        json.playerColor,\n        json.isWhite\n      );\n      return piece;\n    }\n  }\n  \n  get_all_diagonal(grid: string[][], state: any, col: number, row: number): string[] {\n    let all_moves: string[] = [];\n    all_moves = all_moves.concat(this.recurse_diagonal((col + 1), 8, (row + 1), grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col - 1), (-1), (row - 1), grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col + 1), 8, (row - 1), grid, state, [], 'b-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col - 1), (-1), (row + 1), grid, state, [], 'b-slash'));\n    return all_moves;\n  }\n\n  get_all_straight(grid: string[][], state: any, col: number, row: number): string[] {\n    let all_moves: string[] = [];\n    all_moves = all_moves.concat(this.recurse_straight((row + 1), 8, col, grid, state, [], 'vert'));\n    all_moves = all_moves.concat(this.recurse_straight((row - 1), -1, col, grid, state, [], 'vert'));\n    all_moves = all_moves.concat(this.recurse_straight((col + 1), 8, row, grid, state, [], 'hor'));\n    all_moves = all_moves.concat(this.recurse_straight((col - 1), -1, row, grid, state, [], 'hor'));\n    return all_moves;\n}\n\n  recurse_straight(looper: number, end: number, anchor: number, grid: string[][], state: any, all_moves: string[], axis: string): string[] {\n    if (looper === end) {\n        return all_moves;\n    }\n    let spot: string = axis === 'vert' ? grid[anchor][looper] : grid[looper][anchor];\n    if (state[spot][0] === null) {\n        all_moves.push(spot);\n        if (end === 8) {\n            return this.recurse_straight((looper + 1), end, anchor, grid, state, all_moves, axis);\n        } else {\n            return this.recurse_straight((looper - 1), end, anchor, grid, state, all_moves, axis);\n        }\n    } else if (state[spot][0].playerColor === this.playerColor) {\n        return all_moves;\n    } else {\n        all_moves.push(spot);\n        return all_moves;\n    }\n  }\n\n  recurse_diagonal(col_rec: number, end: number, row_rec: number, grid: string[][], state: any, all_moves: string[], axis: string): string[] {\n    if (col_rec === 8 || col_rec === (-1) || row_rec === 8 || row_rec === (-1)) {\n        return all_moves;\n    }\n    let spot: string = grid[col_rec][row_rec];\n    if (state[spot][0] === null) {\n        all_moves.push(spot);\n        if (axis === 'f-slash' && end === 8) {\n            return this.recurse_diagonal((col_rec + 1), end, (row_rec + 1), grid, state, all_moves, axis);\n        } else if (axis === 'f-slash' && end !== 8) {\n            return this.recurse_diagonal((col_rec - 1), end, (row_rec - 1), grid, state, all_moves, axis);\n        } else if (axis !== 'f-slash' && end === 8) {\n            return this.recurse_diagonal((col_rec + 1), end, (row_rec - 1), grid, state, all_moves, axis);\n        } else {\n            return this.recurse_diagonal((col_rec - 1), end, (row_rec + 1), grid, state, all_moves, axis);\n        }\n    } else if (state[spot][0].playerColor === this.playerColor) {\n        return all_moves;\n    } else {\n        all_moves.push(spot);\n        return all_moves;\n    }\n  }\n}\n\nexport class Pawn extends Piece {\n  validPawnMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    let all_moves: string[] = [];\n    // Check the color of the pawn to decide which direction it should move\n    let nextRow = this.isWhite ? row - 1 : row + 1;\n\n    if (state[grid[col][nextRow]][0] === null) {\n      all_moves.push(grid[col][nextRow]);\n    }\n  \n    let attacks: string[] = [grid[(col - 1)][nextRow], grid[(col + 1)][nextRow]];\n    for (let coord of attacks) {\n      const spotPiece = state[coord][0];\n      if (spotPiece === null) {\n          continue;\n      } else if (spotPiece.isWhite) {\n        if (this.playerColor === 'black') {\n          all_moves.push(coord);\n        } else {\n          continue;\n        }\n      } else if (!spotPiece.isWhite) {\n        if (this.playerColor === 'white') {\n          all_moves.push(coord);\n        } else {\n          continue;\n        }\n      }\n    }\n  \n    // If the pawn hasn't moved yet, it can move two spaces forward\n    if (!this.moved) {\n      nextRow = this.isWhite ? row - 2 : row + 2;\n      // The pawn can move two spaces forward only if both spaces in front of it are empty\n      if (state[grid[col][nextRow]][0] === null && state[grid[col][nextRow + (this.isWhite ? 1 : -1)]][0] === null) {\n        all_moves.push(grid[col][nextRow]);\n      }\n    }\n    \n    return all_moves;\n  }\n}\n\nexport class Rook extends Piece {}\n\nexport class Knight extends Piece {\n  validKnightMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    const allMoves: string[] = [];\n    \n    const potentialMoves: [number, number][] = [\n      [col - 2, row - 1], [col - 2, row + 1],\n      [col + 2, row - 1], [col + 2, row + 1],\n      [col + 1, row + 2], [col - 1, row + 2],\n      [col + 1, row - 2], [col - 1, row - 2]\n    ];\n\n    for (const move of potentialMoves) {\n      if (move[0] < 0 || move[0] > 7 || move[1] < 0 || move[1] > 7) {\n        continue;\n      }\n\n      const spot = grid[move[0]][move[1]];\n      if (state[spot][0] === null || state[spot][0].playerColor !== this.playerColor) {\n        allMoves.push(spot);\n      }\n    }\n\n    return allMoves;\n  }\n}\n\nexport class Bishop extends Piece {\n}\n\nexport class Queen extends Piece {}\n\nexport class King extends Piece {\n  validKingMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    const cords = [\n      [col, (row + 1)],\n      [(col - 1), (row + 1)],\n      [(col + 1), (row + 1)],\n      [col, (row - 1)],\n      [(col - 1), (row - 1)],\n      [(col + 1), (row - 1)],\n      [(col + 1), row],\n      [(col - 1), row]\n    ];\n\n    const allMoves: string[] = [];\n    for (const c of cords) {\n      if (c[0] === 8 || c[0] === -1 || c[1] === 8 || c[1] === -1) {\n        continue;\n      } else {\n        const spot = grid[c[0]][c[1]];\n        if (state[spot][0] === null) {\n          allMoves.push(spot);\n        } else if (state[spot][0].playerColor === this.playerColor) {\n          continue;\n        } else {\n          allMoves.push(spot);\n        }\n      }\n    }\n\n    return allMoves;\n  }\n}\n\nPiece.classMap\n\n\nexport const assignWhitePieces = (player: Player): void => {\n  const playerName = player.name;\n  const playerColor = player.color;\n  for (let col of grid) {\n    player.alive.push(new Pawn('wP', 'whitePawn', col[6], false, playerName, playerColor, true));\n  }\n  player.alive.push(\n    new Rook('wR', 'whiteRook', grid[0][7], false, playerName, playerColor, true),\n    new Knight('wN', 'whiteKnight', grid[1][7], false, playerName, playerColor, true),\n    new Bishop('wB', 'whiteBishop', grid[2][7], false, playerName, playerColor, true),\n    new Queen('wQ', 'whiteQueen', grid[3][7], false, playerName, playerColor, true),\n    new King('wK', 'whiteKing', grid[4][7], false, playerName, playerColor, true),\n    new Bishop('wB', 'whiteBishop', grid[5][7], false, playerName, playerColor, true),\n    new Knight('wN', 'whiteKnight', grid[6][7], false, playerName, playerColor, true),\n    new Rook('wR', 'whiteRook', grid[7][7], false, playerName, playerColor, true)\n  )\n}\n\nexport const assignBlackPieces = (player: Player): void => {\n  const playerName = player.name;\n  const playerColor = player.color;\n  for (let col of grid) {\n      player.alive.push(new Pawn('bP', 'blackPawn', col[1], false, playerName, playerColor, false));\n  }\n  player.alive.push(\n      new Rook('bR', 'blackRook', grid[0][0], false, playerName, playerColor, false),\n      new Knight('bN', 'blackKnight', grid[1][0], false, playerName, playerColor, false),\n      new Bishop('bB', 'blackBishop', grid[2][0], false, playerName, playerColor, false),\n      new Queen('bQ', 'blackQueen', grid[3][0], false, playerName, playerColor, false),\n      new King('bK', 'blackKing', grid[4][0], false, playerName, playerColor, false),\n      new Bishop('bB', 'blackBishop', grid[5][0], false, playerName, playerColor, false),\n      new Knight('bN', 'blackKnight', grid[6][0], false, playerName, playerColor, false),\n      new Rook('bR', 'blackRook', grid[7][0], false, playerName, playerColor, false)\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}