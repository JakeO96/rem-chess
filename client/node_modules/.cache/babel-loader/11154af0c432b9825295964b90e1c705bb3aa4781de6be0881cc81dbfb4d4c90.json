{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/context/GameContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from 'react';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext({\n  initiatingUser: '',\n  receivingUser: '',\n  gameId: '',\n  setGameId: () => {} // default function, will be overwritten by Provider value\n});\n\nexport const GameProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [initiatingUser, setInitiatingUser] = useState('');\n  const [receivingUser, setReceivingUser] = useState('');\n  const [gameId, setGameId] = useState('');\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:3001');\n  const {\n    sendMessage,\n    lastMessage,\n    readyState\n  } = useWebSocket(socketUrl, {\n    onOpen: () => console.log('opened'),\n    shouldReconnect: closeEvent => true\n  });\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated'\n  }[readyState];\n  useEffect(() => {\n    function handleIncomingData(data) {\n      const {\n        type,\n        gameId,\n        initiatingUser,\n        receivingUser\n      } = data;\n      if (initiatingUser && receivingUser) {\n        if (type === 'game-player-usernames') {\n          if (initiatingUser === 'string' && receivingUser === 'string') {\n            setInitiatingUser(initiatingUser);\n            setReceivingUser(receivingUser);\n          }\n        }\n      }\n    }\n    if (!initiatingUser && !receivingUser) {\n      if (lastMessage !== null) {\n        if (lastMessage.data instanceof Blob) {\n          const reader = new FileReader();\n          reader.onload = () => {\n            if (typeof reader.result === 'string') {\n              const data = JSON.parse(reader.result);\n              handleIncomingData(data);\n            }\n          };\n          reader.readAsText(lastMessage.data);\n        } else {\n          const data = JSON.parse(lastMessage.data);\n          handleIncomingData(data);\n        }\n      }\n      const message = JSON.stringify({\n        type: 'get-game-players',\n        gameId: ''\n      });\n      sendMessage(message);\n    }\n  }, [initiatingUser, lastMessage, receivingUser, sendMessage]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      initiatingUser,\n      receivingUser,\n      gameId,\n      setGameId\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(GameProvider, \"DP9kXoV24idPt+5V+p3JwgEWnxQ=\", false, function () {\n  return [useWebSocket];\n});\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useWebSocket","ReadyState","jsxDEV","_jsxDEV","GameContext","initiatingUser","receivingUser","gameId","setGameId","GameProvider","_ref","_s","children","setInitiatingUser","setReceivingUser","socketUrl","setSocketUrl","sendMessage","lastMessage","readyState","onOpen","console","log","shouldReconnect","closeEvent","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","handleIncomingData","data","type","Blob","reader","FileReader","onload","result","JSON","parse","readAsText","message","stringify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/context/GameContext.tsx"],"sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { JsonObject } from 'react-use-websocket/dist/lib/types';\n\ninterface GetGamePlayerUsernames extends JsonObject {\n  type: string;\n  gameId: string;\n  initiatingUser?: string;\n  recievingUser?: string;\n}\n\ntype GameContextType = {\n  initiatingUser: string;\n  receivingUser: string;\n  gameId: string;\n  setGameId: React.Dispatch<React.SetStateAction<string>>;\n};\n\nexport const GameContext = createContext<GameContextType>({\n  initiatingUser: '',\n  receivingUser: '',\n  gameId: '',\n  setGameId: () => {}, // default function, will be overwritten by Provider value\n});\n\ntype GameProviderProps = {\n  children: ReactNode;\n};\n\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\n  const [initiatingUser, setInitiatingUser] = useState<string>('');\n  const [receivingUser, setReceivingUser] = useState<string>('');\n  const [gameId, setGameId] = useState<string>('');\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:3001');\n  const { \n    sendMessage, \n    lastMessage,\n    readyState \n  } = useWebSocket<GetGamePlayerUsernames>(socketUrl, { \n    onOpen: () => console.log('opened'), \n    shouldReconnect: (closeEvent) => true,\n  });\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n  }[readyState];\n\n  useEffect(() => {\n    function handleIncomingData(data: GetGamePlayerUsernames) {\n      const { type, gameId, initiatingUser, receivingUser } = data;\n      if (initiatingUser && receivingUser) {\n        if (type === 'game-player-usernames') {\n          if (initiatingUser === 'string' && receivingUser === 'string') {\n            setInitiatingUser(initiatingUser);\n            setReceivingUser(receivingUser);\n          }\n        }\n      }\n    }\n    if (!initiatingUser && !receivingUser) {\n      if (lastMessage !== null) {\n        if (lastMessage.data instanceof Blob) {\n          const reader = new FileReader();\n          reader.onload = () => {\n            if (typeof reader.result === 'string') {\n              const data = JSON.parse(reader.result);\n              handleIncomingData(data);\n            }\n          };\n          reader.readAsText(lastMessage.data);\n        } else {\n          const data = JSON.parse(lastMessage.data);\n          handleIncomingData(data);\n        }\n      }\n      const message = JSON.stringify({type: 'get-game-players', gameId: ''})\n      sendMessage(message);\n    }\n  }, [initiatingUser, lastMessage, receivingUser, sendMessage]);\n\n  return (\n    <GameContext.Provider value={{ initiatingUser, receivingUser, gameId, setGameId }}>\n      {children}\n    </GameContext.Provider>\n  );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}