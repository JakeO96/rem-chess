{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx\";\nimport MainLayout from \"./MainLayout\";\nexport const ActiveGame = () => {\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 11\n  }, this);\n};\n_c = ActiveGame;\nimport { Pawn, Knight, Rook, Bishop, Queen, King } from './pieces';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst grid = [['A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1', 'A0'], ['B7', 'B6', 'B5', 'B4', 'B3', 'B2', 'B1', 'B0'], ['C7', 'C6', 'C5', 'C4', 'C3', 'C2', 'C1', 'C0'], ['D7', 'D6', 'D5', 'D4', 'D3', 'D2', 'D1', 'D0'], ['E7', 'E6', 'E5', 'E4', 'E3', 'E2', 'E1', 'E0'], ['F7', 'F6', 'F5', 'F4', 'F3', 'F2', 'F1', 'F0'], ['G7', 'G6', 'G5', 'G4', 'G3', 'G2', 'G1', 'G0'], ['H7', 'H6', 'H5', 'H4', 'H3', 'H2', 'H1', 'H0']];\nclass Chess {\n  constructor(p1, p2) {\n    this.p1 = void 0;\n    this.p2 = void 0;\n    this.gstate = void 0;\n    this.p1 = p1;\n    this.p2 = p2;\n    this.gstate = {};\n  }\n  initializeGame() {\n    this.getPlayerNames();\n    this.produceEmptyBoard();\n    this.randomlyAssignWhite();\n    this.setPiecesOnBoard();\n  }\n  processMove(start, end) {\n    const copyState = {\n      ...this.gstate\n    };\n    const adjStart = start[0] + (parseInt(start[1]) - 1).toString();\n    const adjEnd = end[0] + (parseInt(end[1]) - 1).toString();\n    const startCol = this.gstate[adjStart][1];\n    const startRow = 7 - parseInt(adjStart[1]);\n    const piece = copyState[adjStart][0];\n    let allMoves = [];\n    if (piece instanceof Pawn) {\n      allMoves = this.p1.findPawnMoves(grid, this.gstate, startCol, startRow);\n    } else if (piece instanceof Knight) {\n      allMoves = piece.validKnightMoves(grid, this.gstate, startCol, startRow);\n    } else if (piece instanceof Rook) {\n      allMoves = piece.getAllStraight(grid, this.gstate, startCol, startRow);\n    } else if (piece instanceof Bishop) {\n      allMoves = piece.getAllDiagonal(grid, this.gstate, startCol, startRow);\n    } else if (piece instanceof Queen) {\n      allMoves = piece.getAllStraight(grid, this.gstate, startCol, startRow).concat(piece.getAllDiagonal(grid, this.gstate, startCol, startRow));\n    } else if (piece instanceof King) {\n      allMoves = piece.validKingMoves(grid, this.gstate, startCol, startRow);\n    }\n\n    // The rest of this method would be as in the Python code...\n\n    return false;\n  }\n  printBoard() {\n    // Similar to the Python code...\n  }\n  getPlayerNames() {\n    // Depends on your environment...\n  }\n  setPiecesOnBoard() {\n    const allPieces = this.p1.alive.concat(this.p2.alive);\n    const allPositions = allPieces.map(p => p.position);\n    for (const spot in this.gstate) {\n      if (allPositions.includes(spot)) {\n        for (const p of allPieces) {\n          if (p.position === spot) {\n            this.gstate[spot][0] = p;\n          }\n        }\n      }\n    }\n  }\n  randomlyAssignWhite() {\n    const r = Math.floor(Math.random() * 2);\n    if (r === 0) {\n      this.p1.assignWhitePieces(grid);\n      this.p1.color = 'white';\n      console.log(`\\n${this.p1.name} has been assigned to white (w) and will move first.`);\n      this.p2.assignBlackPieces(grid);\n      this.p2.color = 'black';\n    } else {\n      this.p2.assignWhitePieces(grid);\n      this.p2.color = 'white';\n      console.log(`${this.p2.name} has been assigned to white (w) and will move first.\\n`);\n      this.p1.assignBlackPieces(grid);\n      this.p1.color = 'black';\n    }\n  }\n  produceEmptyBoard() {\n    let cCnt = 0;\n    for (const col of grid) {\n      for (const cord of col) {\n        this.gstate[cord] = [null, cCnt];\n      }\n      cCnt += 1;\n    }\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"ActiveGame\");","map":{"version":3,"names":["MainLayout","ActiveGame","_jsxDEV","children","_Fragment","fileName","_jsxFileName","lineNumber","columnNumber","_c","Pawn","Knight","Rook","Bishop","Queen","King","Fragment","jsxDEV","grid","Chess","constructor","p1","p2","gstate","initializeGame","getPlayerNames","produceEmptyBoard","randomlyAssignWhite","setPiecesOnBoard","processMove","start","end","copyState","adjStart","parseInt","toString","adjEnd","startCol","startRow","piece","allMoves","findPawnMoves","validKnightMoves","getAllStraight","getAllDiagonal","concat","validKingMoves","printBoard","allPieces","alive","allPositions","map","p","position","spot","includes","r","Math","floor","random","assignWhitePieces","color","console","log","name","assignBlackPieces","cCnt","col","cord","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx"],"sourcesContent":["import MainLayout from \"./MainLayout\"\n\nexport const ActiveGame: React.FC<{}> = () => {\n  return (<MainLayout><></></MainLayout>)\n}\n\nimport { Player, Piece, Pawn, Knight, Rook, Bishop, Queen, King } from './pieces';\n\nconst grid: string[][] = [\n    ['A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1', 'A0'],\n    ['B7', 'B6', 'B5', 'B4', 'B3', 'B2', 'B1', 'B0'],\n    ['C7', 'C6', 'C5', 'C4', 'C3', 'C2', 'C1', 'C0'],\n    ['D7', 'D6', 'D5', 'D4', 'D3', 'D2', 'D1', 'D0'],\n    ['E7', 'E6', 'E5', 'E4', 'E3', 'E2', 'E1', 'E0'],\n    ['F7', 'F6', 'F5', 'F4', 'F3', 'F2', 'F1', 'F0'],\n    ['G7', 'G6', 'G5', 'G4', 'G3', 'G2', 'G1', 'G0'],\n    ['H7', 'H6', 'H5', 'H4', 'H3', 'H2', 'H1', 'H0']\n];\n\ninterface GameState {\n    [key: string]: [Piece | null, number];\n}\n\nclass Chess {\n    private p1: Player;\n    private p2: Player;\n    private gstate: GameState;\n\n    constructor(p1: Player, p2: Player) {\n        this.p1 = p1;\n        this.p2 = p2;\n        this.gstate = {};\n    }\n\n    public initializeGame(): void {\n        this.getPlayerNames();\n        this.produceEmptyBoard();\n        this.randomlyAssignWhite();\n        this.setPiecesOnBoard();\n    }\n\n    public processMove(start: string, end: string): boolean {\n        const copyState = { ...this.gstate };\n        const adjStart = start[0] + ((parseInt(start[1]) - 1).toString());\n        const adjEnd = end[0] + ((parseInt(end[1]) - 1).toString());\n        const startCol = this.gstate[adjStart][1];\n        const startRow = 7 - parseInt(adjStart[1]);\n\n        const piece = copyState[adjStart][0];\n        let allMoves = [];\n\n        if (piece instanceof Pawn) {\n            allMoves = this.p1.findPawnMoves(grid, this.gstate, startCol, startRow);\n        } else if (piece instanceof Knight) {\n            allMoves = piece.validKnightMoves(grid, this.gstate, startCol, startRow);\n        } else if (piece instanceof Rook) {\n            allMoves = piece.getAllStraight(grid, this.gstate, startCol, startRow);\n        } else if (piece instanceof Bishop) {\n            allMoves = piece.getAllDiagonal(grid, this.gstate, startCol, startRow);\n        } else if (piece instanceof Queen) {\n            allMoves = piece.getAllStraight(grid, this.gstate, startCol, startRow).concat(\n                piece.getAllDiagonal(grid, this.gstate, startCol, startRow)\n            );\n        } else if (piece instanceof King) {\n            allMoves = piece.validKingMoves(grid, this.gstate, startCol, startRow);\n        }\n\n        // The rest of this method would be as in the Python code...\n\n        return false;\n    }\n\n    public printBoard(): void {\n        // Similar to the Python code...\n    }\n\n    private getPlayerNames(): void {\n        // Depends on your environment...\n    }\n\n    private setPiecesOnBoard(): void {\n        const allPieces = this.p1.alive.concat(this.p2.alive);\n        const allPositions = allPieces.map(p => p.position);\n        for (const spot in this.gstate) {\n            if (allPositions.includes(spot)) {\n                for (const p of allPieces) {\n                    if (p.position === spot) {\n                        this.gstate[spot][0] = p;\n                    }\n                }\n            }\n        }\n    }\n\n    private randomlyAssignWhite(): void {\n        const r = Math.floor(Math.random() * 2);\n        if (r === 0) {\n            this.p1.assignWhitePieces(grid);\n            this.p1.color = 'white';\n            console.log(`\\n${this.p1.name} has been assigned to white (w) and will move first.`);\n            this.p2.assignBlackPieces(grid);\n            this.p2.color = 'black';\n        } else {\n            this.p2.assignWhitePieces(grid);\n            this.p2.color = 'white';\n            console.log(`${this.p2.name} has been assigned to white (w) and will move first.\\n`);\n            this.p1.assignBlackPieces(grid);\n            this.p1.color = 'black';\n        }\n    }\n\n    private produceEmptyBoard(): void {\n        let cCnt = 0;\n        for (const col of grid) {\n            for (const cord of col) {\n                this.gstate[cord] = [null, cCnt];\n            }\n            cCnt += 1;\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}