{"ast":null,"code":"const SERVER_API_URL = 'http://localhost:3001/api';\nvar fetchMethods = /*#__PURE__*/function (fetchMethods) {\n  fetchMethods[\"POST\"] = \"POST\";\n  fetchMethods[\"GET\"] = \"GET\";\n  fetchMethods[\"PUT\"] = \"PUT\";\n  fetchMethods[\"DELETE\"] = \"DELETE\";\n  return fetchMethods;\n}(fetchMethods || {});\nexport default class ExpressAPI {\n  constructor() {\n    // Create a User\n    this.createUser = async data => {\n      const response = await this.makeApiCall(fetchMethods.POST, '/auth/register', data);\n      return response;\n    };\n    // Log a user in\n    this.logUserIn = async data => {\n      const response = await this.makeApiCall(fetchMethods.POST, '/auth/login', data);\n      return response;\n    };\n    // Log a user out\n    this.logUserOut = async () => {\n      const response = await this.makeApiCall(fetchMethods.POST, '/auth/logout');\n      return response;\n    };\n    // Get all users currently logged in\n    this.getLoggedInUsers = async () => {\n      const response = await this.makeApiCall(fetchMethods.GET, '/user/logged-in');\n      return response;\n    };\n    // Check to see if a form fields, value already a value in an existing User document in the DB. \n    this.fieldExistsInDB = async (fieldName, value) => {\n      const response = await this.makeApiCall(fetchMethods.GET, `/user/exists/${fieldName}/${value}`);\n      return response;\n    };\n    // Create a new Game of chess\n    this.createGame = async data => {\n      const response = await this.makeApiCall(fetchMethods.POST, '/game/create-game', data);\n      return response;\n    };\n    // Fetch wrapper\n    this.makeApiCall = async function (method, endpoint) {\n      let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      const url = `${SERVER_API_URL}${endpoint}`;\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      console.log(headers);\n      const requestOptions = {\n        method,\n        headers,\n        credentials: 'include' // Include http-only cookies\n      };\n\n      if (method === 'POST') {\n        requestOptions.body = JSON.stringify(data);\n      }\n      const response = await fetch(url, requestOptions);\n      if (response.status === 401) {\n        const errorData = await response.json();\n        if (errorData.message === 'Session has expired. Please log in again.') {\n          const refreshResponse = await fetch(`${SERVER_API_URL}/api/auth/refresh`, {\n            method: 'POST',\n            credentials: 'include'\n          });\n          if (!refreshResponse.ok) {\n            throw new Error('Unable to refresh tokens');\n          }\n          const retryResponse = await fetch(url, requestOptions);\n          const retryResponseData = await retryResponse.json();\n          return retryResponseData;\n        }\n      }\n      return response.json();\n    };\n  }\n}","map":{"version":3,"names":["SERVER_API_URL","fetchMethods","ExpressAPI","constructor","createUser","data","response","makeApiCall","POST","logUserIn","logUserOut","getLoggedInUsers","GET","fieldExistsInDB","fieldName","value","createGame","method","endpoint","arguments","length","undefined","url","headers","console","log","requestOptions","credentials","body","JSON","stringify","fetch","status","errorData","json","message","refreshResponse","ok","Error","retryResponse","retryResponseData"],"sources":["/home/jake/rem-stack/chess/client/src/api/express-api.ts"],"sourcesContent":["const SERVER_API_URL= 'http://localhost:3001/api'\n\nenum fetchMethods {\n  POST = 'POST',\n  GET = 'GET',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n}\n\nexport default class ExpressAPI {\n\n  // Create a User\n  createUser = async (data: Object): Promise<Response> => {\n    const response = await this.makeApiCall(fetchMethods.POST, '/auth/register', data)\n    return response\n  }\n\n  // Log a user in\n  logUserIn = async (data: object): Promise<Response> => {\n    const response = await this.makeApiCall(fetchMethods.POST, '/auth/login', data)\n    return response;\n  }\n\n  // Log a user out\n  logUserOut = async (): Promise<Response> => {\n    const response = await this.makeApiCall(fetchMethods.POST, '/auth/logout');\n    return response;\n  }\n\n  // Get all users currently logged in\n  getLoggedInUsers = async (): Promise<any> => {\n    const response = await this.makeApiCall(fetchMethods.GET, '/user/logged-in');\n    return response;\n  }\n\n  // Check to see if a form fields, value already a value in an existing User document in the DB. \n  fieldExistsInDB = async (fieldName: string, value: any): Promise<Response> => {\n    const response = await this.makeApiCall(fetchMethods.GET,`/user/exists/${fieldName}/${value}`);\n    return response;\n  }\n\n  // Create a new Game of chess\n  createGame = async (data: object): Promise<Response> => {\n    const response = await this.makeApiCall(fetchMethods.POST, '/game/create-game', data);\n    return response;\n  }\n\n  // Fetch wrapper\n  private makeApiCall = async (method: string, endpoint: string, data: any = {}): Promise<any> => {\n    const url = `${SERVER_API_URL}${endpoint}`;\n    \n    const headers = {\n      'Content-Type': 'application/json',\n    }\n    console.log(headers)\n\n    const requestOptions: RequestInit = {\n      method,\n      headers,\n      credentials: 'include', // Include http-only cookies\n    };\n    if (method === 'POST') {\n      requestOptions.body = JSON.stringify(data);\n    }\n    \n    const response = await fetch(url, requestOptions);\n    if(response.status === 401) {\n      const errorData = await response.json();\n      if(errorData.message === 'Session has expired. Please log in again.') {\n        const refreshResponse = await fetch(`${SERVER_API_URL}/api/auth/refresh`, { method: 'POST', credentials: 'include' });\n        if (!refreshResponse.ok) {\n          throw new Error('Unable to refresh tokens');\n        }\n        const retryResponse = await fetch(url, requestOptions);\n        const retryResponseData = await retryResponse.json();\n        return retryResponseData;\n      }\n    }\n    return response.json();\n  } \n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}