{"ast":null,"code":"const grid = [['A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1', 'A0'], ['B7', 'B6', 'B5', 'B4', 'B3', 'B2', 'B1', 'B0'], ['C7', 'C6', 'C5', 'C4', 'C3', 'C2', 'C1', 'C0'], ['D7', 'D6', 'D5', 'D4', 'D3', 'D2', 'D1', 'D0'], ['E7', 'E6', 'E5', 'E4', 'E3', 'E2', 'E1', 'E0'], ['F7', 'F6', 'F5', 'F4', 'F3', 'F2', 'F1', 'F0'], ['G7', 'G6', 'G5', 'G4', 'G3', 'G2', 'G1', 'G0'], ['H7', 'H6', 'H5', 'H4', 'H3', 'H2', 'H1', 'H0']];\nexport class Player {\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let alive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let grave = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    this.name = void 0;\n    this.color = void 0;\n    this.alive = void 0;\n    this.grave = void 0;\n    this.name = name;\n    this.color = color;\n    this.alive = alive;\n    this.grave = grave;\n  }\n}\nexport class Piece {\n  constructor(name, position, moved, player) {\n    this.name = name;\n    this.position = position;\n    this.moved = moved;\n    this.player = player;\n  }\n  get_all_diagonal(grid, state, col, row) {\n    let all_moves = [];\n    all_moves = all_moves.concat(this.recurse_diagonal(col + 1, 8, row + 1, grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col - 1, -1, row - 1, grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col + 1, 8, row - 1, grid, state, [], 'b-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col - 1, -1, row + 1, grid, state, [], 'b-slash'));\n    return all_moves;\n  }\n  recurse_straight(looper, end, anchor, grid, state, all_moves, axis) {\n    if (looper === end) {\n      return all_moves;\n    }\n    let spot = axis === 'vert' ? grid[anchor][looper] : grid[looper][anchor];\n    if (state[spot][0] === null) {\n      all_moves.push(spot);\n      if (end === 8) {\n        return this.recurse_straight(looper + 1, end, anchor, grid, state, all_moves, axis);\n      } else {\n        return this.recurse_straight(looper - 1, end, anchor, grid, state, all_moves, axis);\n      }\n    } else if (state[spot][0].player.color === this.player.color) {\n      return all_moves;\n    } else {\n      all_moves.push(spot);\n      return all_moves;\n    }\n  }\n  recurse_diagonal(col_rec, end, row_rec, grid, state, all_moves, axis) {\n    if (col_rec === 8 || col_rec === -1 || row_rec === 8 || row_rec === -1) {\n      return all_moves;\n    }\n    let spot = grid[col_rec][row_rec];\n    if (state[spot][0] === null) {\n      all_moves.push(spot);\n      if (axis === 'f-slash' && end === 8) {\n        return this.recurse_diagonal(col_rec + 1, end, row_rec + 1, grid, state, all_moves, axis);\n      } else if (axis === 'f-slash' && end !== 8) {\n        return this.recurse_diagonal(col_rec - 1, end, row_rec - 1, grid, state, all_moves, axis);\n      } else if (axis !== 'f-slash' && end === 8) {\n        return this.recurse_diagonal(col_rec + 1, end, row_rec - 1, grid, state, all_moves, axis);\n      } else {\n        return this.recurse_diagonal(col_rec - 1, end, row_rec + 1, grid, state, all_moves, axis);\n      }\n    } else if (state[spot][0].player.color === this.player.color) {\n      return all_moves;\n    } else {\n      all_moves.push(spot);\n      return all_moves;\n    }\n  }\n}\nexport class Pawn extends Piece {\n  validPawnMoves(grid, state, col, row) {\n    let all_moves = [];\n    if (state[grid[col][row - 1]][0] === null) {\n      all_moves.push(grid[col][row - 1]);\n    }\n    let attacks = [grid[col - 1][row - 1], grid[col + 1][row - 1]];\n    for (let d of attacks) {\n      if (state[d][0] === null) {\n        continue;\n      } else if (!this.player.alive.includes(state[d][0])) {\n        all_moves.push(d);\n      } else {\n        continue;\n      }\n    }\n    if (state[grid[col][row]].moved === 0) {\n      if (this.player.color === 'black') {\n        all_moves.push(grid[col][row - 2]);\n      } else {\n        all_moves.push(grid[col][row + 2]);\n      }\n    }\n    return all_moves;\n  }\n}\nexport class Rook extends Piece {}\nexport class Knight extends Piece {\n  validKnightMoves(grid, state, col, row) {\n    const allMoves = [];\n    const potentialMoves = [[col - 2, row - 1], [col - 2, row + 1], [col + 2, row - 1], [col + 2, row + 1], [col + 1, row + 2], [col - 1, row + 2], [col + 1, row - 2], [col - 1, row - 2]];\n    for (const move of potentialMoves) {\n      var _this$player;\n      if (move[0] < 0 || move[0] > 7 || move[1] < 0 || move[1] > 7) {\n        continue;\n      }\n      const spot = grid[move[0]][move[1]];\n      if (state[spot][0] === null || state[spot][0].player.color !== ((_this$player = this.player) === null || _this$player === void 0 ? void 0 : _this$player.color)) {\n        allMoves.push(spot);\n      }\n    }\n    return allMoves;\n  }\n}\nexport class Bishop extends Piece {}\nexport class Queen extends Piece {}\nexport class King extends Piece {\n  validKingMoves(grid, state, col, row) {\n    const cords = [[col, row + 1], [col - 1, row + 1], [col + 1, row + 1], [col, row - 1], [col - 1, row - 1], [col + 1, row - 1], [col + 1, row], [col - 1, row]];\n    const allMoves = [];\n    for (const c of cords) {\n      if (c[0] === 8 || c[0] === -1 || c[1] === 8 || c[1] === -1) {\n        continue;\n      } else {\n        var _this$player2;\n        const spot = grid[c[0]][c[1]];\n        if (state[spot][0] === null) {\n          allMoves.push(spot);\n        } else if (state[spot][0].player.color === ((_this$player2 = this.player) === null || _this$player2 === void 0 ? void 0 : _this$player2.color)) {\n          continue;\n        } else {\n          allMoves.push(spot);\n        }\n      }\n    }\n    return allMoves;\n  }\n}\nexport const assignWhitePieces = (grid, player) => {\n  for (let col of grid) {\n    player.alive.push(new Pawn('wP', col[6], false, player));\n  }\n  player.alive.push(new Rook('wR', grid[0][7], false, player), new Knight('wN', grid[1][7], false, player), new Bishop('wB', grid[2][7], false, player), new Queen('wQ', grid[3][7], false, player), new King('wK', grid[4][7], false, player), new Bishop('wB', grid[5][7], false, player), new Knight('wN', grid[6][7], false, player), new Rook('wR', grid[7][7], false, player));\n};\nexport const assignBlackPieces = (grid, player) => {\n  for (let col of grid) {\n    player.alive.push(new Pawn('bP', col[1], false, player));\n  }\n  player.alive.push(new Rook('bR', grid[0][0], false, player), new Knight('bN', grid[1][0], false, player), new Bishop('bB', grid[2][0], false, player), new Queen('bQ', grid[3][0], false, player), new King('bK', grid[4][0], false, player), new Bishop('bB', grid[5][0], false, player), new Knight('bN', grid[6][0], false, player), new Rook('bR', grid[7][0], false, player));\n};\nexport const processMove = (start, end, gameState) => {\n  let copy_state = {\n    ...gameState\n  };\n  let adj_start = start[0] + (parseInt(start[1]) - 1).toString();\n  let adj_end = end[0] + (parseInt(end[1]) - 1).toString();\n  let start_col = gameState[adj_start][1];\n  let start_row = 7 - parseInt(adj_start[1]);\n  let piece = copy_state[adj_start][0];\n  let all_moves = [];\n  // find what piece we are moving\n  if (piece instanceof Pawn) {\n    all_moves = piece.validPawnMoves(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Knight) {\n    all_moves = piece.validKnightMoves(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Rook) {\n    all_moves = piece.get_all_straight(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Bishop) {\n    all_moves = piece.get_all_diagonal(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Queen) {\n    all_moves = piece.get_all_straight(grid, gameState, start_col, start_row).concat(piece.get_all_diagonal(grid, gameState, start_col, start_row));\n  } else if (piece instanceof King) {\n    all_moves = piece.valid_king_moves(grid, gameState, start_col, start_row);\n  }\n  if (all_moves.includes(adj_end)) {\n    // if the piece moving is taking an opponents piece\n    if (copy_state[adj_end][0] !== null) {\n      // update the alive and grave list for player losing a piece\n      if (this.p1.alive.includes(copy_state[adj_end][0])) {\n        this.p1.grave.push(copy_state[adj_end][0]);\n        this.p1.alive = this.p1.alive.filter(item => item !== copy_state[adj_end][0]);\n      } else {\n        this.p2.grave.push(copy_state[adj_end][0]);\n        this.p2.alive = this.p2.alive.filter(item => item !== copy_state[adj_end][0]);\n      }\n    }\n    // update the positions of the pieces on the board\n    this.gstate[adj_end][0] = copy_state[adj_start][0];\n    this.gstate[adj_start][0] = null;\n    this.gstate[adj_end][0].position = adj_end;\n    // update the position of the piece for the player who's color is the piece's color\n    if (this.p1 === this.gstate[adj_end][0].player) {\n      this.p1.alive.forEach(p => {\n        if (p.position === adj_start) {\n          p.position = adj_end;\n        }\n      });\n    } else {\n      this.p2.alive.forEach(p => {\n        if (p.position === adj_start) {\n          p.position = adj_end;\n        }\n      });\n    }\n  } else {\n    return false;\n  }\n  return true;\n};","map":{"version":3,"names":["grid","Player","constructor","name","arguments","length","undefined","color","alive","grave","Piece","position","moved","player","get_all_diagonal","state","col","row","all_moves","concat","recurse_diagonal","recurse_straight","looper","end","anchor","axis","spot","push","col_rec","row_rec","Pawn","validPawnMoves","attacks","d","includes","Rook","Knight","validKnightMoves","allMoves","potentialMoves","move","_this$player","Bishop","Queen","King","validKingMoves","cords","c","_this$player2","assignWhitePieces","assignBlackPieces","processMove","start","gameState","copy_state","adj_start","parseInt","toString","adj_end","start_col","start_row","piece","get_all_straight","valid_king_moves","p1","filter","item","p2","gstate","forEach","p"],"sources":["/home/jake/rem-stack/chess/client/src/utils/game-utils.ts"],"sourcesContent":["const grid: string[][] = [\n  ['A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1', 'A0'],\n  ['B7', 'B6', 'B5', 'B4', 'B3', 'B2', 'B1', 'B0'],\n  ['C7', 'C6', 'C5', 'C4', 'C3', 'C2', 'C1', 'C0'],\n  ['D7', 'D6', 'D5', 'D4', 'D3', 'D2', 'D1', 'D0'],\n  ['E7', 'E6', 'E5', 'E4', 'E3', 'E2', 'E1', 'E0'],\n  ['F7', 'F6', 'F5', 'F4', 'F3', 'F2', 'F1', 'F0'],\n  ['G7', 'G6', 'G5', 'G4', 'G3', 'G2', 'G1', 'G0'],\n  ['H7', 'H6', 'H5', 'H4', 'H3', 'H2', 'H1', 'H0']\n];\n\nexport interface Player {\n  name: string;\n  color: string;\n  alive: Piece[];\n  grace: Piece[];\n}\n\nexport class Player {\n  name: string;\n  color: string;\n  alive: Piece[];\n  grave: Piece[];\n\n  constructor(name: string = '', color: string = '', alive: Piece[] = [], grave: Piece[] = []) {\n    this.name = name;\n    this.color = color;\n    this.alive = alive;\n    this.grave = grave;\n  }\n}\n\nexport abstract class Piece {\n  constructor(\n    public name: string,\n    public position: string,\n    public moved: boolean,\n    public player: Player,\n  ) { }\n\n  get_all_diagonal(grid: string[][], state: any, col: number, row: number): string[] {\n    let all_moves: string[] = [];\n    all_moves = all_moves.concat(this.recurse_diagonal((col + 1), 8, (row + 1), grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col - 1), (-1), (row - 1), grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col + 1), 8, (row - 1), grid, state, [], 'b-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col - 1), (-1), (row + 1), grid, state, [], 'b-slash'));\n    return all_moves;\n  }\n\n  recurse_straight(looper: number, end: number, anchor: number, grid: string[][], state: any, all_moves: string[], axis: string): string[] {\n    if (looper === end) {\n        return all_moves;\n    }\n    let spot: string = axis === 'vert' ? grid[anchor][looper] : grid[looper][anchor];\n    if (state[spot][0] === null) {\n        all_moves.push(spot);\n        if (end === 8) {\n            return this.recurse_straight((looper + 1), end, anchor, grid, state, all_moves, axis);\n        } else {\n            return this.recurse_straight((looper - 1), end, anchor, grid, state, all_moves, axis);\n        }\n    } else if (state[spot][0].player.color === this.player.color) {\n        return all_moves;\n    } else {\n        all_moves.push(spot);\n        return all_moves;\n    }\n  }\n\n  recurse_diagonal(col_rec: number, end: number, row_rec: number, grid: string[][], state: any, all_moves: string[], axis: string): string[] {\n    if (col_rec === 8 || col_rec === (-1) || row_rec === 8 || row_rec === (-1)) {\n        return all_moves;\n    }\n    let spot: string = grid[col_rec][row_rec];\n    if (state[spot][0] === null) {\n        all_moves.push(spot);\n        if (axis === 'f-slash' && end === 8) {\n            return this.recurse_diagonal((col_rec + 1), end, (row_rec + 1), grid, state, all_moves, axis);\n        } else if (axis === 'f-slash' && end !== 8) {\n            return this.recurse_diagonal((col_rec - 1), end, (row_rec - 1), grid, state, all_moves, axis);\n        } else if (axis !== 'f-slash' && end === 8) {\n            return this.recurse_diagonal((col_rec + 1), end, (row_rec - 1), grid, state, all_moves, axis);\n        } else {\n            return this.recurse_diagonal((col_rec - 1), end, (row_rec + 1), grid, state, all_moves, axis);\n        }\n    } else if (state[spot][0].player.color === this.player.color) {\n        return all_moves;\n    } else {\n        all_moves.push(spot);\n        return all_moves;\n    }\n  }\n}\n\nexport class Pawn extends Piece {\n  validPawnMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    let all_moves: string[] = [];\n    if (state[grid[col][row - 1]][0] === null) {\n        all_moves.push(grid[col][row - 1]);\n    }\n\n    let attacks: string[] = [grid[(col - 1)][(row - 1)], grid[(col + 1)][(row - 1)]];\n    for (let d of attacks) {\n        if (state[d][0] === null) {\n            continue;\n        } else if (!this.player.alive.includes(state[d][0])) {\n            all_moves.push(d);\n        } else {\n            continue;\n        }\n    }\n\n    if (state[grid[col][row]].moved === 0) {\n        if (this.player.color === 'black') {\n            all_moves.push(grid[col][(row - 2)]);\n        } else {\n            all_moves.push(grid[col][(row + 2)]);\n        }\n    }\n    return all_moves;\n}\n}\n\nexport class Rook extends Piece {}\n\nexport class Knight extends Piece {\n  validKnightMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    const allMoves: string[] = [];\n    \n    const potentialMoves: [number, number][] = [\n      [col - 2, row - 1], [col - 2, row + 1],\n      [col + 2, row - 1], [col + 2, row + 1],\n      [col + 1, row + 2], [col - 1, row + 2],\n      [col + 1, row - 2], [col - 1, row - 2]\n    ];\n\n    for (const move of potentialMoves) {\n      if (move[0] < 0 || move[0] > 7 || move[1] < 0 || move[1] > 7) {\n        continue;\n      }\n\n      const spot = grid[move[0]][move[1]];\n      if (state[spot][0] === null || state[spot][0].player.color !== this.player?.color) {\n        allMoves.push(spot);\n      }\n    }\n\n    return allMoves;\n  }\n}\n\nexport class Bishop extends Piece {\n}\n\nexport class Queen extends Piece {}\n\nexport class King extends Piece {\n  validKingMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    const cords = [\n      [col, (row + 1)],\n      [(col - 1), (row + 1)],\n      [(col + 1), (row + 1)],\n      [col, (row - 1)],\n      [(col - 1), (row - 1)],\n      [(col + 1), (row - 1)],\n      [(col + 1), row],\n      [(col - 1), row]\n    ];\n\n    const allMoves: string[] = [];\n    for (const c of cords) {\n      if (c[0] === 8 || c[0] === -1 || c[1] === 8 || c[1] === -1) {\n        continue;\n      } else {\n        const spot = grid[c[0]][c[1]];\n        if (state[spot][0] === null) {\n          allMoves.push(spot);\n        } else if (state[spot][0].player.color === this.player?.color) {\n          continue;\n        } else {\n          allMoves.push(spot);\n        }\n      }\n    }\n\n    return allMoves;\n  }\n}\n\nexport const assignWhitePieces = (grid: string[][], player: Player): void => {\n  for (let col of grid) {\n    player.alive.push(new Pawn('wP', col[6], false, player));\n  }\n  player.alive.push(\n    new Rook('wR', grid[0][7], false, player),\n    new Knight('wN', grid[1][7], false, player),\n    new Bishop('wB', grid[2][7], false, player),\n    new Queen('wQ', grid[3][7], false, player),\n    new King('wK', grid[4][7], false, player),\n    new Bishop('wB', grid[5][7], false, player),\n    new Knight('wN', grid[6][7], false, player),\n    new Rook('wR', grid[7][7], false, player)\n  )\n}\n\nexport const assignBlackPieces = (grid: string[][], player: Player): void => {\n  for (let col of grid) {\n      player.alive.push(new Pawn('bP', col[1], false, player));\n  }\n  player.alive.push(\n      new Rook('bR', grid[0][0], false, player),\n      new Knight('bN', grid[1][0], false, player),\n      new Bishop('bB', grid[2][0], false, player),\n      new Queen('bQ', grid[3][0], false, player),\n      new King('bK', grid[4][0], false, player),\n      new Bishop('bB', grid[5][0], false, player),\n      new Knight('bN', grid[6][0], false, player),\n      new Rook('bR', grid[7][0], false, player)\n  );\n}\n\nexport const processMove = (start: string, end: string, gameState: object): boolean => {\n  let copy_state = {...gameState};\n  let adj_start = start[0] + ((parseInt(start[1]) - 1).toString());\n  let adj_end = end[0] + ((parseInt(end[1]) - 1).toString());\n  let start_col = gameState[adj_start][1];\n  let start_row = 7 - parseInt(adj_start[1]);\n\n  let piece = copy_state[adj_start][0];\n  let all_moves = [];\n  // find what piece we are moving\n  if (piece instanceof Pawn) {\n      all_moves = piece.validPawnMoves(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Knight) {\n      all_moves = piece.validKnightMoves(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Rook) {\n      all_moves = piece.get_all_straight(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Bishop) {\n      all_moves = piece.get_all_diagonal(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Queen) {\n      all_moves = piece.get_all_straight(grid, gameState, start_col, start_row)\n          .concat(piece.get_all_diagonal(grid, gameState, start_col, start_row));\n  } else if (piece instanceof King) {\n      all_moves = piece.valid_king_moves(grid, gameState, start_col, start_row);\n  }\n\n  if (all_moves.includes(adj_end)) {\n      // if the piece moving is taking an opponents piece\n      if (copy_state[adj_end][0] !== null) {\n          // update the alive and grave list for player losing a piece\n          if (this.p1.alive.includes(copy_state[adj_end][0])) {\n              this.p1.grave.push(copy_state[adj_end][0]);\n              this.p1.alive = this.p1.alive.filter(item => item !== copy_state[adj_end][0]);\n          } else {\n              this.p2.grave.push(copy_state[adj_end][0]);\n              this.p2.alive = this.p2.alive.filter(item => item !== copy_state[adj_end][0]);\n          }\n      }\n      // update the positions of the pieces on the board\n      this.gstate[adj_end][0] = copy_state[adj_start][0];\n      this.gstate[adj_start][0] = null;\n      this.gstate[adj_end][0].position = adj_end;\n      // update the position of the piece for the player who's color is the piece's color\n      if (this.p1 === this.gstate[adj_end][0].player) {\n          this.p1.alive.forEach((p) => {\n              if (p.position === adj_start) {\n                  p.position = adj_end;\n              }\n          });\n      } else {\n          this.p2.alive.forEach((p) => {\n              if (p.position === adj_start) {\n                  p.position = adj_end;\n              }\n          });\n      }\n  } else {\n      return false;\n  }\n  return true;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}