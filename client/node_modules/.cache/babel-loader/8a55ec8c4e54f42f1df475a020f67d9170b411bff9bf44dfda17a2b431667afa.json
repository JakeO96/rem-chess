{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/context/GameContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect, useContext } from 'react';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { Player, assignBlackPieces, assignWhitePieces } from '../utils/game-utils';\nimport { grid } from '../utils/game-utils';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext({\n  challenger: undefined,\n  opponent: undefined,\n  gameId: '',\n  gameState: undefined,\n  setGameId: () => {},\n  setChallenger: () => {},\n  setOpponent: () => {},\n  setGameState: () => {},\n  sendMessage: () => {},\n  // default function\n  lastMessage: null,\n  readyState: ReadyState.UNINSTANTIATED,\n  initiatePlayers: () => []\n});\nconst produceInitialGameState = () => {\n  let cordCount = 0;\n  const newGameState = {\n    board: {},\n    isWhiteTurn: true\n  };\n  for (const col of grid) {\n    for (const cord of col) {\n      newGameState.board[cord] = [null, cordCount];\n    }\n    cordCount += 1;\n  }\n  return newGameState;\n};\nexport const GameProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const initialState = produceInitialGameState();\n  const [challenger, setChallenger] = useState(undefined);\n  const [opponent, setOpponent] = useState(undefined);\n  const [gameId, setGameId] = useState('');\n  const [gameState, setGameState] = useState(initialState);\n  const {\n    isLoggedIn\n  } = useContext(AuthContext);\n  const [socketUrl, setSocketUrl] = useState('');\n  const initiatePlayers = (challengerUsername, opponentUsername) => {\n    let player1 = new Player(challengerUsername, '', [], []);\n    let player2 = new Player(opponentUsername, '', [], []);\n    const r = Math.floor(Math.random() * 2);\n    if (r === 0) {\n      player1.color = 'white';\n      player2.color = 'black';\n      assignWhitePieces(player1);\n      assignBlackPieces(player2);\n    } else {\n      player1.color = 'black';\n      player2.color = 'white';\n      assignWhitePieces(player2);\n      assignBlackPieces(player1);\n    }\n    return [player1, player2];\n  };\n  useEffect(() => {\n    if (isLoggedIn) {\n      setSocketUrl('ws://localhost:3001');\n    }\n  }, [isLoggedIn]);\n  const {\n    sendMessage,\n    lastMessage,\n    readyState\n  } = useWebSocket(socketUrl, {\n    onOpen: () => console.log('opened'),\n    shouldReconnect: closeEvent => true\n  }, socketUrl !== '');\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      challenger,\n      opponent,\n      gameId,\n      gameState,\n      setGameId,\n      setChallenger,\n      setOpponent,\n      setGameState,\n      sendMessage,\n      lastMessage,\n      readyState,\n      initiatePlayers\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(GameProvider, \"IjpCsYgcySQunm6QZ6TcWQ/xJhY=\", false, function () {\n  return [useWebSocket];\n});\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useContext","useWebSocket","ReadyState","Player","assignBlackPieces","assignWhitePieces","grid","AuthContext","jsxDEV","_jsxDEV","GameContext","challenger","undefined","opponent","gameId","gameState","setGameId","setChallenger","setOpponent","setGameState","sendMessage","lastMessage","readyState","UNINSTANTIATED","initiatePlayers","produceInitialGameState","cordCount","newGameState","board","isWhiteTurn","col","cord","GameProvider","_ref","_s","children","initialState","isLoggedIn","socketUrl","setSocketUrl","challengerUsername","opponentUsername","player1","player2","r","Math","floor","random","color","onOpen","console","log","shouldReconnect","closeEvent","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/context/GameContext.tsx"],"sourcesContent":["import { createContext, useState, ReactNode, useEffect, useContext, useCallback } from 'react';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { Player, assignBlackPieces, assignWhitePieces } from '../utils/game-utils';\nimport { Piece, grid } from '../utils/game-utils';\nimport { JsonObject, JsonPrimitive, JsonValue } from 'react-use-websocket/dist/lib/types';\nimport { AuthContext } from './AuthContext';\n\nexport interface StartGameMessageObject extends JsonObject {\n  type: string;\n  accepted?: boolean;\n  challenger: string;\n  opponent: string;\n  gameId?: string;\n}\n\nexport interface GameState {\n  board: {\n    [key: string]: [Piece | null, number];\n  };\n  isWhiteTurn: boolean;\n}\n\ntype GameContextType = {\n  challenger: Player | undefined;\n  opponent: Player | undefined;\n  gameId: string;\n  gameState: GameState | undefined;\n  setGameId: React.Dispatch<React.SetStateAction<string>>;\n  setChallenger: React.Dispatch<React.SetStateAction<Player | undefined>>;\n  setOpponent: React.Dispatch<React.SetStateAction<Player | undefined>>;\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>;\n  sendMessage: (message: string) => void;\n  lastMessage: MessageEvent<any> | null;\n  readyState: ReadyState;\n  initiatePlayers: (challengerUsername: string, opponentUsername: string) => Player[];\n};\n\nexport const GameContext = createContext<GameContextType>({\n  challenger: undefined,\n  opponent: undefined,\n  gameId: '',\n  gameState: undefined,\n  setGameId: () => { },\n  setChallenger: () => { },\n  setOpponent: () => { },\n  setGameState: () => { },\n  sendMessage: () => {},  // default function\n  lastMessage: null,\n  readyState: ReadyState.UNINSTANTIATED,\n  initiatePlayers: () => [],\n});\n\ntype GameProviderProps = {\n  children: ReactNode;\n};\n\nconst produceInitialGameState = () => {\n  let cordCount = 0;\n  const newGameState: GameState = {board: {}, isWhiteTurn: true};\n  for (const col of grid) {\n    for (const cord of col) {\n      newGameState.board[cord] = [null, cordCount];\n    }\n    cordCount += 1;\n  }\n  return newGameState;\n}\n\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\n  const initialState: GameState = produceInitialGameState();\n\n  const [challenger, setChallenger] = useState<Player | undefined>(undefined);\n  const [opponent, setOpponent] = useState<Player | undefined>(undefined);\n  const [gameId, setGameId] = useState<string>('');\n  const [gameState, setGameState] = useState<GameState>(initialState);\n  const { isLoggedIn } = useContext(AuthContext)\n  const [socketUrl, setSocketUrl] = useState<string>('');\n\n  const initiatePlayers = (challengerUsername: string, opponentUsername: string): Player[] =>  {\n    let player1 = new Player(challengerUsername, '', [], []);\n    let player2 = new Player(opponentUsername, '', [], []);\n    const r = Math.floor(Math.random() * 2);\n    if (r === 0) {\n      player1.color = 'white';\n      player2.color = 'black';\n      assignWhitePieces(player1);\n      assignBlackPieces(player2);\n    } else {\n      player1.color = 'black';\n      player2.color = 'white';\n      assignWhitePieces(player2);\n      assignBlackPieces(player1);\n    }\n    return [player1, player2];\n  }\n  \n  useEffect(() => {\n    if (isLoggedIn) {\n      setSocketUrl('ws://localhost:3001');\n    }\n  }, [isLoggedIn]);\n\n  const {\n    sendMessage,\n    lastMessage,\n    readyState\n  } = useWebSocket<StartGameMessageObject>(socketUrl, {\n    onOpen: () => console.log('opened'),\n    shouldReconnect: (closeEvent) => true,\n  }, socketUrl !== '');\n\n  return (\n    <GameContext.Provider value={{ challenger, opponent, gameId, gameState, setGameId, setChallenger, setOpponent, setGameState, sendMessage, lastMessage, readyState, initiatePlayers }}>\n      {children}\n    </GameContext.Provider>\n  );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}