{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/StartGamePortal.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback, useContext, useEffect, useState } from \"react\";\n//import { useNavigate } from 'react-router-dom'\n\n//import { AuthContext } from \"../context/AuthContext\";\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { Navigate } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport Cookies from \"js-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StartGamePortal = _ref => {\n  _s();\n  let {\n    expressApi\n  } = _ref;\n  console.log('StartGamePortal render');\n  const [navigateReady, setNavigateReady] = useState(false);\n  const [newGameId, setNewGameId] = useState('');\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:3001');\n  const {\n    username\n  } = useContext(AuthContext);\n  const {\n    sendMessage,\n    lastMessage,\n    readyState\n  } = useWebSocket(socketUrl, {\n    onOpen: () => console.log('opened'),\n    shouldReconnect: closeEvent => true\n  });\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated'\n  }[readyState];\n  useEffect(() => {\n    expressApi.getLoggedInUsers().then(res => res.json()).then(data => {\n      setUsers(data);\n      setIsLoading(false);\n    }).catch(err => {\n      console.error(err);\n      setIsLoading(false);\n    });\n  }, [expressApi]);\n  useEffect(() => {\n    function handleIncomingData(data) {\n      if (data.type === 'game-invite') {\n        const accepted = window.confirm(`You have been invited to a game by ${data.inviterUsername}. Do you accept?`);\n        const responseMessage = JSON.stringify({\n          type: 'game-invite-response',\n          accepted,\n          recievingUser: data.initiatingUser,\n          initiatingUser: data.recievingUser\n        });\n        sendMessage(responseMessage);\n      } else if (data.type === 'create-game') {\n        console.log(`vv data is in client gameportal if data type is ${data.type}`);\n        console.log(data);\n        expressApi.createGame(data, gameId => {\n          Cookies.set('activeGameId', gameId);\n          setNewGameId(gameId);\n          const responseMessage = JSON.stringify({\n            type: 'game-created',\n            recievingUser: data.initiatingUser,\n            initiatingUser: data.recievingUser\n          });\n          sendMessage(responseMessage);\n        });\n      } else if (data.type === 'start-game') {\n        if (!newGameId) {}\n        setNavigateReady(true);\n      } else if (data.type === 'game-decline') {\n        alert(`${data.initiatingUser} declined to start a game.`);\n      }\n    }\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [lastMessage, expressApi, sendMessage]);\n  const handleUsernameClick = useCallback(evt => {\n    const player2 = evt.currentTarget.dataset.username;\n    const message = JSON.stringify({\n      type: 'game-invite',\n      recievingUser: player2,\n      initiatingUser: username\n    });\n    sendMessage(message);\n  }, [sendMessage, username]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: navigateReady ? /*#__PURE__*/_jsxDEV(Navigate, {\n      to: `game/${newGameId}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this) : isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }, this) : users.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map((username, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: readyState !== ReadyState.OPEN,\n          \"data-username\": username,\n          onClick: handleUsernameClick,\n          children: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No users are currently logged in.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n};\n_s(StartGamePortal, \"ifM9HJ2TNwZgihatEveFFPCWjNc=\", false, function () {\n  return [useWebSocket];\n});\n_c = StartGamePortal;\nvar _c;\n$RefreshReg$(_c, \"StartGamePortal\");","map":{"version":3,"names":["useCallback","useContext","useEffect","useState","useWebSocket","ReadyState","Navigate","AuthContext","Cookies","jsxDEV","_jsxDEV","Fragment","_Fragment","StartGamePortal","_ref","_s","expressApi","console","log","navigateReady","setNavigateReady","newGameId","setNewGameId","users","setUsers","isLoading","setIsLoading","socketUrl","setSocketUrl","username","sendMessage","lastMessage","readyState","onOpen","shouldReconnect","closeEvent","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","getLoggedInUsers","then","res","json","data","catch","err","error","handleIncomingData","type","accepted","window","confirm","inviterUsername","responseMessage","JSON","stringify","recievingUser","initiatingUser","createGame","gameId","set","alert","Blob","reader","FileReader","onload","result","parse","readAsText","handleUsernameClick","evt","player2","currentTarget","dataset","message","children","to","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","disabled","onClick","_c","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/StartGamePortal.tsx"],"sourcesContent":["import { FC, useCallback, useContext, useEffect, useState } from \"react\"\n//import { useNavigate } from 'react-router-dom'\nimport ExpressAPI from \"../api/express-api\";\n//import { AuthContext } from \"../context/AuthContext\";\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { Navigate } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport Cookies from \"js-cookie\";\nimport { JsonObject, JsonValue } from \"react-use-websocket/dist/lib/types\";\n\ninterface StartGamePortalProps {\n  expressApi: ExpressAPI;\n}\n\ninterface StartGameMessageObject extends JsonObject {\n  type: string;\n  accepted?: boolean;\n  initiatingUser: string;\n  recievingUser: string;\n  gameId?: string;\n}\n\nexport const StartGamePortal: FC<StartGamePortalProps> = ({ expressApi }) => {\n  console.log('StartGamePortal render');\n\n  const [navigateReady, setNavigateReady] = useState<boolean>(false);\n  const [newGameId, setNewGameId] = useState<string>('');\n  const [users, setUsers] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:3001');\n  const { username } = useContext(AuthContext)\n  const { \n    sendMessage, \n    lastMessage,\n    readyState \n  } = useWebSocket<StartGameMessageObject>(socketUrl, { \n    onOpen: () => console.log('opened'), \n    shouldReconnect: (closeEvent) => true,\n  });\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n  }[readyState];\n\n  useEffect(() => {\n    expressApi.getLoggedInUsers()\n      .then((res) =>  res.json() )\n      .then((data) => {\n        setUsers(data);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        console.error(err);\n        setIsLoading(false);\n      });\n  }, [expressApi]);\n\n  useEffect(() => {\n    function handleIncomingData(data: StartGameMessageObject) {\n      if (data.type === 'game-invite') {\n        const accepted = window.confirm(`You have been invited to a game by ${data.inviterUsername}. Do you accept?`);\n        const responseMessage = JSON.stringify({ type: 'game-invite-response', accepted, recievingUser: data.initiatingUser, initiatingUser: data.recievingUser });\n        sendMessage(responseMessage);\n      } else if (data.type === 'create-game') {\n        console.log(`vv data is in client gameportal if data type is ${data.type}`)\n        console.log(data)\n        expressApi.createGame(data, ((gameId) => {\n          Cookies.set('activeGameId', gameId);\n          setNewGameId(gameId)\n          const responseMessage = JSON.stringify({ type: 'game-created', recievingUser: data.initiatingUser, initiatingUser: data.recievingUser})\n          sendMessage(responseMessage);\n        }))\n      } else if (data.type === 'start-game') {\n          if (!newGameId) {\n            \n          }\n          setNavigateReady(true);\n      } else if (data.type === 'game-decline') {\n        alert(`${data.initiatingUser} declined to start a game.`);\n      }\n    }\n\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [lastMessage, expressApi, sendMessage]);\n\n  const handleUsernameClick = useCallback((evt: React.MouseEvent<HTMLButtonElement>) => {\n    const player2 = evt.currentTarget.dataset.username;\n    const message = JSON.stringify({ type: 'game-invite', recievingUser: player2, initiatingUser: username });\n    sendMessage(message);\n  }, [sendMessage, username]);\n\n  return (\n    <>\n      {\n      navigateReady ? (\n        <Navigate to={`game/${newGameId}`} />\n      ) : isLoading ? (\n          <p>Loading...</p>\n        ) : users.length > 0 ? (\n          <ul>\n            {users.map((username, index) => (\n              <li key={index}>\n                <button \n                  disabled={readyState !== ReadyState.OPEN} \n                  data-username={username} \n                  onClick={handleUsernameClick}>\n                  {username}\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>No users are currently logged in.</p>\n        )\n      }\n    </>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}