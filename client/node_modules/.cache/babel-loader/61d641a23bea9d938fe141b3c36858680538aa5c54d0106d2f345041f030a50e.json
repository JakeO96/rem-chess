{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx\",\n  _s = $RefreshSig$();\nimport { Pawn, Rook, Knight, Bishop, Queen, King, assignBlackPieces, assignWhitePieces, grid } from '../utils/game-utils';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ActiveGame = () => {\n  _s();\n  const [gameState, setGameState] = useState({});\n  cons;\n  useEffect(() => {\n    produceEmptyBoard();\n    randomlyAssignWhite();\n    setPiecesOnBoard();\n  }, []);\n  const produceEmptyBoard = () => {\n    let cCnt = 0;\n    const newGameState = {};\n    for (const col of grid) {\n      for (const cord of col) {\n        newGameState[cord] = [null, cCnt];\n      }\n      cCnt += 1;\n    }\n    setGameState(newGameState);\n  };\n  const randomlyAssignWhite = () => {\n    const r = Math.floor(Math.random() * 2);\n    if (r === 0) {\n      assignWhitePieces(grid, player1);\n      player1.color = 'white';\n      assignBlackPieces(grid, player2);\n      player2.color = 'black';\n    } else {\n      assignWhitePieces(grid, player2);\n      player2.color = 'white';\n      assignBlackPieces(grid, player1);\n      player1.color = 'black';\n    }\n  };\n  const setPiecesOnBoard = () => {\n    const allPieces = player1.alive.concat(player2.alive);\n    const allPositions = allPieces.map(p => p.position);\n    const newGameState = {\n      ...gameState\n    };\n    for (const spot in newGameState) {\n      if (allPositions.includes(spot)) {\n        for (const p of allPieces) {\n          if (p.position === spot) {\n            newGameState[spot][0] = p;\n          }\n        }\n      }\n    }\n    setGameState(newGameState);\n  };\n  const process_move = (start, end) => {\n    let copy_state = {\n      ...gameState\n    };\n    let adj_start = start[0] + (parseInt(start[1]) - 1).toString();\n    let adj_end = end[0] + (parseInt(end[1]) - 1).toString();\n    let start_col = gameState[adj_start][1];\n    let start_row = 7 - parseInt(adj_start[1]);\n    let piece = copy_state[adj_start][0];\n    let all_moves = [];\n    // find what piece we are moving\n    if (piece instanceof Pawn) {\n      all_moves = piece.validPawnMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Knight) {\n      all_moves = piece.validKnightMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Rook) {\n      all_moves = piece.get_all_straight(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Bishop) {\n      all_moves = piece.get_all_diagonal(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Queen) {\n      all_moves = piece.get_all_straight(grid, gameState, start_col, start_row).concat(piece.get_all_diagonal(grid, gameState, start_col, start_row));\n    } else if (piece instanceof King) {\n      all_moves = piece.validKingMoves(grid, gameState, start_col, start_row);\n    }\n    if (all_moves.includes(adj_end)) {\n      // if the piece moving is taking an opponents piece\n      if (copy_state[adj_end][0] !== null) {\n        const piece = copy_state[adj_end][0];\n        // update the alive and grave list for player losing a piece\n        if (piece) {\n          if (player1.alive.includes(piece)) {\n            player1.grave.push(piece);\n            player1.alive = player1.alive.filter(item => item !== piece);\n          } else {\n            player2.grave.push(piece);\n            player2.alive = player2.alive.filter(item => item !== piece);\n          }\n        }\n      }\n\n      // update the positions of the pieces on the board\n      copy_state[adj_end][0] = copy_state[adj_start][0];\n      copy_state[adj_start][0] = null;\n      if (copy_state[adj_end][0] !== null) {\n        let piece = copy_state[adj_end][0];\n        if (piece) {\n          piece.position = adj_end;\n          if (player1 === piece.player) {\n            player1.alive.forEach(p => {\n              if (p.position === adj_start) {\n                p.position = adj_end;\n              }\n            });\n          } else {\n            player2.alive.forEach(p => {\n              if (p.position === adj_start) {\n                p.position = adj_end;\n              }\n            });\n          }\n        }\n      }\n      setGameState(copy_state);\n    } else {\n      return false;\n    }\n    return true;\n  };\n  const renderBoard = () => {\n    // This function should return JSX that represents the board.\n    // This implementation depends on how you want to render the board.\n    // For simplicity, let's assume we're returning an empty div.\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(ActiveGame, \"b1N0qf7c+YN/lg5dRubxKOxv8uY=\");\n_c = ActiveGame;\nvar _c;\n$RefreshReg$(_c, \"ActiveGame\");","map":{"version":3,"names":["Pawn","Rook","Knight","Bishop","Queen","King","assignBlackPieces","assignWhitePieces","grid","React","useState","useEffect","jsxDEV","_jsxDEV","ActiveGame","_s","gameState","setGameState","cons","produceEmptyBoard","randomlyAssignWhite","setPiecesOnBoard","cCnt","newGameState","col","cord","r","Math","floor","random","player1","color","player2","allPieces","alive","concat","allPositions","map","p","position","spot","includes","process_move","start","end","copy_state","adj_start","parseInt","toString","adj_end","start_col","start_row","piece","all_moves","validPawnMoves","validKnightMoves","get_all_straight","get_all_diagonal","validKingMoves","grave","push","filter","item","player","forEach","renderBoard","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx"],"sourcesContent":["import MainLayout from \"./MainLayout\"\nimport { Player, Piece, Pawn, Rook, Knight, Bishop, Queen, King, assignBlackPieces, assignWhitePieces, grid } from '../utils/game-utils'\nimport React, { useState, useEffect } from 'react';\n\ninterface GameState {\n  [key: string]: [Piece | null, number];\n}\n\nexport const ActiveGame: React.FC<ActiveGameProps> = () => {\n  const [gameState, setGameState] = useState<GameState>({});\n  cons\n  useEffect(() => {\n    produceEmptyBoard();\n    randomlyAssignWhite();\n    setPiecesOnBoard();\n  }, []);\n\n  const produceEmptyBoard = () => {\n    let cCnt = 0;\n    const newGameState: GameState = {};\n    for (const col of grid) {\n      for (const cord of col) {\n        newGameState[cord] = [null, cCnt];\n      }\n      cCnt += 1;\n    }\n    setGameState(newGameState);\n  }\n\n  const randomlyAssignWhite = () => {\n    const r = Math.floor(Math.random() * 2);\n    if (r === 0) {\n      assignWhitePieces(grid, player1);\n      player1.color = 'white';\n      assignBlackPieces(grid, player2);\n      player2.color = 'black';\n    } else {\n      assignWhitePieces(grid, player2);\n      player2.color = 'white';\n      assignBlackPieces(grid, player1);\n      player1.color = 'black';\n    }\n  }\n\n  const setPiecesOnBoard = () => {\n    const allPieces = player1.alive.concat(player2.alive);\n    const allPositions = allPieces.map(p => p.position);\n    const newGameState = {...gameState};\n    for (const spot in newGameState) {\n      if (allPositions.includes(spot)) {\n        for (const p of allPieces) {\n          if (p.position === spot) {\n            newGameState[spot][0] = p;\n          }\n        }\n      }\n    }\n    setGameState(newGameState);\n  }\n\n  const process_move = (start: string, end: string): boolean => {\n    let copy_state = {...gameState};\n    let adj_start = start[0] + ((parseInt(start[1]) - 1).toString());\n    let adj_end = end[0] + ((parseInt(end[1]) - 1).toString());\n    let start_col = gameState[adj_start][1];\n    let start_row = 7 - parseInt(adj_start[1]);\n\n    let piece = copy_state[adj_start][0];\n    let all_moves: string[] = [];\n    // find what piece we are moving\n    if (piece instanceof Pawn) {\n        all_moves = piece.validPawnMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Knight) {\n        all_moves = piece.validKnightMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Rook) {\n        all_moves = piece.get_all_straight(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Bishop) {\n        all_moves = piece.get_all_diagonal(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Queen) {\n        all_moves = piece.get_all_straight(grid, gameState, start_col, start_row)\n            .concat(piece.get_all_diagonal(grid, gameState, start_col, start_row));\n    } else if (piece instanceof King) {\n        all_moves = piece.validKingMoves(grid, gameState, start_col, start_row);\n    }\n\n    if (all_moves.includes(adj_end)) {\n      // if the piece moving is taking an opponents piece\n      if (copy_state[adj_end][0] !== null) {\n        const piece = copy_state[adj_end][0];\n        // update the alive and grave list for player losing a piece\n        if (piece) {\n          if (player1.alive.includes(piece)) {\n            player1.grave.push(piece);\n            player1.alive = player1.alive.filter(item => item !== piece);\n          } else {\n            player2.grave.push(piece);\n            player2.alive = player2.alive.filter(item => item !== piece);\n          }\n        }\n      }\n\n      // update the positions of the pieces on the board\n      copy_state[adj_end][0] = copy_state[adj_start][0];\n      copy_state[adj_start][0] = null;\n      if (copy_state[adj_end][0] !== null) {\n        let piece = copy_state[adj_end][0];\n        if (piece) {\n          piece.position = adj_end;\n          if (player1 === piece.player) {\n            player1.alive.forEach((p) => {\n                if (p.position === adj_start) {\n                    p.position = adj_end;\n                }\n            });\n          } else {\n            player2.alive.forEach((p) => {\n                if (p.position === adj_start) {\n                    p.position = adj_end;\n                }\n            });\n          }\n\n        }\n      }\n      setGameState(copy_state);\n    } else {\n        return false;\n    }\n    return true;\n  }\n\n  const renderBoard = (): JSX.Element => {\n    // This function should return JSX that represents the board.\n    // This implementation depends on how you want to render the board.\n    // For simplicity, let's assume we're returning an empty div.\n    return <div></div>;\n  }\n\n  return (\n    <div>\n      {renderBoard()}\n    </div>\n  );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}