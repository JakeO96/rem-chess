{"ast":null,"code":"'use strict';\n\nconst dotenv = require('dotenv');\nconst fs = require('fs');\nconst MissingEnvVarsError = require('./MissingEnvVarsError.js');\nfunction difference(arrA, arrB) {\n  return arrA.filter(a => arrB.indexOf(a) < 0);\n}\nfunction compact(obj) {\n  const result = {};\n  Object.keys(obj).forEach(key => {\n    if (obj[key]) {\n      result[key] = obj[key];\n    }\n  });\n  return result;\n}\nmodule.exports = {\n  config: function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const dotenvResult = dotenv.config(options);\n    const example = options.example || options.sample || '.env.example';\n    const allowEmptyValues = options.allowEmptyValues || false;\n    const processEnv = allowEmptyValues ? process.env : compact(process.env);\n    const exampleVars = dotenv.parse(fs.readFileSync(example));\n    const missing = difference(Object.keys(exampleVars), Object.keys(processEnv));\n    if (missing.length > 0) {\n      throw new MissingEnvVarsError(allowEmptyValues, options.path || '.env', example, missing, dotenvResult.error);\n    }\n\n    // Key/value pairs defined in example file and resolved from environment\n    const required = Object.keys(exampleVars).reduce((acc, key) => {\n      acc[key] = process.env[key];\n      return acc;\n    }, {});\n    const error = dotenvResult.error ? {\n      error: dotenvResult.error\n    } : {};\n    const result = {\n      parsed: dotenvResult.error ? {} : dotenvResult.parsed,\n      required: required\n    };\n    return Object.assign(result, error);\n  },\n  parse: dotenv.parse,\n  MissingEnvVarsError: MissingEnvVarsError\n};\nmodule.exports.MissingEnvVarsError = MissingEnvVarsError;","map":{"version":3,"names":["dotenv","require","fs","MissingEnvVarsError","difference","arrA","arrB","filter","a","indexOf","compact","obj","result","Object","keys","forEach","key","module","exports","config","options","arguments","length","undefined","dotenvResult","example","sample","allowEmptyValues","processEnv","process","env","exampleVars","parse","readFileSync","missing","path","error","required","reduce","acc","parsed","assign"],"sources":["/home/jake/rem-stack/chess/client/node_modules/dotenv-safe/index.js"],"sourcesContent":["'use strict';\n\nconst dotenv = require('dotenv');\nconst fs = require('fs');\nconst MissingEnvVarsError = require('./MissingEnvVarsError.js');\n\nfunction difference (arrA, arrB) {\n    return arrA.filter(a => arrB.indexOf(a) < 0);\n}\n\nfunction compact (obj) {\n    const result = {};\n    Object.keys(obj).forEach(key => {\n        if (obj[key]) {\n            result[key] = obj[key];\n        }\n    });\n    return result;\n}\n\nmodule.exports = {\n    config: function(options = {}) {\n        const dotenvResult = dotenv.config(options);\n        const example = options.example || options.sample || '.env.example';\n        const allowEmptyValues = options.allowEmptyValues || false;\n        const processEnv = allowEmptyValues ? process.env : compact(process.env);\n        const exampleVars = dotenv.parse(fs.readFileSync(example));\n        const missing = difference(Object.keys(exampleVars), Object.keys(processEnv));\n\n        if (missing.length > 0) {\n            throw new MissingEnvVarsError(allowEmptyValues, options.path || '.env', example, missing, dotenvResult.error);\n        }\n\n        // Key/value pairs defined in example file and resolved from environment\n        const required = Object.keys(exampleVars).reduce((acc, key) => {\n            acc[key] = process.env[key];\n            return acc;\n        }, {});\n        const error = dotenvResult.error ? { error: dotenvResult.error } : {};\n        const result = {\n            parsed: dotenvResult.error ? {} : dotenvResult.parsed,\n            required: required\n        };\n        return Object.assign(result, error);\n    },\n    parse: dotenv.parse,\n    MissingEnvVarsError: MissingEnvVarsError\n};\n\nmodule.exports.MissingEnvVarsError = MissingEnvVarsError;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB,MAAME,mBAAmB,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AAE/D,SAASG,UAAUA,CAAEC,IAAI,EAAEC,IAAI,EAAE;EAC7B,OAAOD,IAAI,CAACE,MAAM,CAACC,CAAC,IAAIF,IAAI,CAACG,OAAO,CAACD,CAAC,CAAC,GAAG,CAAC,CAAC;AAChD;AAEA,SAASE,OAAOA,CAAEC,GAAG,EAAE;EACnB,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjBC,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,CAACI,OAAO,CAACC,GAAG,IAAI;IAC5B,IAAIL,GAAG,CAACK,GAAG,CAAC,EAAE;MACVJ,MAAM,CAACI,GAAG,CAAC,GAAGL,GAAG,CAACK,GAAG,CAAC;IAC1B;EACJ,CAAC,CAAC;EACF,OAAOJ,MAAM;AACjB;AAEAK,MAAM,CAACC,OAAO,GAAG;EACbC,MAAM,EAAE,SAAAA,CAAA,EAAuB;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACzB,MAAMG,YAAY,GAAGxB,MAAM,CAACmB,MAAM,CAACC,OAAO,CAAC;IAC3C,MAAMK,OAAO,GAAGL,OAAO,CAACK,OAAO,IAAIL,OAAO,CAACM,MAAM,IAAI,cAAc;IACnE,MAAMC,gBAAgB,GAAGP,OAAO,CAACO,gBAAgB,IAAI,KAAK;IAC1D,MAAMC,UAAU,GAAGD,gBAAgB,GAAGE,OAAO,CAACC,GAAG,GAAGpB,OAAO,CAACmB,OAAO,CAACC,GAAG,CAAC;IACxE,MAAMC,WAAW,GAAG/B,MAAM,CAACgC,KAAK,CAAC9B,EAAE,CAAC+B,YAAY,CAACR,OAAO,CAAC,CAAC;IAC1D,MAAMS,OAAO,GAAG9B,UAAU,CAACS,MAAM,CAACC,IAAI,CAACiB,WAAW,CAAC,EAAElB,MAAM,CAACC,IAAI,CAACc,UAAU,CAAC,CAAC;IAE7E,IAAIM,OAAO,CAACZ,MAAM,GAAG,CAAC,EAAE;MACpB,MAAM,IAAInB,mBAAmB,CAACwB,gBAAgB,EAAEP,OAAO,CAACe,IAAI,IAAI,MAAM,EAAEV,OAAO,EAAES,OAAO,EAAEV,YAAY,CAACY,KAAK,CAAC;IACjH;;IAEA;IACA,MAAMC,QAAQ,GAAGxB,MAAM,CAACC,IAAI,CAACiB,WAAW,CAAC,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEvB,GAAG,KAAK;MAC3DuB,GAAG,CAACvB,GAAG,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACd,GAAG,CAAC;MAC3B,OAAOuB,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;IACN,MAAMH,KAAK,GAAGZ,YAAY,CAACY,KAAK,GAAG;MAAEA,KAAK,EAAEZ,YAAY,CAACY;IAAM,CAAC,GAAG,CAAC,CAAC;IACrE,MAAMxB,MAAM,GAAG;MACX4B,MAAM,EAAEhB,YAAY,CAACY,KAAK,GAAG,CAAC,CAAC,GAAGZ,YAAY,CAACgB,MAAM;MACrDH,QAAQ,EAAEA;IACd,CAAC;IACD,OAAOxB,MAAM,CAAC4B,MAAM,CAAC7B,MAAM,EAAEwB,KAAK,CAAC;EACvC,CAAC;EACDJ,KAAK,EAAEhC,MAAM,CAACgC,KAAK;EACnB7B,mBAAmB,EAAEA;AACzB,CAAC;AAEDc,MAAM,CAACC,OAAO,CAACf,mBAAmB,GAAGA,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}