{"ast":null,"code":"export const grid = [['A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1', 'A0'], ['B7', 'B6', 'B5', 'B4', 'B3', 'B2', 'B1', 'B0'], ['C7', 'C6', 'C5', 'C4', 'C3', 'C2', 'C1', 'C0'], ['D7', 'D6', 'D5', 'D4', 'D3', 'D2', 'D1', 'D0'], ['E7', 'E6', 'E5', 'E4', 'E3', 'E2', 'E1', 'E0'], ['F7', 'F6', 'F5', 'F4', 'F3', 'F2', 'F1', 'F0'], ['G7', 'G6', 'G5', 'G4', 'G3', 'G2', 'G1', 'G0'], ['H7', 'H6', 'H5', 'H4', 'H3', 'H2', 'H1', 'H0']];\nexport class Player {\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let alive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let grave = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    this.name = void 0;\n    this.color = void 0;\n    this.alive = void 0;\n    this.grave = void 0;\n    this.name = name;\n    this.color = color;\n    this.alive = alive;\n    this.grave = grave;\n  }\n}\nexport class Piece {\n  constructor(trackerTag, pieceName, position, moved, player, isWhite) {\n    this.trackerTag = trackerTag;\n    this.pieceName = pieceName;\n    this.position = position;\n    this.moved = moved;\n    this.player = player;\n    this.isWhite = isWhite;\n  }\n  get_all_diagonal(grid, state, col, row) {\n    let all_moves = [];\n    all_moves = all_moves.concat(this.recurse_diagonal(col + 1, 8, row + 1, grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col - 1, -1, row - 1, grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col + 1, 8, row - 1, grid, state, [], 'b-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col - 1, -1, row + 1, grid, state, [], 'b-slash'));\n    return all_moves;\n  }\n  get_all_straight(grid, state, col, row) {\n    let all_moves = [];\n    all_moves = all_moves.concat(this.recurse_straight(row + 1, 8, col, grid, state, [], 'vert'));\n    all_moves = all_moves.concat(this.recurse_straight(row - 1, -1, col, grid, state, [], 'vert'));\n    all_moves = all_moves.concat(this.recurse_straight(col + 1, 8, row, grid, state, [], 'hor'));\n    all_moves = all_moves.concat(this.recurse_straight(col - 1, -1, row, grid, state, [], 'hor'));\n    return all_moves;\n  }\n  recurse_straight(looper, end, anchor, grid, state, all_moves, axis) {\n    if (looper === end) {\n      return all_moves;\n    }\n    let spot = axis === 'vert' ? grid[anchor][looper] : grid[looper][anchor];\n    if (state[spot][0] === null) {\n      all_moves.push(spot);\n      if (end === 8) {\n        return this.recurse_straight(looper + 1, end, anchor, grid, state, all_moves, axis);\n      } else {\n        return this.recurse_straight(looper - 1, end, anchor, grid, state, all_moves, axis);\n      }\n    } else if (state[spot][0].player.color === this.player.color) {\n      return all_moves;\n    } else {\n      all_moves.push(spot);\n      return all_moves;\n    }\n  }\n  recurse_diagonal(col_rec, end, row_rec, grid, state, all_moves, axis) {\n    if (col_rec === 8 || col_rec === -1 || row_rec === 8 || row_rec === -1) {\n      return all_moves;\n    }\n    let spot = grid[col_rec][row_rec];\n    if (state[spot][0] === null) {\n      all_moves.push(spot);\n      if (axis === 'f-slash' && end === 8) {\n        return this.recurse_diagonal(col_rec + 1, end, row_rec + 1, grid, state, all_moves, axis);\n      } else if (axis === 'f-slash' && end !== 8) {\n        return this.recurse_diagonal(col_rec - 1, end, row_rec - 1, grid, state, all_moves, axis);\n      } else if (axis !== 'f-slash' && end === 8) {\n        return this.recurse_diagonal(col_rec + 1, end, row_rec - 1, grid, state, all_moves, axis);\n      } else {\n        return this.recurse_diagonal(col_rec - 1, end, row_rec + 1, grid, state, all_moves, axis);\n      }\n    } else if (state[spot][0].player.color === this.player.color) {\n      return all_moves;\n    } else {\n      all_moves.push(spot);\n      return all_moves;\n    }\n  }\n}\nexport class Pawn extends Piece {\n  validPawnMoves(grid, state, col, row) {\n    let all_moves = [];\n    if (state[grid[col][row - 1]][0] === null) {\n      all_moves.push(grid[col][row - 1]);\n    }\n    let attacks = [grid[col - 1][row - 1], grid[col + 1][row - 1]];\n    for (let d of attacks) {\n      if (state[d][0] === null) {\n        continue;\n      } else if (!this.player.alive.includes(state[d][0])) {\n        all_moves.push(d);\n      } else {\n        continue;\n      }\n    }\n    if (state[grid[col][row]].moved === 0) {\n      if (this.player.color === 'black') {\n        all_moves.push(grid[col][row - 2]);\n      } else {\n        all_moves.push(grid[col][row + 2]);\n      }\n    }\n    return all_moves;\n  }\n}\nexport class Rook extends Piece {}\nexport class Knight extends Piece {\n  validKnightMoves(grid, state, col, row) {\n    const allMoves = [];\n    const potentialMoves = [[col - 2, row - 1], [col - 2, row + 1], [col + 2, row - 1], [col + 2, row + 1], [col + 1, row + 2], [col - 1, row + 2], [col + 1, row - 2], [col - 1, row - 2]];\n    for (const move of potentialMoves) {\n      var _this$player;\n      if (move[0] < 0 || move[0] > 7 || move[1] < 0 || move[1] > 7) {\n        continue;\n      }\n      const spot = grid[move[0]][move[1]];\n      if (state[spot][0] === null || state[spot][0].player.color !== ((_this$player = this.player) === null || _this$player === void 0 ? void 0 : _this$player.color)) {\n        allMoves.push(spot);\n      }\n    }\n    return allMoves;\n  }\n}\nexport class Bishop extends Piece {}\nexport class Queen extends Piece {}\nexport class King extends Piece {\n  validKingMoves(grid, state, col, row) {\n    const cords = [[col, row + 1], [col - 1, row + 1], [col + 1, row + 1], [col, row - 1], [col - 1, row - 1], [col + 1, row - 1], [col + 1, row], [col - 1, row]];\n    const allMoves = [];\n    for (const c of cords) {\n      if (c[0] === 8 || c[0] === -1 || c[1] === 8 || c[1] === -1) {\n        continue;\n      } else {\n        var _this$player2;\n        const spot = grid[c[0]][c[1]];\n        if (state[spot][0] === null) {\n          allMoves.push(spot);\n        } else if (state[spot][0].player.color === ((_this$player2 = this.player) === null || _this$player2 === void 0 ? void 0 : _this$player2.color)) {\n          continue;\n        } else {\n          allMoves.push(spot);\n        }\n      }\n    }\n    return allMoves;\n  }\n}\nexport const assignWhitePieces = (grid, player) => {\n  for (let col of grid) {\n    player.alive.push(new Pawn('wP', 'whitePawn', col[6], false, player, true));\n  }\n  player.alive.push(new Rook('wR', 'whiteRook', grid[0][7], false, player, true), new Knight('wN', 'whiteKnight', grid[1][7], false, player, true), new Bishop('wB', 'whiteBishop', grid[2][7], false, player, true), new Queen('wQ', 'whiteQueen', grid[3][7], false, player, true), new King('wK', 'whiteKing', grid[4][7], false, player, true), new Bishop('wB', 'whiteBishop', grid[5][7], false, player, true), new Knight('wN', 'whiteKnight', grid[6][7], false, player, true), new Rook('wR', 'whiteRook', grid[7][7], false, player, true));\n};\nexport const assignBlackPieces = (grid, player) => {\n  for (let col of grid) {\n    player.alive.push(new Pawn('bP', 'blackPawn', col[1], false, player, false));\n  }\n  player.alive.push(new Rook('bR', 'blackRook', grid[0][0], false, player, false), new Knight('bN', 'blackKnight', grid[1][0], false, player, false), new Bishop('bB', 'blackBishop', grid[2][0], false, player, false), new Queen('bQ', 'blackQueen', grid[3][0], false, player, false), new King('bK', 'blackKing', grid[4][0], false, player, false), new Bishop('bB', 'blackBishop', grid[5][0], false, player, false), new Knight('bN', 'blackKnight', grid[6][0], false, player, false), new Rook('bR', 'blackRook', grid[7][0], false, player, false));\n};\nexport const process_move = (start, end, gameState, player1, player2) => {\n  let copy_state = {\n    ...gameState\n  };\n  let adj_start = start[0] + start[1];\n  console.log(`adjusted start: ${adj_start}`);\n  let adj_end = end[0] + end[1];\n  console.log(`adjusted start: ${adj_end}`);\n  let start_col = gameState[adj_start][1];\n  console.log(`start column: ${start_col}`);\n  let start_row = 7 - parseInt(adj_start[1]);\n  console.log(`start row: ${start_row}`);\n  let piece = copy_state[adj_start][0];\n  console.log('piece VVVV');\n  console.log(piece);\n  let all_moves = [];\n  // find what piece we are moving\n  if (piece instanceof Pawn) {\n    all_moves = piece.validPawnMoves(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Knight) {\n    all_moves = piece.validKnightMoves(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Rook) {\n    all_moves = piece.get_all_straight(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Bishop) {\n    all_moves = piece.get_all_diagonal(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Queen) {\n    all_moves = piece.get_all_straight(grid, gameState, start_col, start_row).concat(piece.get_all_diagonal(grid, gameState, start_col, start_row));\n  } else if (piece instanceof King) {\n    all_moves = piece.validKingMoves(grid, gameState, start_col, start_row);\n  }\n  console.log('all moves after checking vvvv');\n  console.log(all_moves);\n  if (all_moves.includes(adj_end)) {\n    // if the piece moving is taking an opponents piece\n    if (copy_state[adj_end][0] !== null) {\n      const piece = copy_state[adj_end][0];\n      // update the alive and grave list for player losing a piece\n      if (piece && player1 && player2) {\n        if (player1.alive.includes(piece)) {\n          player1.grave.push(piece);\n          player1.alive = player1.alive.filter(item => item !== piece);\n        } else {\n          player2.grave.push(piece);\n          player2.alive = player2.alive.filter(item => item !== piece);\n        }\n      }\n    }\n\n    // update the positions of the pieces on the board\n    copy_state[adj_end][0] = copy_state[adj_start][0];\n    copy_state[adj_start][0] = null;\n    if (copy_state[adj_end][0] !== null) {\n      let piece = copy_state[adj_end][0];\n      if (piece) {\n        piece.position = adj_end;\n        if (player1 === piece.player) {\n          player1.alive.forEach(p => {\n            if (p.position === adj_start) {\n              p.position = adj_end;\n            }\n          });\n        } else {\n          if (player2) {\n            player2.alive.forEach(p => {\n              if (p.position === adj_start) {\n                p.position = adj_end;\n              }\n            });\n          }\n        }\n      }\n    }\n  } else {\n    return {\n      isValid: false,\n      newState: copy_state,\n      player1: player1,\n      player2: player2\n    };\n  }\n  return {\n    isValid: true,\n    newState: copy_state,\n    player1: player1,\n    player2: player2\n  };\n};","map":{"version":3,"names":["grid","Player","constructor","name","arguments","length","undefined","color","alive","grave","Piece","trackerTag","pieceName","position","moved","player","isWhite","get_all_diagonal","state","col","row","all_moves","concat","recurse_diagonal","get_all_straight","recurse_straight","looper","end","anchor","axis","spot","push","col_rec","row_rec","Pawn","validPawnMoves","attacks","d","includes","Rook","Knight","validKnightMoves","allMoves","potentialMoves","move","_this$player","Bishop","Queen","King","validKingMoves","cords","c","_this$player2","assignWhitePieces","assignBlackPieces","process_move","start","gameState","player1","player2","copy_state","adj_start","console","log","adj_end","start_col","start_row","parseInt","piece","filter","item","forEach","p","isValid","newState"],"sources":["/home/jake/rem-stack/chess/client/src/utils/game-utils.ts"],"sourcesContent":["interface GameState {\n  [key: string]: [Piece | null, number];\n}\n\nexport interface Player {\n  name: string;\n  color: string;\n  alive: Piece[];\n  grace: Piece[];\n}\n\ninterface MoveResult {\n  isValid: boolean;\n  newState: GameState;\n  player1: Player;\n  player2: Player;\n}\n\nexport const grid: string[][] = [\n  ['A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1', 'A0'],\n  ['B7', 'B6', 'B5', 'B4', 'B3', 'B2', 'B1', 'B0'],\n  ['C7', 'C6', 'C5', 'C4', 'C3', 'C2', 'C1', 'C0'],\n  ['D7', 'D6', 'D5', 'D4', 'D3', 'D2', 'D1', 'D0'],\n  ['E7', 'E6', 'E5', 'E4', 'E3', 'E2', 'E1', 'E0'],\n  ['F7', 'F6', 'F5', 'F4', 'F3', 'F2', 'F1', 'F0'],\n  ['G7', 'G6', 'G5', 'G4', 'G3', 'G2', 'G1', 'G0'],\n  ['H7', 'H6', 'H5', 'H4', 'H3', 'H2', 'H1', 'H0']\n];\n\nexport class Player {\n  name: string;\n  color: string;\n  alive: Piece[];\n  grave: Piece[];\n\n  constructor(name: string = '', color: string = '', alive: Piece[] = [], grave: Piece[] = []) {\n    this.name = name;\n    this.color = color;\n    this.alive = alive;\n    this.grave = grave;\n  }\n}\n\nexport abstract class Piece {\n  constructor(\n    public trackerTag: string,\n    public pieceName: string,\n    public position: string,\n    public moved: boolean,\n    public player: Player,\n    public isWhite: boolean,\n  ) { }\n\n  get_all_diagonal(grid: string[][], state: any, col: number, row: number): string[] {\n    let all_moves: string[] = [];\n    all_moves = all_moves.concat(this.recurse_diagonal((col + 1), 8, (row + 1), grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col - 1), (-1), (row - 1), grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col + 1), 8, (row - 1), grid, state, [], 'b-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col - 1), (-1), (row + 1), grid, state, [], 'b-slash'));\n    return all_moves;\n  }\n\n  get_all_straight(grid: string[][], state: any, col: number, row: number): string[] {\n    let all_moves: string[] = [];\n    all_moves = all_moves.concat(this.recurse_straight((row + 1), 8, col, grid, state, [], 'vert'));\n    all_moves = all_moves.concat(this.recurse_straight((row - 1), -1, col, grid, state, [], 'vert'));\n    all_moves = all_moves.concat(this.recurse_straight((col + 1), 8, row, grid, state, [], 'hor'));\n    all_moves = all_moves.concat(this.recurse_straight((col - 1), -1, row, grid, state, [], 'hor'));\n    return all_moves;\n}\n\n  recurse_straight(looper: number, end: number, anchor: number, grid: string[][], state: any, all_moves: string[], axis: string): string[] {\n    if (looper === end) {\n        return all_moves;\n    }\n    let spot: string = axis === 'vert' ? grid[anchor][looper] : grid[looper][anchor];\n    if (state[spot][0] === null) {\n        all_moves.push(spot);\n        if (end === 8) {\n            return this.recurse_straight((looper + 1), end, anchor, grid, state, all_moves, axis);\n        } else {\n            return this.recurse_straight((looper - 1), end, anchor, grid, state, all_moves, axis);\n        }\n    } else if (state[spot][0].player.color === this.player.color) {\n        return all_moves;\n    } else {\n        all_moves.push(spot);\n        return all_moves;\n    }\n  }\n\n  recurse_diagonal(col_rec: number, end: number, row_rec: number, grid: string[][], state: any, all_moves: string[], axis: string): string[] {\n    if (col_rec === 8 || col_rec === (-1) || row_rec === 8 || row_rec === (-1)) {\n        return all_moves;\n    }\n    let spot: string = grid[col_rec][row_rec];\n    if (state[spot][0] === null) {\n        all_moves.push(spot);\n        if (axis === 'f-slash' && end === 8) {\n            return this.recurse_diagonal((col_rec + 1), end, (row_rec + 1), grid, state, all_moves, axis);\n        } else if (axis === 'f-slash' && end !== 8) {\n            return this.recurse_diagonal((col_rec - 1), end, (row_rec - 1), grid, state, all_moves, axis);\n        } else if (axis !== 'f-slash' && end === 8) {\n            return this.recurse_diagonal((col_rec + 1), end, (row_rec - 1), grid, state, all_moves, axis);\n        } else {\n            return this.recurse_diagonal((col_rec - 1), end, (row_rec + 1), grid, state, all_moves, axis);\n        }\n    } else if (state[spot][0].player.color === this.player.color) {\n        return all_moves;\n    } else {\n        all_moves.push(spot);\n        return all_moves;\n    }\n  }\n}\n\nexport class Pawn extends Piece {\n  validPawnMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    let all_moves: string[] = [];\n    if (state[grid[col][row - 1]][0] === null) {\n        all_moves.push(grid[col][row - 1]);\n    }\n\n    let attacks: string[] = [grid[(col - 1)][(row - 1)], grid[(col + 1)][(row - 1)]];\n    for (let d of attacks) {\n        if (state[d][0] === null) {\n            continue;\n        } else if (!this.player.alive.includes(state[d][0])) {\n            all_moves.push(d);\n        } else {\n            continue;\n        }\n    }\n\n    if (state[grid[col][row]].moved === 0) {\n        if (this.player.color === 'black') {\n            all_moves.push(grid[col][(row - 2)]);\n        } else {\n            all_moves.push(grid[col][(row + 2)]);\n        }\n    }\n    return all_moves;\n}\n}\n\nexport class Rook extends Piece {}\n\nexport class Knight extends Piece {\n  validKnightMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    const allMoves: string[] = [];\n    \n    const potentialMoves: [number, number][] = [\n      [col - 2, row - 1], [col - 2, row + 1],\n      [col + 2, row - 1], [col + 2, row + 1],\n      [col + 1, row + 2], [col - 1, row + 2],\n      [col + 1, row - 2], [col - 1, row - 2]\n    ];\n\n    for (const move of potentialMoves) {\n      if (move[0] < 0 || move[0] > 7 || move[1] < 0 || move[1] > 7) {\n        continue;\n      }\n\n      const spot = grid[move[0]][move[1]];\n      if (state[spot][0] === null || state[spot][0].player.color !== this.player?.color) {\n        allMoves.push(spot);\n      }\n    }\n\n    return allMoves;\n  }\n}\n\nexport class Bishop extends Piece {\n}\n\nexport class Queen extends Piece {}\n\nexport class King extends Piece {\n  validKingMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    const cords = [\n      [col, (row + 1)],\n      [(col - 1), (row + 1)],\n      [(col + 1), (row + 1)],\n      [col, (row - 1)],\n      [(col - 1), (row - 1)],\n      [(col + 1), (row - 1)],\n      [(col + 1), row],\n      [(col - 1), row]\n    ];\n\n    const allMoves: string[] = [];\n    for (const c of cords) {\n      if (c[0] === 8 || c[0] === -1 || c[1] === 8 || c[1] === -1) {\n        continue;\n      } else {\n        const spot = grid[c[0]][c[1]];\n        if (state[spot][0] === null) {\n          allMoves.push(spot);\n        } else if (state[spot][0].player.color === this.player?.color) {\n          continue;\n        } else {\n          allMoves.push(spot);\n        }\n      }\n    }\n\n    return allMoves;\n  }\n}\n\nexport const assignWhitePieces = (grid: string[][], player: Player): void => {\n  for (let col of grid) {\n    player.alive.push(new Pawn('wP', 'whitePawn', col[6], false, player, true));\n  }\n  player.alive.push(\n    new Rook('wR', 'whiteRook', grid[0][7], false, player, true),\n    new Knight('wN', 'whiteKnight', grid[1][7], false, player, true),\n    new Bishop('wB', 'whiteBishop', grid[2][7], false, player, true),\n    new Queen('wQ', 'whiteQueen', grid[3][7], false, player, true),\n    new King('wK', 'whiteKing', grid[4][7], false, player, true),\n    new Bishop('wB', 'whiteBishop', grid[5][7], false, player, true),\n    new Knight('wN', 'whiteKnight', grid[6][7], false, player, true),\n    new Rook('wR', 'whiteRook', grid[7][7], false, player, true)\n  )\n}\n\nexport const assignBlackPieces = (grid: string[][], player: Player): void => {\n  for (let col of grid) {\n      player.alive.push(new Pawn('bP', 'blackPawn', col[1], false, player, false));\n  }\n  player.alive.push(\n      new Rook('bR', 'blackRook', grid[0][0], false, player, false),\n      new Knight('bN', 'blackKnight', grid[1][0], false, player, false),\n      new Bishop('bB', 'blackBishop', grid[2][0], false, player, false),\n      new Queen('bQ', 'blackQueen', grid[3][0], false, player, false),\n      new King('bK', 'blackKing', grid[4][0], false, player, false),\n      new Bishop('bB', 'blackBishop', grid[5][0], false, player, false),\n      new Knight('bN', 'blackKnight', grid[6][0], false, player, false),\n      new Rook('bR', 'blackRook', grid[7][0], false, player, false)\n  );\n}\n\nexport const process_move = (start: string, end: string, gameState: GameState, player1: Player, player2: Player): MoveResult => {\n  let copy_state = {...gameState};\n  let adj_start = start[0] + start[1];\n  console.log(`adjusted start: ${adj_start}`)\n  let adj_end = end[0] + end[1];\n  console.log(`adjusted start: ${adj_end}`)\n  let start_col = gameState[adj_start][1];\n  console.log(`start column: ${start_col}`)\n  let start_row = 7 - parseInt(adj_start[1]);\n  console.log(`start row: ${start_row}`)\n\n  let piece = copy_state[adj_start][0];\n  console.log('piece VVVV');\n  console.log(piece)\n  let all_moves: string[] = [];\n  // find what piece we are moving\n  if (piece instanceof Pawn) {\n      all_moves = piece.validPawnMoves(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Knight) {\n      all_moves = piece.validKnightMoves(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Rook) {\n      all_moves = piece.get_all_straight(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Bishop) {\n      all_moves = piece.get_all_diagonal(grid, gameState, start_col, start_row);\n  } else if (piece instanceof Queen) {\n      all_moves = piece.get_all_straight(grid, gameState, start_col, start_row)\n          .concat(piece.get_all_diagonal(grid, gameState, start_col, start_row));\n  } else if (piece instanceof King) {\n      all_moves = piece.validKingMoves(grid, gameState, start_col, start_row);\n  }\n\n  console.log('all moves after checking vvvv')\n  console.log(all_moves)\n\n  if (all_moves.includes(adj_end)) {\n    // if the piece moving is taking an opponents piece\n    if (copy_state[adj_end][0] !== null) {\n      const piece = copy_state[adj_end][0];\n      // update the alive and grave list for player losing a piece\n      if (piece && player1 && player2) {\n        if (player1.alive.includes(piece)) {\n          player1.grave.push(piece);\n          player1.alive = player1.alive.filter(item => item !== piece);\n        } else {\n          player2.grave.push(piece);\n          player2.alive = player2.alive.filter(item => item !== piece);\n        }\n      }\n    }\n\n    // update the positions of the pieces on the board\n    copy_state[adj_end][0] = copy_state[adj_start][0];\n    copy_state[adj_start][0] = null;\n    if (copy_state[adj_end][0] !== null) {\n      let piece = copy_state[adj_end][0];\n      if (piece) {\n        piece.position = adj_end;\n        if (player1 === piece.player) {\n          player1.alive.forEach((p) => {\n              if (p.position === adj_start) {\n                  p.position = adj_end;\n              }\n          });\n        } else {\n          if (player2) {\n            player2.alive.forEach((p) => {\n              if (p.position === adj_start) {\n                  p.position = adj_end;\n              }\n          });\n          }\n        }\n      }\n    }\n  } else {\n      return { isValid: false, newState: copy_state, player1: player1, player2: player2 };\n  }\n  return { isValid: true, newState: copy_state, player1: player1, player2: player2 };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}