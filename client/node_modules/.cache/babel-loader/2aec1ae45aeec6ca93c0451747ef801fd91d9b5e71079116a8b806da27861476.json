{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/ProtectedRoute.tsx\",\n  _s = $RefreshSig$();\n// ProtectedRoute.tsx\nimport React, { useContext } from 'react';\nimport { Route, Navigate } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext'; // import your AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProtectedRoute = _ref => {\n  _s();\n  let {\n    authenticationPath\n  } = _ref;\n  const {\n    isLoggedIn\n  } = useContext(AuthContext); // use the useContext hook to get the isLoggedIn value\n\n  let redirectPath = '';\n  if (!isLoggedIn) {\n    redirectPath = authenticationPath;\n  }\n  if (redirectPath) {\n    const renderComponent = () => /*#__PURE__*/_jsxDEV(Navigate, {\n      to: {\n        pathname: redirectPath\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 39\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Route, {\n      element: renderComponent,\n      render: undefined\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Route, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  }\n};\n_s(ProtectedRoute, \"k0eKnAnvTWhpQrZ9lRleN6NVN6Y=\");\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useContext","Route","Navigate","AuthContext","jsxDEV","_jsxDEV","ProtectedRoute","_ref","_s","authenticationPath","isLoggedIn","redirectPath","renderComponent","to","pathname","fileName","_jsxFileName","lineNumber","columnNumber","element","render","undefined","_c","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/ProtectedRoute.tsx"],"sourcesContent":["// ProtectedRoute.tsx\nimport React, { useContext } from 'react';\nimport { Route, Navigate, RouteProps } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext'; // import your AuthContext\n\ninterface ProtectedRouteProps extends RouteProps {\n    authenticationPath: string;\n}\n\nexport const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ authenticationPath }) => {\n    const { isLoggedIn } = useContext(AuthContext); // use the useContext hook to get the isLoggedIn value\n\n    let redirectPath = '';\n    if (!isLoggedIn) {\n        redirectPath = authenticationPath;\n    }\n\n    if (redirectPath) {\n        const renderComponent = () => <Navigate to={{ pathname: redirectPath }} />;\n        return <Route element={renderComponent} render={undefined} />;\n    } else {\n        return <Route />;\n    }\n};"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,KAAK,EAAEC,QAAQ,QAAoB,kBAAkB;AAC9D,SAASC,WAAW,QAAQ,wBAAwB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMtD,OAAO,MAAMC,cAA6C,GAAGC,IAAA,IAA4B;EAAAC,EAAA;EAAA,IAA3B;IAAEC;EAAmB,CAAC,GAAAF,IAAA;EAChF,MAAM;IAAEG;EAAW,CAAC,GAAGV,UAAU,CAACG,WAAW,CAAC,CAAC,CAAC;;EAEhD,IAAIQ,YAAY,GAAG,EAAE;EACrB,IAAI,CAACD,UAAU,EAAE;IACbC,YAAY,GAAGF,kBAAkB;EACrC;EAEA,IAAIE,YAAY,EAAE;IACd,MAAMC,eAAe,GAAGA,CAAA,kBAAMP,OAAA,CAACH,QAAQ;MAACW,EAAE,EAAE;QAAEC,QAAQ,EAAEH;MAAa;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAC1E,oBAAOb,OAAA,CAACJ,KAAK;MAACkB,OAAO,EAAEP,eAAgB;MAACQ,MAAM,EAAEC;IAAU;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjE,CAAC,MAAM;IACH,oBAAOb,OAAA,CAACJ,KAAK;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpB;AACJ,CAAC;AAACV,EAAA,CAdWF,cAA6C;AAAAgB,EAAA,GAA7ChB,cAA6C;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}