{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/StartGamePortal.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { Navigate } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { GameContext } from \"../context/GameContext\";\nimport { Player, assignBlackPieces, assignWhitePieces, grid } from \"../utils/game-utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StartGamePortal = _ref => {\n  _s();\n  let {\n    expressApi\n  } = _ref;\n  console.log('StartGamePortal render');\n  const [navigateReady, setNavigateReady] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:3001');\n  const {\n    username\n  } = useContext(AuthContext);\n  const {\n    gameId,\n    setGameId,\n    setInitiatingUser,\n    setReceivingUser\n  } = useContext(GameContext);\n  const {\n    sendMessage,\n    lastMessage,\n    readyState\n  } = useWebSocket(socketUrl, {\n    onOpen: () => console.log('opened'),\n    shouldReconnect: closeEvent => true\n  });\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated'\n  }[readyState];\n  useEffect(() => {\n    expressApi.getLoggedInUsers().then(res => res.json()).then(data => {\n      setUsers(data);\n      setIsLoading(false);\n    }).catch(err => {\n      console.error(err);\n      setIsLoading(false);\n    });\n  }, [expressApi]);\n  useEffect(() => {\n    function randomlyAssignWhite() {\n      let player1 = new Player('', '', [], []);\n      let player2 = new Player('', '', [], []);\n      const r = Math.floor(Math.random() * 2);\n      if (r === 0) {\n        assignWhitePieces(grid, player1);\n        player1.color = 'white';\n        assignBlackPieces(grid, player2);\n        player2.color = 'black';\n      } else {\n        assignWhitePieces(grid, player2);\n        player2.color = 'white';\n        assignBlackPieces(grid, player1);\n        player1.color = 'black';\n      }\n      return [player1, player2];\n    }\n    function handleIncomingData(data) {\n      if (data.type === 'game-invite') {\n        const accepted = window.confirm(`You have been invited to a game by ${data.inviterUsername}. Do you accept?`);\n        const responseMessage = JSON.stringify({\n          type: 'game-invite-response',\n          accepted,\n          recievingUser: data.initiatingUser,\n          initiatingUser: data.recievingUser\n        });\n        sendMessage(responseMessage);\n      } else if (data.type === 'create-game') {\n        expressApi.createGame(data, gameId => {\n          const responseMessage = JSON.stringify({\n            type: 'game-created',\n            recievingUser: data.initiatingUser,\n            initiatingUser: data.recievingUser,\n            gameId: gameId\n          });\n          sendMessage(responseMessage);\n        });\n      } else if (data.type === 'start-game') {\n        let [player1, player2] = randomlyAssignWhite();\n        player1.name = data.initiatingUser;\n        player2.name = data.initiatingUser;\n        if (data.gameId) {\n          setGameId(data.gameId);\n        }\n        setInitiatingUser(player1);\n        setReceivingUser(player2);\n        setNavigateReady(true);\n      } else if (data.type === 'game-decline') {\n        alert(`${data.initiatingUser} declined to start a game.`);\n      }\n    }\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [lastMessage, expressApi, sendMessage, setGameId, setInitiatingUser, setReceivingUser]);\n  const handleUsernameClick = useCallback(evt => {\n    const player2 = evt.currentTarget.dataset.username;\n    const message = JSON.stringify({\n      type: 'game-invite',\n      recievingUser: player2,\n      initiatingUser: username\n    });\n    sendMessage(message);\n  }, [sendMessage, username]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: navigateReady ? /*#__PURE__*/_jsxDEV(Navigate, {\n      to: `/game/${gameId}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this) : isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }, this) : users.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map((username, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: readyState !== ReadyState.OPEN,\n          \"data-username\": username,\n          onClick: handleUsernameClick,\n          children: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No users are currently logged in.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n};\n_s(StartGamePortal, \"NkfhFg+Rmp9aR3VJInNxi+6a/H0=\", false, function () {\n  return [useWebSocket];\n});\n_c = StartGamePortal;\nvar _c;\n$RefreshReg$(_c, \"StartGamePortal\");","map":{"version":3,"names":["useCallback","useContext","useEffect","useState","useWebSocket","ReadyState","Navigate","AuthContext","GameContext","Player","assignBlackPieces","assignWhitePieces","grid","jsxDEV","_jsxDEV","Fragment","_Fragment","StartGamePortal","_ref","_s","expressApi","console","log","navigateReady","setNavigateReady","users","setUsers","isLoading","setIsLoading","socketUrl","setSocketUrl","username","gameId","setGameId","setInitiatingUser","setReceivingUser","sendMessage","lastMessage","readyState","onOpen","shouldReconnect","closeEvent","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","getLoggedInUsers","then","res","json","data","catch","err","error","randomlyAssignWhite","player1","player2","r","Math","floor","random","color","handleIncomingData","type","accepted","window","confirm","inviterUsername","responseMessage","JSON","stringify","recievingUser","initiatingUser","createGame","name","alert","Blob","reader","FileReader","onload","result","parse","readAsText","handleUsernameClick","evt","currentTarget","dataset","message","children","to","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","disabled","onClick","_c","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/StartGamePortal.tsx"],"sourcesContent":["import { FC, useCallback, useContext, useEffect, useState } from \"react\"\nimport ExpressAPI from \"../api/express-api\";\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { Navigate } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { JsonObject } from \"react-use-websocket/dist/lib/types\";\nimport { GameContext } from \"../context/GameContext\";\nimport { Player, assignBlackPieces, assignWhitePieces, grid } from \"../utils/game-utils\";\n\ninterface StartGamePortalProps {\n  expressApi: ExpressAPI;\n}\n\ninterface StartGameMessageObject extends JsonObject {\n  type: string;\n  accepted?: boolean;\n  initiatingUser: string;\n  recievingUser: string;\n  gameId?: string;\n}\n\nexport const StartGamePortal: FC<StartGamePortalProps> = ({ expressApi }) => {\n  console.log('StartGamePortal render');\n\n  const [navigateReady, setNavigateReady] = useState<boolean>(false);\n  const [users, setUsers] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:3001');\n  const { username } = useContext(AuthContext)\n  const { gameId, setGameId, setInitiatingUser, setReceivingUser } = useContext(GameContext)\n  const { \n    sendMessage, \n    lastMessage,\n    readyState \n  } = useWebSocket<StartGameMessageObject>(socketUrl, { \n    onOpen: () => console.log('opened'), \n    shouldReconnect: (closeEvent) => true,\n  });\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n  }[readyState];\n\n  useEffect(() => {\n    expressApi.getLoggedInUsers()\n      .then((res) =>  res.json() )\n      .then((data) => {\n        setUsers(data);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        console.error(err);\n        setIsLoading(false);\n      });\n  }, [expressApi]);\n\n  useEffect(() => {\n    function randomlyAssignWhite() {\n      let player1 = new Player('', '', [], []);\n      let player2 = new Player('', '', [], []);\n      const r = Math.floor(Math.random() * 2);\n      if (r === 0) {\n        assignWhitePieces(grid, player1);\n          player1.color = 'white';\n          assignBlackPieces(grid, player2);\n          player2.color = 'black';\n        } else {\n          assignWhitePieces(grid, player2);\n          player2.color = 'white';\n          assignBlackPieces(grid, player1);\n          player1.color = 'black';\n        }\n      return [player1, player2];\n    }\n\n    function handleIncomingData(data: StartGameMessageObject) {\n      if (data.type === 'game-invite') {\n        const accepted = window.confirm(`You have been invited to a game by ${data.inviterUsername}. Do you accept?`);\n        const responseMessage = JSON.stringify({ type: 'game-invite-response', accepted, recievingUser: data.initiatingUser, initiatingUser: data.recievingUser });\n        sendMessage(responseMessage);\n      } else if (data.type === 'create-game') {\n        expressApi.createGame(data, ((gameId) => {\n          const responseMessage = JSON.stringify({ type: 'game-created', recievingUser: data.initiatingUser, initiatingUser: data.recievingUser, gameId: gameId})\n          sendMessage(responseMessage);\n        }))\n      } else if (data.type === 'start-game') {\n          let [player1, player2] = randomlyAssignWhite();\n          player1.name = data.initiatingUser;\n          player2.name = data.initiatingUser\n          if (data.gameId) {\n            setGameId(data.gameId);\n          }\n          setInitiatingUser(player1);\n          setReceivingUser(player2);\n          setNavigateReady(true);\n      } else if (data.type === 'game-decline') {\n        alert(`${data.initiatingUser} declined to start a game.`);\n      }\n    }\n\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [lastMessage, expressApi, sendMessage, setGameId, setInitiatingUser, setReceivingUser]);\n\n  const handleUsernameClick = useCallback((evt: React.MouseEvent<HTMLButtonElement>) => {\n    const player2 = evt.currentTarget.dataset.username;\n    const message = JSON.stringify({ type: 'game-invite', recievingUser: player2, initiatingUser: username });\n    sendMessage(message);\n  }, [sendMessage, username]);\n\n  return (\n    <>\n      {\n      navigateReady ? (\n        <Navigate to={`/game/${gameId}`} />\n      ) :  isLoading ? (\n          <p>Loading...</p>\n        ) : users.length > 0 ? (\n          <ul>\n            {users.map((username, index) => (\n              <li key={index}>\n                <button \n                  disabled={readyState !== ReadyState.OPEN} \n                  data-username={username} \n                  onClick={handleUsernameClick}>\n                  {username}\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>No users are currently logged in.</p>\n        )\n      }\n    </>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}