{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx\",\n  _s = $RefreshSig$();\nimport { Player, Pawn, Rook, Knight, Bishop, Queen, King, assignBlackPieces, assignWhitePieces, grid } from '../utils/game-utils';\nimport React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { GameContext } from \"../context/GameContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst produceEmptyBoard = () => {\n  let cordCount = 0;\n  const newGameState = {};\n  for (const col of grid) {\n    for (const cord of col) {\n      newGameState[cord] = [null, cordCount];\n    }\n    cordCount += 1;\n  }\n  return newGameState;\n};\nconst randomlyAssignWhite = () => {\n  let [player1, player2] = new Player('', '', [], []);\n  const r = Math.floor(Math.random() * 2);\n  if (r === 0) {}\n  return r;\n};\nexport const ActiveGame = () => {\n  _s();\n  const {\n    initiatingUser,\n    receivingUser\n  } = useContext(GameContext);\n  const [gameState, setGameState] = useState(produceEmptyBoard());\n  if (getRandomNumber() === 0) {\n    const [player1, setPlayer1] = useState(new Player(initiatingUser, '', [], []));\n    const [player2, setPlayer2] = useState(new Player(receivingUser, '', [], []));\n  } else {\n    const [player1, setPlayer1] = useState(new Player(initiatingUser, '', [], []));\n    const [player2, setPlayer2] = useState(new Player(receivingUser, '', [], []));\n  }\n  const randomlyAssignWhite = useCallback(() => {\n    const r = Math.floor(Math.random() * 2);\n    if (r === 0) {\n      assignWhitePieces(grid, player1);\n      player1.color = 'white';\n      assignBlackPieces(grid, player2);\n      player2.color = 'black';\n    } else {\n      assignWhitePieces(grid, player2);\n      player2.color = 'white';\n      assignBlackPieces(grid, player1);\n      player1.color = 'black';\n    }\n  }, [player1, player2]);\n  const setPiecesOnBoard = useCallback(() => {\n    const allPieces = player1.alive.concat(player2.alive);\n    const allPositions = allPieces.map(p => p.position);\n    const newGameState = {\n      ...gameState\n    };\n    for (const spot in newGameState) {\n      if (allPositions.includes(spot)) {\n        for (const p of allPieces) {\n          if (p.position === spot) {\n            newGameState[spot][0] = p;\n          }\n        }\n      }\n    }\n    setGameState(newGameState);\n  }, [gameState, player1, player2]);\n  const process_move = (start, end) => {\n    let copy_state = {\n      ...gameState\n    };\n    let adj_start = start[0] + (parseInt(start[1]) - 1).toString();\n    let adj_end = end[0] + (parseInt(end[1]) - 1).toString();\n    let start_col = gameState[adj_start][1];\n    let start_row = 7 - parseInt(adj_start[1]);\n    let piece = copy_state[adj_start][0];\n    let all_moves = [];\n    // find what piece we are moving\n    if (piece instanceof Pawn) {\n      all_moves = piece.validPawnMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Knight) {\n      all_moves = piece.validKnightMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Rook) {\n      all_moves = piece.get_all_straight(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Bishop) {\n      all_moves = piece.get_all_diagonal(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Queen) {\n      all_moves = piece.get_all_straight(grid, gameState, start_col, start_row).concat(piece.get_all_diagonal(grid, gameState, start_col, start_row));\n    } else if (piece instanceof King) {\n      all_moves = piece.validKingMoves(grid, gameState, start_col, start_row);\n    }\n    if (all_moves.includes(adj_end)) {\n      // if the piece moving is taking an opponents piece\n      if (copy_state[adj_end][0] !== null) {\n        const piece = copy_state[adj_end][0];\n        // update the alive and grave list for player losing a piece\n        if (piece) {\n          if (player1.alive.includes(piece)) {\n            player1.grave.push(piece);\n            player1.alive = player1.alive.filter(item => item !== piece);\n          } else {\n            player2.grave.push(piece);\n            player2.alive = player2.alive.filter(item => item !== piece);\n          }\n        }\n      }\n\n      // update the positions of the pieces on the board\n      copy_state[adj_end][0] = copy_state[adj_start][0];\n      copy_state[adj_start][0] = null;\n      if (copy_state[adj_end][0] !== null) {\n        let piece = copy_state[adj_end][0];\n        if (piece) {\n          piece.position = adj_end;\n          if (player1 === piece.player) {\n            player1.alive.forEach(p => {\n              if (p.position === adj_start) {\n                p.position = adj_end;\n              }\n            });\n          } else {\n            player2.alive.forEach(p => {\n              if (p.position === adj_start) {\n                p.position = adj_end;\n              }\n            });\n          }\n        }\n      }\n      setGameState(copy_state);\n    } else {\n      return false;\n    }\n    return true;\n  };\n  useEffect(() => {\n    randomlyAssignWhite();\n    setPiecesOnBoard();\n  }, [randomlyAssignWhite, setPiecesOnBoard]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Object.keys(gameState).length === 64 && /*#__PURE__*/_jsxDEV(ChessBoard, {\n      gameState: gameState,\n      grid: grid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 48\n    }, this)\n  }, void 0, false);\n};\n_s(ActiveGame, \"xnzYWlJUm2mvz5v6dzZaaqK/2fs=\");\n_c = ActiveGame;\nconst ChessBoard = _ref => {\n  let {\n    gameState,\n    grid\n  } = _ref;\n  const chessBoard = [];\n  for (let row_num = 0; row_num < 8; row_num++) {\n    let row = [];\n    for (let col_num = 0; col_num < 8; col_num++) {\n      let spot_piece = gameState[grid[col_num][row_num]][0];\n      let squareColor = row_num % 2 === 0 ? col_num % 2 === 0 ? 'bg-black-square text-white-square' : 'bg-white-square text-black-square' : col_num % 2 === 0 ? 'bg-white-square text-black-square' : 'bg-black-square text-white-square';\n      row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `w-square h-square flex items-center justify-center ${squareColor}`,\n        children: spot_piece ? spot_piece.name : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this));\n    }\n    chessBoard.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: row\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 21\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chess-board\",\n    children: chessBoard\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ChessBoard;\nvar _c, _c2;\n$RefreshReg$(_c, \"ActiveGame\");\n$RefreshReg$(_c2, \"ChessBoard\");","map":{"version":3,"names":["Player","Pawn","Rook","Knight","Bishop","Queen","King","assignBlackPieces","assignWhitePieces","grid","React","useState","useEffect","useContext","useCallback","GameContext","jsxDEV","_jsxDEV","Fragment","_Fragment","produceEmptyBoard","cordCount","newGameState","col","cord","randomlyAssignWhite","player1","player2","r","Math","floor","random","ActiveGame","_s","initiatingUser","receivingUser","gameState","setGameState","getRandomNumber","setPlayer1","setPlayer2","color","setPiecesOnBoard","allPieces","alive","concat","allPositions","map","p","position","spot","includes","process_move","start","end","copy_state","adj_start","parseInt","toString","adj_end","start_col","start_row","piece","all_moves","validPawnMoves","validKnightMoves","get_all_straight","get_all_diagonal","validKingMoves","grave","push","filter","item","player","forEach","children","Object","keys","length","ChessBoard","fileName","_jsxFileName","lineNumber","columnNumber","_c","_ref","chessBoard","row_num","row","col_num","spot_piece","squareColor","className","name","_c2","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx"],"sourcesContent":["import { Player, Piece, Pawn, Rook, Knight, Bishop, Queen, King, assignBlackPieces, assignWhitePieces, grid } from '../utils/game-utils'\nimport React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { GameContext } from \"../context/GameContext\";\n\ninterface GameState {\n  [key: string]: [Piece | null, number];\n}\n\ninterface ChessBoardProps {\n  gameState: GameState;\n  grid: string[][];\n}\n\nconst produceEmptyBoard = () => {\n  let cordCount = 0;\n  const newGameState: GameState = {};\n  for (const col of grid) {\n    for (const cord of col) {\n      newGameState[cord] = [null, cordCount];\n    }\n    cordCount += 1;\n  }\n  return newGameState;\n}\n\nconst randomlyAssignWhite = () => {\n  let [player1, player2] = new Player('', '', [], []);\n  const r = Math.floor(Math.random() * 2);\n  if (r === 0) {\n\n  }\n  return r;\n}\n\nexport const ActiveGame: React.FC<{}> = () => {\n\n  const { initiatingUser, receivingUser } = useContext(GameContext);\n  const [gameState, setGameState] = useState<GameState>(produceEmptyBoard());\n\n  if (getRandomNumber() === 0) {\n    const [player1, setPlayer1] = useState<Player>(new Player(initiatingUser, '', [], []));\n    const [player2, setPlayer2] = useState<Player>(new Player(receivingUser, '', [], []));\n  } else {\n    const [player1, setPlayer1] = useState<Player>(new Player(initiatingUser, '', [], []));\n    const [player2, setPlayer2] = useState<Player>(new Player(receivingUser, '', [], []));\n  }\n\n  const randomlyAssignWhite = useCallback(() => {\n    const r = Math.floor(Math.random() * 2);\n    if (r === 0) {\n      assignWhitePieces(grid, player1);\n      player1.color = 'white';\n      assignBlackPieces(grid, player2);\n      player2.color = 'black';\n    } else {\n      assignWhitePieces(grid, player2);\n      player2.color = 'white';\n      assignBlackPieces(grid, player1);\n      player1.color = 'black';\n    }\n  }, [player1, player2]);\n\n  const setPiecesOnBoard = useCallback(() => {\n    const allPieces = player1.alive.concat(player2.alive);\n    const allPositions = allPieces.map(p => p.position);\n    const newGameState = {...gameState};\n    for (const spot in newGameState) {\n      if (allPositions.includes(spot)) {\n        for (const p of allPieces) {\n          if (p.position === spot) {\n            newGameState[spot][0] = p;\n          }\n        }\n      }\n    }\n    setGameState(newGameState);\n  }, [gameState, player1, player2]);\n\n  const process_move = (start: string, end: string): boolean => {\n    let copy_state = {...gameState};\n    let adj_start = start[0] + ((parseInt(start[1]) - 1).toString());\n    let adj_end = end[0] + ((parseInt(end[1]) - 1).toString());\n    let start_col = gameState[adj_start][1];\n    let start_row = 7 - parseInt(adj_start[1]);\n\n    let piece = copy_state[adj_start][0];\n    let all_moves: string[] = [];\n    // find what piece we are moving\n    if (piece instanceof Pawn) {\n        all_moves = piece.validPawnMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Knight) {\n        all_moves = piece.validKnightMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Rook) {\n        all_moves = piece.get_all_straight(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Bishop) {\n        all_moves = piece.get_all_diagonal(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Queen) {\n        all_moves = piece.get_all_straight(grid, gameState, start_col, start_row)\n            .concat(piece.get_all_diagonal(grid, gameState, start_col, start_row));\n    } else if (piece instanceof King) {\n        all_moves = piece.validKingMoves(grid, gameState, start_col, start_row);\n    }\n\n    if (all_moves.includes(adj_end)) {\n      // if the piece moving is taking an opponents piece\n      if (copy_state[adj_end][0] !== null) {\n        const piece = copy_state[adj_end][0];\n        // update the alive and grave list for player losing a piece\n        if (piece) {\n          if (player1.alive.includes(piece)) {\n            player1.grave.push(piece);\n            player1.alive = player1.alive.filter(item => item !== piece);\n          } else {\n            player2.grave.push(piece);\n            player2.alive = player2.alive.filter(item => item !== piece);\n          }\n        }\n      }\n\n      // update the positions of the pieces on the board\n      copy_state[adj_end][0] = copy_state[adj_start][0];\n      copy_state[adj_start][0] = null;\n      if (copy_state[adj_end][0] !== null) {\n        let piece = copy_state[adj_end][0];\n        if (piece) {\n          piece.position = adj_end;\n          if (player1 === piece.player) {\n            player1.alive.forEach((p) => {\n                if (p.position === adj_start) {\n                    p.position = adj_end;\n                }\n            });\n          } else {\n            player2.alive.forEach((p) => {\n                if (p.position === adj_start) {\n                    p.position = adj_end;\n                }\n            });\n          }\n\n        }\n      }\n      setGameState(copy_state);\n    } else {\n        return false;\n    }\n    return true;\n  }\n\n  useEffect(() => {\n    randomlyAssignWhite();\n    setPiecesOnBoard();\n  }, [randomlyAssignWhite, setPiecesOnBoard]);\n\n  return (\n    <>\n      {Object.keys(gameState).length === 64 && <ChessBoard gameState={gameState} grid={grid} />}\n    </>\n  );\n};\n\nconst ChessBoard: React.FC<ChessBoardProps> = ({ gameState, grid }) => {\n  const chessBoard = [];\n\n  for (let row_num = 0; row_num < 8; row_num++) {\n    let row = [];\n    for (let col_num = 0; col_num < 8; col_num++) {\n      let spot_piece = gameState[grid[col_num][row_num]][0];\n      let squareColor = row_num % 2 === 0 \n        ? col_num % 2 === 0 ? 'bg-black-square text-white-square' : 'bg-white-square text-black-square' \n        : col_num % 2 === 0 ? 'bg-white-square text-black-square' : 'bg-black-square text-white-square';\n\n      row.push(\n        <div className={`w-square h-square flex items-center justify-center ${squareColor}`}>\n          {spot_piece ? spot_piece.name : ''}\n        </div>\n      );\n    }\n    chessBoard.push(<div className=\"flex\">{row}</div>);\n  }\n\n  return (\n    <div className=\"chess-board\">\n      {chessBoard}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}