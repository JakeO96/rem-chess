{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/context/GameContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport { grid } from '../utils/game-utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext({\n  initiatingUser: undefined,\n  receivingUser: undefined,\n  gameId: '',\n  gameState: undefined,\n  setGameId: () => {},\n  // default function, will be overwritten by Provider value\n  setInitiatingUser: () => {},\n  setReceivingUser: () => {},\n  setGameState: () => {}\n});\nconst produceEmptyBoard = () => {\n  let cordCount = 0;\n  const newGameState = {};\n  for (const col of grid) {\n    for (const cord of col) {\n      newGameState[cord] = [null, cordCount];\n    }\n    cordCount += 1;\n  }\n  return newGameState;\n};\nexport const GameProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [initiatingUser, setInitiatingUser] = useState(undefined);\n  const [receivingUser, setReceivingUser] = useState(undefined);\n  const [gameId, setGameId] = useState('');\n  const [gameState, setGameState] = useState(produceEmptyBoard());\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      initiatingUser,\n      receivingUser,\n      gameId,\n      gameState,\n      setGameId,\n      setInitiatingUser,\n      setReceivingUser,\n      setGameState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(GameProvider, \"EIKp4V91hpW3pr0BB9NnoyTr5Ks=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["createContext","useState","grid","jsxDEV","_jsxDEV","GameContext","initiatingUser","undefined","receivingUser","gameId","gameState","setGameId","setInitiatingUser","setReceivingUser","setGameState","produceEmptyBoard","cordCount","newGameState","col","cord","GameProvider","_ref","_s","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/context/GameContext.tsx"],"sourcesContent":["import { createContext, useState, ReactNode } from 'react';\nimport { Player } from '../utils/game-utils';\nimport { Piece, grid } from '../utils/game-utils';\n\ninterface GameState {\n  [key: string]: [Piece | null, number];\n}\n\ntype GameContextType = {\n  initiatingUser: Player | undefined;\n  receivingUser: Player | undefined;\n  gameId: string;\n  gameState: GameState | undefined;\n  setGameId: React.Dispatch<React.SetStateAction<string>>;\n  setInitiatingUser: React.Dispatch<React.SetStateAction<Player | undefined>>;\n  setReceivingUser: React.Dispatch<React.SetStateAction<Player | undefined>>;\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>;\n};\n\nexport const GameContext = createContext<GameContextType>({\n  initiatingUser: undefined,\n  receivingUser: undefined,\n  gameId: '',\n  gameState: undefined,\n  setGameId: () => {}, // default function, will be overwritten by Provider value\n  setInitiatingUser: () => {},\n  setReceivingUser: () => {},\n  setGameState: () => {},\n});\n\ntype GameProviderProps = {\n  children: ReactNode;\n};\n\nconst produceEmptyBoard = () => {\n  let cordCount = 0;\n  const newGameState: GameState = {};\n  for (const col of grid) {\n    for (const cord of col) {\n      newGameState[cord] = [null, cordCount];\n    }\n    cordCount += 1;\n  }\n  return newGameState;\n}\n\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\n  const [initiatingUser, setInitiatingUser] = useState<Player | undefined>(undefined);\n  const [receivingUser, setReceivingUser] = useState<Player | undefined>(undefined);\n  const [gameId, setGameId] = useState<string>('');\n  const [gameState, setGameState] = useState<GameState>(produceEmptyBoard());\n\n  return (\n    <GameContext.Provider value={{ initiatingUser, receivingUser, gameId, gameState, setGameId, setInitiatingUser, setReceivingUser, setGameState}}>\n      {children}\n    </GameContext.Provider>\n  );\n};"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAmB,OAAO;AAE1D,SAAgBC,IAAI,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAiBlD,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAkB;EACxDM,cAAc,EAAEC,SAAS;EACzBC,aAAa,EAAED,SAAS;EACxBE,MAAM,EAAE,EAAE;EACVC,SAAS,EAAEH,SAAS;EACpBI,SAAS,EAAEA,CAAA,KAAM,CAAC,CAAC;EAAE;EACrBC,iBAAiB,EAAEA,CAAA,KAAM,CAAC,CAAC;EAC3BC,gBAAgB,EAAEA,CAAA,KAAM,CAAC,CAAC;EAC1BC,YAAY,EAAEA,CAAA,KAAM,CAAC;AACvB,CAAC,CAAC;AAMF,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC9B,IAAIC,SAAS,GAAG,CAAC;EACjB,MAAMC,YAAuB,GAAG,CAAC,CAAC;EAClC,KAAK,MAAMC,GAAG,IAAIhB,IAAI,EAAE;IACtB,KAAK,MAAMiB,IAAI,IAAID,GAAG,EAAE;MACtBD,YAAY,CAACE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAEH,SAAS,CAAC;IACxC;IACAA,SAAS,IAAI,CAAC;EAChB;EACA,OAAOC,YAAY;AACrB,CAAC;AAED,OAAO,MAAMG,YAAyC,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACpE,MAAM,CAACf,cAAc,EAAEM,iBAAiB,CAAC,GAAGX,QAAQ,CAAqBM,SAAS,CAAC;EACnF,MAAM,CAACC,aAAa,EAAEK,gBAAgB,CAAC,GAAGZ,QAAQ,CAAqBM,SAAS,CAAC;EACjF,MAAM,CAACE,MAAM,EAAEE,SAAS,CAAC,GAAGV,QAAQ,CAAS,EAAE,CAAC;EAChD,MAAM,CAACS,SAAS,EAAEI,YAAY,CAAC,GAAGb,QAAQ,CAAYc,iBAAiB,CAAC,CAAC,CAAC;EAE1E,oBACEX,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEnB,cAAc;MAAEE,aAAa;MAAEC,MAAM;MAAEC,SAAS;MAAEC,SAAS;MAAEC,iBAAiB;MAAEC,gBAAgB;MAAEC;IAAY,CAAE;IAAAS,QAAA,EAC5IA;EAAQ;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACP,EAAA,CAXWF,YAAyC;AAAAU,EAAA,GAAzCV,YAAyC;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}