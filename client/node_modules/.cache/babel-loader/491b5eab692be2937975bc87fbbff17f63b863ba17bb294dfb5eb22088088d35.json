{"ast":null,"code":"import Cookies from \"js-cookie\";\nclass MyError extends Error {\n  constructor(message, stackTrace, response) {\n    super(message);\n    this.status = void 0;\n    this.response = void 0;\n    this.stackTrace = void 0;\n    this.stackTrace = stackTrace;\n    this.response = response;\n  }\n}\nexport default class ExpressAPI {\n  constructor() {\n    this.createUser = async data => {\n      const options = {\n        method: 'post',\n        body: JSON.stringify(data),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await fetch('http://localhost:3001/api/auth/register', options);\n      return response;\n    };\n    this.logUserIn = async data => {\n      const options = {\n        method: 'post',\n        body: JSON.stringify(data),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await fetch('http://localhost:3001/api/auth/login', options);\n      return response;\n    };\n    this.logUserOut = async () => {\n      const options = {\n        method: 'post',\n        body: {},\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await this.makeApiCall('http://localhost:3001/api/auth/logout', options);\n      return response;\n    };\n    this.getLoggedInUsers = async () => {\n      const options = {\n        method: 'get',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await this.makeApiCall('http://localhost:3001/api/user/logged-in', options);\n      return response;\n    };\n    this.fieldExistsInDB = async (fieldName, value) => {\n      const options = {\n        method: 'get',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await this.makeApiCall(`http://localhost:3001/api/user/exists/${fieldName}/${value}`, options);\n      return response;\n    };\n    this.createGame = async data => {\n      const options = {\n        method: 'post',\n        body: JSON.stringify(data),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await fetch('http://localhost:3001/api/game/create-game', options);\n      return response;\n    };\n    this.makeApiCall = async (url, options) => {\n      // If there's a token, add it to the request\n      const token = Cookies.get('token');\n      if (token) {\n        options.headers = {\n          ...options.headers,\n          'Authorization': `Bearer ${token}`\n        };\n      }\n      const response = await fetch(url, options);\n      if (response.status === 401) {\n        const errorData = await response.json();\n        if (errorData.message === 'Session has expired. Please log in again.') {\n          // Get the refresh token from the cookie\n          const refreshToken = Cookies.get('refreshToken');\n          if (refreshToken) {\n            // Request a new access token using the refresh token\n            const refreshOptions = {\n              method: 'post',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${refreshToken}`\n              }\n            };\n            const refreshResponse = await fetch('http://localhost:3001/api/auth/refresh', refreshOptions);\n            const refreshData = await refreshResponse.json();\n            if (refreshData.accessToken) {\n              // Store the new access token and refresh token in cookies\n              Cookies.set('token', refreshData.accessToken);\n              Cookies.set('refreshToken', refreshData.refreshToken);\n              // Retry the original request with the new access token\n              options.headers['Authorization'] = `Bearer ${refreshData.accessToken}`;\n              return this.makeApiCall(url, options);\n            }\n          }\n        }\n        throw new Error(errorData.message);\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message);\n      }\n      return response.json();\n    };\n  }\n}","map":{"version":3,"names":["Cookies","MyError","Error","constructor","message","stackTrace","response","status","ExpressAPI","createUser","data","options","method","body","JSON","stringify","headers","fetch","logUserIn","logUserOut","makeApiCall","getLoggedInUsers","fieldExistsInDB","fieldName","value","createGame","url","token","get","errorData","json","refreshToken","refreshOptions","refreshResponse","refreshData","accessToken","set","ok"],"sources":["/home/jake/rem-stack/chess/client/src/api/express-api.ts"],"sourcesContent":["import Cookies from \"js-cookie\";\n\nclass MyError extends Error {\n  status?: string;\n  response?: Response;\n  stackTrace?: string;\n\n  constructor(message: string, stackTrace?: string, response?: Response) {\n    super(message);\n    this.stackTrace = stackTrace;\n    this.response = response;\n  }\n}\n\nexport default class ExpressAPI {\n  createUser = async (data: Object): Promise<Response> => {\n    const options = {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }\n\n    const response = await fetch('http://localhost:3001/api/auth/register', options)\n    return response\n  }\n\n  logUserIn = async (data: object): Promise<Response> => {\n    const options = {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    }\n    const response = await fetch('http://localhost:3001/api/auth/login', options)\n    return response;\n  }\n\n  logUserOut = async (): Promise<Response> => {\n    const options = {\n      method: 'post',\n      body: {},\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    }\n    const response = await this.makeApiCall('http://localhost:3001/api/auth/logout', options);\n    return response;\n  }\n\n  getLoggedInUsers = async (): Promise<any> => {\n    const options = {\n      method: 'get',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    }\n    const response = await this.makeApiCall('http://localhost:3001/api/user/logged-in', options);\n    return response;\n  }\n\n  fieldExistsInDB = async (fieldName: string, value: any): Promise<Response> => {\n    const options = {\n      method: 'get',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    }\n    const response = await this.makeApiCall(`http://localhost:3001/api/user/exists/${fieldName}/${value}`, options);\n    return response;\n  }\n\n  createGame = async (data: object): Promise<Response> => {\n    const options = {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    }\n    const response = await fetch('http://localhost:3001/api/game/create-game', options)\n    return response;\n  }\n\n  private makeApiCall = async (url: string, options: any): Promise<any> => {\n    // If there's a token, add it to the request\n    const token = Cookies.get('token');\n    if (token) {\n      options.headers = {\n        ...options.headers,\n        'Authorization': `Bearer ${token}`,\n      }\n    }\n    \n    const response = await fetch(url, options);\n    \n    if(response.status === 401) {\n      const errorData = await response.json();\n      if(errorData.message === 'Session has expired. Please log in again.') {\n        // Get the refresh token from the cookie\n        const refreshToken = Cookies.get('refreshToken');\n        if(refreshToken) {\n          // Request a new access token using the refresh token\n          const refreshOptions = {\n            method: 'post',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${refreshToken}`\n            }\n          }\n          const refreshResponse = await fetch('http://localhost:3001/api/auth/refresh', refreshOptions);\n          const refreshData = await refreshResponse.json();\n          if(refreshData.accessToken) {\n            // Store the new access token and refresh token in cookies\n            Cookies.set('token', refreshData.accessToken);\n            Cookies.set('refreshToken', refreshData.refreshToken);\n            // Retry the original request with the new access token\n            options.headers['Authorization'] = `Bearer ${refreshData.accessToken}`;\n            return this.makeApiCall(url, options);\n          }\n        }\n      }\n      throw new Error(errorData.message);\n    }\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message);\n    }\n    \n    return response.json();\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}