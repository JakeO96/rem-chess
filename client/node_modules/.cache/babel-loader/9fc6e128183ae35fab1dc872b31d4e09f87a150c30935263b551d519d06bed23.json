{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx\",\n  _s = $RefreshSig$();\nimport { Player, Pawn, Rook, Knight, Bishop, Queen, King, assignBlackPieces, assignWhitePieces, grid } from '../utils/game-utils';\nimport React, { useState, useEffect, useContext } from 'react';\nimport { GameContext } from \"../context/GameContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ActiveGame = () => {\n  _s();\n  const [gameState, setGameState] = useState({});\n  const {\n    initiatingUser,\n    recvingUser\n  } = useContext(GameContext);\n  const player1 = new Player(initiatingUser, '', [], []);\n  const player2 = new Player(recievingUser, '', [], []);\n  useEffect(() => {\n    produceEmptyBoard();\n    randomlyAssignWhite();\n    setPiecesOnBoard();\n  }, []);\n  const produceEmptyBoard = () => {\n    let cCnt = 0;\n    const newGameState = {};\n    for (const col of grid) {\n      for (const cord of col) {\n        newGameState[cord] = [null, cCnt];\n      }\n      cCnt += 1;\n    }\n    setGameState(newGameState);\n  };\n  const randomlyAssignWhite = () => {\n    const r = Math.floor(Math.random() * 2);\n    if (r === 0) {\n      assignWhitePieces(grid, player1);\n      player1.color = 'white';\n      assignBlackPieces(grid, player2);\n      player2.color = 'black';\n    } else {\n      assignWhitePieces(grid, player2);\n      player2.color = 'white';\n      assignBlackPieces(grid, player1);\n      player1.color = 'black';\n    }\n  };\n  const setPiecesOnBoard = () => {\n    const allPieces = player1.alive.concat(player2.alive);\n    const allPositions = allPieces.map(p => p.position);\n    const newGameState = {\n      ...gameState\n    };\n    for (const spot in newGameState) {\n      if (allPositions.includes(spot)) {\n        for (const p of allPieces) {\n          if (p.position === spot) {\n            newGameState[spot][0] = p;\n          }\n        }\n      }\n    }\n    setGameState(newGameState);\n  };\n  const process_move = (start, end) => {\n    let copy_state = {\n      ...gameState\n    };\n    let adj_start = start[0] + (parseInt(start[1]) - 1).toString();\n    let adj_end = end[0] + (parseInt(end[1]) - 1).toString();\n    let start_col = gameState[adj_start][1];\n    let start_row = 7 - parseInt(adj_start[1]);\n    let piece = copy_state[adj_start][0];\n    let all_moves = [];\n    // find what piece we are moving\n    if (piece instanceof Pawn) {\n      all_moves = piece.validPawnMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Knight) {\n      all_moves = piece.validKnightMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Rook) {\n      all_moves = piece.get_all_straight(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Bishop) {\n      all_moves = piece.get_all_diagonal(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Queen) {\n      all_moves = piece.get_all_straight(grid, gameState, start_col, start_row).concat(piece.get_all_diagonal(grid, gameState, start_col, start_row));\n    } else if (piece instanceof King) {\n      all_moves = piece.validKingMoves(grid, gameState, start_col, start_row);\n    }\n    if (all_moves.includes(adj_end)) {\n      // if the piece moving is taking an opponents piece\n      if (copy_state[adj_end][0] !== null) {\n        const piece = copy_state[adj_end][0];\n        // update the alive and grave list for player losing a piece\n        if (piece) {\n          if (player1.alive.includes(piece)) {\n            player1.grave.push(piece);\n            player1.alive = player1.alive.filter(item => item !== piece);\n          } else {\n            player2.grave.push(piece);\n            player2.alive = player2.alive.filter(item => item !== piece);\n          }\n        }\n      }\n\n      // update the positions of the pieces on the board\n      copy_state[adj_end][0] = copy_state[adj_start][0];\n      copy_state[adj_start][0] = null;\n      if (copy_state[adj_end][0] !== null) {\n        let piece = copy_state[adj_end][0];\n        if (piece) {\n          piece.position = adj_end;\n          if (player1 === piece.player) {\n            player1.alive.forEach(p => {\n              if (p.position === adj_start) {\n                p.position = adj_end;\n              }\n            });\n          } else {\n            player2.alive.forEach(p => {\n              if (p.position === adj_start) {\n                p.position = adj_end;\n              }\n            });\n          }\n        }\n      }\n      setGameState(copy_state);\n    } else {\n      return false;\n    }\n    return true;\n  };\n  const renderBoard = () => {\n    // This function should return JSX that represents the board.\n    // This implementation depends on how you want to render the board.\n    // For simplicity, let's assume we're returning an empty div.\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(ActiveGame, \"uVuzs54CkDzACmlXo2YzfPv1A+8=\");\n_c = ActiveGame;\nvar _c;\n$RefreshReg$(_c, \"ActiveGame\");","map":{"version":3,"names":["Player","Pawn","Rook","Knight","Bishop","Queen","King","assignBlackPieces","assignWhitePieces","grid","React","useState","useEffect","useContext","GameContext","jsxDEV","_jsxDEV","ActiveGame","_s","gameState","setGameState","initiatingUser","recvingUser","player1","player2","recievingUser","produceEmptyBoard","randomlyAssignWhite","setPiecesOnBoard","cCnt","newGameState","col","cord","r","Math","floor","random","color","allPieces","alive","concat","allPositions","map","p","position","spot","includes","process_move","start","end","copy_state","adj_start","parseInt","toString","adj_end","start_col","start_row","piece","all_moves","validPawnMoves","validKnightMoves","get_all_straight","get_all_diagonal","validKingMoves","grave","push","filter","item","player","forEach","renderBoard","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx"],"sourcesContent":["import MainLayout from \"./MainLayout\"\nimport { Player, Piece, Pawn, Rook, Knight, Bishop, Queen, King, assignBlackPieces, assignWhitePieces, grid } from '../utils/game-utils'\nimport React, { useState, useEffect, useContext } from 'react';\nimport { GameContext } from \"../context/GameContext\";\n\ninterface GameState {\n  [key: string]: [Piece | null, number];\n}\n\nexport const ActiveGame: React.FC<{}> = () => {\n  const [gameState, setGameState] = useState<GameState>({});\n  const { initiatingUser, recvingUser } = useContext(GameContext);\n  const player1 = new Player(initiatingUser, '', [], []);\n  const player2 = new Player(recievingUser, '', [], []);\n  \n  useEffect(() => {\n    produceEmptyBoard();\n    randomlyAssignWhite();\n    setPiecesOnBoard();\n  }, []);\n\n  const produceEmptyBoard = () => {\n    let cCnt = 0;\n    const newGameState: GameState = {};\n    for (const col of grid) {\n      for (const cord of col) {\n        newGameState[cord] = [null, cCnt];\n      }\n      cCnt += 1;\n    }\n    setGameState(newGameState);\n  }\n\n  const randomlyAssignWhite = () => {\n    const r = Math.floor(Math.random() * 2);\n    if (r === 0) {\n      assignWhitePieces(grid, player1);\n      player1.color = 'white';\n      assignBlackPieces(grid, player2);\n      player2.color = 'black';\n    } else {\n      assignWhitePieces(grid, player2);\n      player2.color = 'white';\n      assignBlackPieces(grid, player1);\n      player1.color = 'black';\n    }\n  }\n\n  const setPiecesOnBoard = () => {\n    const allPieces = player1.alive.concat(player2.alive);\n    const allPositions = allPieces.map(p => p.position);\n    const newGameState = {...gameState};\n    for (const spot in newGameState) {\n      if (allPositions.includes(spot)) {\n        for (const p of allPieces) {\n          if (p.position === spot) {\n            newGameState[spot][0] = p;\n          }\n        }\n      }\n    }\n    setGameState(newGameState);\n  }\n\n  const process_move = (start: string, end: string): boolean => {\n    let copy_state = {...gameState};\n    let adj_start = start[0] + ((parseInt(start[1]) - 1).toString());\n    let adj_end = end[0] + ((parseInt(end[1]) - 1).toString());\n    let start_col = gameState[adj_start][1];\n    let start_row = 7 - parseInt(adj_start[1]);\n\n    let piece = copy_state[adj_start][0];\n    let all_moves: string[] = [];\n    // find what piece we are moving\n    if (piece instanceof Pawn) {\n        all_moves = piece.validPawnMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Knight) {\n        all_moves = piece.validKnightMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Rook) {\n        all_moves = piece.get_all_straight(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Bishop) {\n        all_moves = piece.get_all_diagonal(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Queen) {\n        all_moves = piece.get_all_straight(grid, gameState, start_col, start_row)\n            .concat(piece.get_all_diagonal(grid, gameState, start_col, start_row));\n    } else if (piece instanceof King) {\n        all_moves = piece.validKingMoves(grid, gameState, start_col, start_row);\n    }\n\n    if (all_moves.includes(adj_end)) {\n      // if the piece moving is taking an opponents piece\n      if (copy_state[adj_end][0] !== null) {\n        const piece = copy_state[adj_end][0];\n        // update the alive and grave list for player losing a piece\n        if (piece) {\n          if (player1.alive.includes(piece)) {\n            player1.grave.push(piece);\n            player1.alive = player1.alive.filter(item => item !== piece);\n          } else {\n            player2.grave.push(piece);\n            player2.alive = player2.alive.filter(item => item !== piece);\n          }\n        }\n      }\n\n      // update the positions of the pieces on the board\n      copy_state[adj_end][0] = copy_state[adj_start][0];\n      copy_state[adj_start][0] = null;\n      if (copy_state[adj_end][0] !== null) {\n        let piece = copy_state[adj_end][0];\n        if (piece) {\n          piece.position = adj_end;\n          if (player1 === piece.player) {\n            player1.alive.forEach((p) => {\n                if (p.position === adj_start) {\n                    p.position = adj_end;\n                }\n            });\n          } else {\n            player2.alive.forEach((p) => {\n                if (p.position === adj_start) {\n                    p.position = adj_end;\n                }\n            });\n          }\n\n        }\n      }\n      setGameState(copy_state);\n    } else {\n        return false;\n    }\n    return true;\n  }\n\n  const renderBoard = (): JSX.Element => {\n    // This function should return JSX that represents the board.\n    // This implementation depends on how you want to render the board.\n    // For simplicity, let's assume we're returning an empty div.\n    return <div></div>;\n  }\n\n  return (\n    <div>\n      {renderBoard()}\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}