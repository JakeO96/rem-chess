{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/context/GameContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from 'react';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { grid } from '../utils/game-utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext({\n  initiatingUser: undefined,\n  receivingUser: undefined,\n  gameId: '',\n  gameState: undefined,\n  setGameId: () => {},\n  setInitiatingUser: () => {},\n  setReceivingUser: () => {},\n  setGameState: () => {},\n  sendMessage: () => {},\n  // default function\n  lastMessage: null,\n  readyState: ReadyState.UNINSTANTIATED\n});\nconst produceEmptyBoard = () => {\n  let cordCount = 0;\n  const newGameState = {};\n  for (const col of grid) {\n    for (const cord of col) {\n      newGameState[cord] = [null, cordCount];\n    }\n    cordCount += 1;\n  }\n  return newGameState;\n};\nexport const GameProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [initiatingUser, setInitiatingUser] = useState(undefined);\n  const [receivingUser, setReceivingUser] = useState(undefined);\n  const [gameId, setGameId] = useState('');\n  const [gameState, setGameState] = useState(produceEmptyBoard());\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:3001');\n  const {\n    sendMessage,\n    lastMessage,\n    readyState\n  } = useWebSocket(socketUrl, {\n    onOpen: () => console.log('opened'),\n    shouldReconnect: closeEvent => true\n  });\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated'\n  }[readyState];\n  useEffect(() => {\n    // Add the message handling code here\n  }, [lastMessage]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      initiatingUser,\n      receivingUser,\n      gameId,\n      gameState,\n      setGameId,\n      setInitiatingUser,\n      setReceivingUser,\n      setGameState,\n      sendMessage,\n      lastMessage,\n      readyState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(GameProvider, \"mJHI7Qc6zjMiMWmn6GazJdnNS5E=\", false, function () {\n  return [useWebSocket];\n});\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useWebSocket","ReadyState","grid","jsxDEV","_jsxDEV","GameContext","initiatingUser","undefined","receivingUser","gameId","gameState","setGameId","setInitiatingUser","setReceivingUser","setGameState","sendMessage","lastMessage","readyState","UNINSTANTIATED","produceEmptyBoard","cordCount","newGameState","col","cord","GameProvider","_ref","_s","children","socketUrl","setSocketUrl","onOpen","console","log","shouldReconnect","closeEvent","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/context/GameContext.tsx"],"sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { Player } from '../utils/game-utils';\nimport { Piece, grid } from '../utils/game-utils';\nimport { JsonObject } from 'react-use-websocket/dist/lib/types';\n\nexport interface StartGameMessageObject extends JsonObject {\n  type: string;\n  accepted?: boolean;\n  initiatingUser: string;\n  recievingUser: string;\n  gameId?: string;\n}\n\ninterface GameState {\n  [key: string]: [Piece | null, number];\n}\n\ntype GameContextType = {\n  initiatingUser: Player | undefined;\n  receivingUser: Player | undefined;\n  gameId: string;\n  gameState: GameState | undefined;\n  setGameId: React.Dispatch<React.SetStateAction<string>>;\n  setInitiatingUser: React.Dispatch<React.SetStateAction<Player | undefined>>;\n  setReceivingUser: React.Dispatch<React.SetStateAction<Player | undefined>>;\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>;\n  sendMessage: (message: string) => void;\n  lastMessage: MessageEvent<any> | null;\n  readyState: ReadyState;\n};\n\nexport const GameContext = createContext<GameContextType>({\n  initiatingUser: undefined,\n  receivingUser: undefined,\n  gameId: '',\n  gameState: undefined,\n  setGameId: () => { },\n  setInitiatingUser: () => { },\n  setReceivingUser: () => { },\n  setGameState: () => { },\n  sendMessage: () => {},  // default function\n  lastMessage: null,\n  readyState: ReadyState.UNINSTANTIATED,\n});\n\ntype GameProviderProps = {\n  children: ReactNode;\n};\n\nconst produceEmptyBoard = () => {\n  let cordCount = 0;\n  const newGameState: GameState = {};\n  for (const col of grid) {\n    for (const cord of col) {\n      newGameState[cord] = [null, cordCount];\n    }\n    cordCount += 1;\n  }\n  return newGameState;\n}\n\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\n  const [initiatingUser, setInitiatingUser] = useState<Player | undefined>(undefined);\n  const [receivingUser, setReceivingUser] = useState<Player | undefined>(undefined);\n  const [gameId, setGameId] = useState<string>('');\n  const [gameState, setGameState] = useState<GameState>(produceEmptyBoard());\n\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:3001');\n  const { \n    sendMessage, \n    lastMessage,\n    readyState \n  } = useWebSocket<StartGameMessageObject>(socketUrl, { \n    onOpen: () => console.log('opened'), \n    shouldReconnect: (closeEvent) => true,\n  });\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n  }[readyState];\n\n  useEffect(() => {\n    // Add the message handling code here\n  }, [lastMessage]);\n\n  return (\n    <GameContext.Provider value={{ initiatingUser, receivingUser, gameId, gameState, setGameId, setInitiatingUser, setReceivingUser, setGameState, sendMessage, lastMessage, readyState }}>\n      {children}\n    </GameContext.Provider>\n  );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}