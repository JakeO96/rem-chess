{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});","map":{"version":3,"names":[],"sources":["/home/jake/rem-stack/chess/client/node_modules/react-use-websocket/src/lib/types.ts"],"sourcesContent":["import { MutableRefObject } from 'react';\nimport { ReadyState } from './constants';\n\nexport interface QueryParams {\n  [key: string]: string | number;\n}\n\nexport interface Options {\n  fromSocketIO?: boolean;\n  queryParams?: QueryParams;\n  protocols?: string | string[];\n  share?: boolean;\n  onOpen?: (event: WebSocketEventMap['open']) => void;\n  onClose?: (event: WebSocketEventMap['close']) => void;\n  onMessage?: (event: WebSocketEventMap['message']) => void;\n  onError?: (event: WebSocketEventMap['error']) => void;\n  onReconnectStop?: (numAttempts: number) => void;\n  shouldReconnect?: (event: WebSocketEventMap['close']) => boolean;\n  reconnectInterval?: number | ((lastAttemptNumber: number) => number);\n  reconnectAttempts?: number;\n  filter?: (message: WebSocketEventMap['message']) => boolean;\n  retryOnError?: boolean;\n  eventSourceOptions?: EventSourceOnly;\n  skipAssert?: boolean;\n}\n\nexport type EventSourceOnly = Omit<Options, 'eventSourceOptions'> & EventSourceInit;\n\nexport interface EventSourceEventHandlers {\n  [eventName: string]: (message: EventSourceEventMap['message']) => void;\n}\n\nexport interface EventSourceOptions extends EventSourceOnly {\n  events?: EventSourceEventHandlers;\n}\n\nexport type ReadyStateState = {\n  [url: string]: ReadyState,\n}\n\nexport type WebSocketMessage = string | ArrayBuffer | SharedArrayBuffer | Blob | ArrayBufferView;\n\nexport type SendMessage = (message: WebSocketMessage, keep?: boolean) => void;\nexport type SendJsonMessage = (jsonMessage: JsonValue, keep?: boolean) => void;\n\nexport type Subscriber<T = WebSocketEventMap['message']> = {\n  setLastMessage: (message: T) => void,\n  setReadyState: (readyState: ReadyState) => void,\n  optionsRef: MutableRefObject<Options>,\n  reconnectCount: MutableRefObject<number>,\n  reconnect: MutableRefObject<() => void>,\n}\n\nexport type WebSocketHook<T = JsonValue, P = WebSocketEventMap['message'] | null> = {\n  sendMessage: SendMessage,\n  sendJsonMessage: SendJsonMessage,\n  lastMessage: P,\n  lastJsonMessage: T,\n  readyState: ReadyState,\n  getWebSocket: () => (WebSocketLike | null),\n}\n\nexport type EventSourceHook = Omit<\n  WebSocketHook<EventSourceEventMap['message']>,\n  'sendMessage' | 'sendJsonMessage' | 'lastMessage' | 'lastJsonMessage' | 'getWebSocket'\n> & {\n  lastEvent: EventSourceEventMap['message'] | null,\n  getEventSource: () => (WebSocketLike | null),\n}\n\nexport type WebSocketLike = WebSocket | EventSource;\n\n\n/**\nMatches a [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).\n@category Class\n*/\nexport type Class<T, Arguments extends unknown[] = any[]> = Constructor<T, Arguments> & {prototype: T};\n\n/**\nMatches a [`class` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).\n@category Class\n*/\nexport type Constructor<T, Arguments extends unknown[] = any[]> = new(...arguments_: Arguments) => T;\n\n/**\nMatches any valid JSON primitive value.\n@category JSON\n*/\nexport type JsonPrimitive = string | number | boolean | null;\n\n/**\nMatches a JSON object.\nThis type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. Don't use this as a direct return type as the user would have to double-cast it: `jsonObject as unknown as CustomResponse`. Instead, you could extend your CustomResponse type from it to ensure your type only uses JSON-compatible types: `interface CustomResponse extends JsonObject { â€¦ }`.\n@category JSON\n*/\nexport type JsonObject = {[Key in string]?: JsonValue | JsonPrimitive };\n\n/**\nMatches a JSON array.\n@category JSON\n*/\nexport type JsonArray = JsonValue[] | JsonPrimitive[];\n\n/**\nMatches any valid JSON value.\n@see `Jsonify` if you need to transform a type to one that is assignable to `JsonValue`.\n@category JSON\n*/\nexport type JsonValue = JsonObject | JsonArray;\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}