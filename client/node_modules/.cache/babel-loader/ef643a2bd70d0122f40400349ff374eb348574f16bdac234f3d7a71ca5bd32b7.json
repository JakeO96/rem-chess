{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React, { useEffect, useContext, useCallback } from 'react';\nimport { Pawn, Rook, Bishop, Knight, Queen, King, grid } from '../utils/game-utils';\nimport { GameContext } from \"../context/GameContext\";\nimport { useDrag, useDrop } from 'react-dnd';\nimport { svgIcons } from '../utils/svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ActiveGame = () => {\n  _s();\n  const {\n    initiatingUser: player1,\n    receivingUser: player2,\n    gameState,\n    setGameState,\n    sendMessage,\n    lastMessage\n  } = useContext(GameContext);\n  const setPiecesOnBoard = useCallback(() => {\n    if (player1 && player2 && gameState) {\n      const allPieces = player1.alive.concat(player2.alive);\n      const allPositions = allPieces.map(p => p.position);\n      const newGameState = {\n        ...gameState\n      };\n      for (const spot in newGameState) {\n        if (allPositions.includes(spot)) {\n          for (const p of allPieces) {\n            if (p.position === spot) {\n              if (newGameState.board) newGameState.board[spot][0] = p;\n            }\n          }\n        }\n      }\n      setGameState(newGameState);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [player1, player2]);\n  useEffect(() => {\n    setPiecesOnBoard();\n  }, [setPiecesOnBoard]);\n  useEffect(() => {\n    function handleIncomingData(data) {\n      if (data.type === 'move-made') {\n        setGameState(data.newGameState);\n      }\n    }\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [sendMessage, lastMessage, setPiecesOnBoard, setGameState]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ChessBoard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ActiveGame, \"4Hdj/PsdpfCofQKWUeLSJdDy3+k=\");\n_c = ActiveGame;\nconst ChessBoard = () => {\n  _s2();\n  const {\n    gameState\n  } = useContext(GameContext);\n  const chessBoard = [];\n  for (let row_num = 0; row_num < 8; row_num++) {\n    let row = [];\n    for (let col_num = 0; col_num < 8; col_num++) {\n      if (gameState) {\n        let position = grid[col_num][row_num];\n        let squareColor = row_num % 2 === 0 ? col_num % 2 === 0 ? 'bg-black-square' : 'bg-white-square' : col_num % 2 === 0 ? 'bg-white-square' : 'bg-black-square';\n        row.push( /*#__PURE__*/_jsxDEV(Square, {\n          position: position,\n          squareColor: squareColor\n        }, `${row_num}-${col_num}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    chessBoard.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-screen flex items-center justify-center\",\n      children: row\n    }, row_num, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chess-board\",\n    children: chessBoard\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n// Square component\n_s2(ChessBoard, \"T2MsfJ6MfPSd6LIBzd8drYxXGwg=\");\n_c2 = ChessBoard;\nconst Square = _ref => {\n  _s3();\n  let {\n    position,\n    squareColor\n  } = _ref;\n  const {\n    initiatingUser: player1,\n    receivingUser: player2,\n    gameId,\n    gameState,\n    setInitiatingUser,\n    setReceivingUser,\n    setGameState,\n    sendMessage\n  } = useContext(GameContext);\n  const process_move = (start, end) => {\n    if (piece.isWhite !== gameState.isWhiteTurn) {\n      return {\n        isValid: false,\n        newState: gameState,\n        newPlayer1: player1,\n        newPlayer2: player2\n      };\n    }\n    let copyState = {\n      ...gameState\n    };\n    if (copyState.board) {\n      let startPosition = start[0] + start[1];\n      let endPosition = end[0] + end[1];\n      let startCol = copyState.board[startPosition][1];\n      let startRow = 7 - parseInt(startPosition[1]);\n      let piece = copyState.board[startPosition][0];\n      let allMoves = [];\n      // find what piece we are moving\n      if (piece instanceof Pawn) {\n        allMoves = piece.validPawnMoves(grid, gameState, startCol, startRow);\n      } else if (piece instanceof Knight) {\n        allMoves = piece.validKnightMoves(grid, gameState, startCol, startRow);\n      } else if (piece instanceof Rook) {\n        allMoves = piece.get_all_straight(grid, gameState, startCol, startRow);\n      } else if (piece instanceof Bishop) {\n        allMoves = piece.get_all_diagonal(grid, gameState, startCol, startRow);\n      } else if (piece instanceof Queen) {\n        allMoves = piece.get_all_straight(grid, gameState, startCol, startRow).concat(piece.get_all_diagonal(grid, gameState, startCol, startRow));\n      } else if (piece instanceof King) {\n        allMoves = piece.validKingMoves(grid, gameState, startCol, startRow);\n      }\n      if (allMoves.includes(endPosition)) {\n        // if the piece moving is taking an opponents piece\n        if (copyState.board[endPosition][0] !== null) {\n          const piece = copyState.board[endPosition][0];\n          // update the alive and grave list for player losing a piece\n          if (piece && player1 && player2) {\n            if (player1.alive.includes(piece)) {\n              player1.grave.push(piece);\n              player1.alive = player1.alive.filter(item => item !== piece);\n            } else {\n              player2.grave.push(piece);\n              player2.alive = player2.alive.filter(item => item !== piece);\n            }\n          }\n        }\n\n        // update the positions of the pieces on the board\n        copyState.board[endPosition][0] = copyState.board[startPosition][0];\n        copyState.board[startPosition][0] = null;\n        if (copyState.board[endPosition][0] !== null) {\n          let piece = copyState.board[endPosition][0];\n          if (piece && player1 && player2) {\n            piece.position = endPosition;\n            if (player1.name === piece.playerName) {\n              player1.alive.forEach(p => {\n                if (p.position === startPosition) {\n                  p.position = endPosition;\n                }\n              });\n            } else {\n              player2.alive.forEach(p => {\n                if (p.position === startPosition) {\n                  p.position = endPosition;\n                }\n              });\n            }\n          }\n        }\n      } else {\n        return {\n          isValid: false,\n          newState: copyState,\n          newPlayer1: player1,\n          newPlayer2: player2\n        };\n      }\n    }\n    return {\n      isValid: true,\n      newState: copyState,\n      newPlayer1: player1,\n      newPlayer2: player2\n    };\n  };\n  const [, dropRef] = useDrop({\n    accept: 'piece',\n    drop: (item, monitor) => {\n      if (item) {\n        const start = item.piece.position;\n        const end = position;\n        if (player1 && player2) {\n          const moveResult = process_move(start, end);\n          if (moveResult.isValid) {\n            item.piece.moved = true;\n            const message = JSON.stringify({\n              type: 'valid-move',\n              pieceColor: item.piece.isWhite,\n              playerName: item.piece.playerName,\n              gameId: gameId,\n              newGameState: moveResult.newState\n            });\n            sendMessage(message);\n            if (moveResult.newPlayer1 && moveResult.newPlayer2) {\n              setInitiatingUser(moveResult.newPlayer1);\n              setReceivingUser(moveResult.newPlayer2);\n            }\n            setGameState(moveResult.newState);\n          } else {\n            setGameState(moveResult.newState);\n          }\n        }\n      }\n    }\n  });\n  const piece = gameState ? gameState.board[position][0] : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: dropRef,\n    className: `w-square h-square flex items-center justify-center ${squareColor}`,\n    children: piece ? /*#__PURE__*/_jsxDEV(DraggablePiece, {\n      piece: piece\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 16\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n_s3(Square, \"1jnxV3I8yCrFxDl5d89ZxXOnMsY=\", false, function () {\n  return [useDrop];\n});\n_c3 = Square;\nconst DraggablePiece = _ref2 => {\n  _s4();\n  let {\n    piece\n  } = _ref2;\n  const [{\n    isDragging\n  }, dragRef] = useDrag({\n    type: 'piece',\n    item: {\n      type: 'piece',\n      piece\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: dragRef,\n    children: svgIcons[piece.pieceName]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n_s4(DraggablePiece, \"PitWq9MEidg2fcoeQ58axdvz0w4=\", false, function () {\n  return [useDrag];\n});\n_c4 = DraggablePiece;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"ActiveGame\");\n$RefreshReg$(_c2, \"ChessBoard\");\n$RefreshReg$(_c3, \"Square\");\n$RefreshReg$(_c4, \"DraggablePiece\");","map":{"version":3,"names":["React","useEffect","useContext","useCallback","Pawn","Rook","Bishop","Knight","Queen","King","grid","GameContext","useDrag","useDrop","svgIcons","jsxDEV","_jsxDEV","Fragment","_Fragment","ActiveGame","_s","initiatingUser","player1","receivingUser","player2","gameState","setGameState","sendMessage","lastMessage","setPiecesOnBoard","allPieces","alive","concat","allPositions","map","p","position","newGameState","spot","includes","board","handleIncomingData","data","type","Blob","reader","FileReader","onload","result","JSON","parse","readAsText","children","ChessBoard","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s2","chessBoard","row_num","row","col_num","squareColor","push","Square","className","_c2","_ref","_s3","gameId","setInitiatingUser","setReceivingUser","process_move","start","end","piece","isWhite","isWhiteTurn","isValid","newState","newPlayer1","newPlayer2","copyState","startPosition","endPosition","startCol","startRow","parseInt","allMoves","validPawnMoves","validKnightMoves","get_all_straight","get_all_diagonal","validKingMoves","grave","filter","item","name","playerName","forEach","dropRef","accept","drop","monitor","moveResult","moved","message","stringify","pieceColor","ref","DraggablePiece","_c3","_ref2","_s4","isDragging","dragRef","collect","pieceName","_c4","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx"],"sourcesContent":["import React, { useEffect, useContext, useCallback } from 'react';\nimport { Player, Piece, Pawn, Rook, Bishop, Knight, Queen, King, grid } from '../utils/game-utils'\nimport type { GameState } from '../context/GameContext'\nimport { GameContext } from \"../context/GameContext\";\nimport { useDrag, useDrop } from 'react-dnd';\nimport { svgIcons } from '../utils/svg-icons';\n\ninterface MoveResult {\n  isValid: boolean;\n  newState: GameState;\n  newPlayer1: Player | null | undefined;\n  newPlayer2: Player | null | undefined;\n}\n\nexport const ActiveGame: React.FC<{}> = () => {\n\n  const { initiatingUser: player1, receivingUser: player2, gameState, setGameState, sendMessage, lastMessage } = useContext(GameContext);\n\n  const setPiecesOnBoard = useCallback(() => {\n    if (player1 && player2 && gameState) {\n      const allPieces = player1.alive.concat(player2.alive);\n      const allPositions = allPieces.map(p => p.position);\n      const newGameState: GameState = {...gameState};\n      for (const spot in newGameState) {\n        if (allPositions.includes(spot)) {\n          for (const p of allPieces) {\n            if (p.position === spot) {\n              if (newGameState.board) newGameState.board[spot][0] = p;\n            }\n          }\n        }\n      }\n      setGameState(newGameState);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [player1, player2]);\n\n  useEffect(() => {\n    setPiecesOnBoard();\n  }, [setPiecesOnBoard]);\n\n  useEffect(() => {\n\n    function handleIncomingData(data: any) {\n      if (data.type === 'move-made') {\n        setGameState(data.newGameState);\n      }\n    }\n\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [sendMessage, lastMessage, setPiecesOnBoard, setGameState])\n\n  return (\n    <>\n      <ChessBoard />\n    </>\n  );\n};\n\nconst ChessBoard: React.FC<{}> = () => {\n  const { gameState } = useContext(GameContext);\n  const chessBoard = [];\n\n  for (let row_num = 0; row_num < 8; row_num++) {\n    let row = [];\n    for (let col_num = 0; col_num < 8; col_num++) {\n      if (gameState) {\n        let position = grid[col_num][row_num];\n        let squareColor = row_num % 2 === 0 \n        ? col_num % 2 === 0 ? 'bg-black-square' : 'bg-white-square' \n        : col_num % 2 === 0 ? 'bg-white-square' : 'bg-black-square';\n        row.push(\n          <Square key={`${row_num}-${col_num}`} position={position} squareColor={squareColor} />\n        );\n      }\n    }\n    chessBoard.push(<div key={row_num} className=\"w-screen flex items-center justify-center\">{row}</div>);\n  }\n\n  return (\n    <div className=\"chess-board\">\n      {chessBoard}\n    </div>\n  );\n}\n\n// Square component\nconst Square: React.FC<{ position: string, squareColor: string }> = ({ position, squareColor }) => {\n  const { initiatingUser: player1, receivingUser: player2, gameId, gameState, setInitiatingUser, setReceivingUser, setGameState, sendMessage } = useContext(GameContext);\n\n  const process_move = (start: string, end: string): MoveResult => {\n    if (piece.isWhite !== gameState.isWhiteTurn) {\n      return { isValid: false, newState: gameState, newPlayer1: player1, newPlayer2: player2 };\n    }\n    let copyState = {...gameState as GameState};\n    if (copyState.board) {\n      let startPosition = start[0] + start[1];\n      let endPosition = end[0] + end[1];\n      let startCol = copyState.board[startPosition][1];\n      let startRow = 7 - parseInt(startPosition[1]);\n    \n      let piece = copyState.board[startPosition][0];\n      let allMoves: string[] = [];\n      // find what piece we are moving\n      if (piece instanceof Pawn) {\n          allMoves = piece.validPawnMoves(grid, gameState, startCol, startRow);\n      } else if (piece instanceof Knight) {\n          allMoves = piece.validKnightMoves(grid, gameState, startCol, startRow);\n      } else if (piece instanceof Rook) {\n          allMoves = piece.get_all_straight(grid, gameState, startCol, startRow);\n      } else if (piece instanceof Bishop) {\n          allMoves = piece.get_all_diagonal(grid, gameState, startCol, startRow);\n      } else if (piece instanceof Queen) {\n          allMoves = piece.get_all_straight(grid, gameState, startCol, startRow)\n              .concat(piece.get_all_diagonal(grid, gameState, startCol, startRow));\n      } else if (piece instanceof King) {\n          allMoves = piece.validKingMoves(grid, gameState, startCol, startRow);\n      }\n    \n      if (allMoves.includes(endPosition)) {\n        // if the piece moving is taking an opponents piece\n        if (copyState.board[endPosition][0] !== null) {\n          const piece = copyState.board[endPosition][0];\n          // update the alive and grave list for player losing a piece\n          if (piece && player1 && player2) {\n            if (player1.alive.includes(piece)) {\n              player1.grave.push(piece);\n              player1.alive = player1.alive.filter(item => item !== piece);\n            } else {\n              player2.grave.push(piece);\n              player2.alive = player2.alive.filter(item => item !== piece);\n            }\n          }\n        }\n    \n        // update the positions of the pieces on the board\n        copyState.board[endPosition][0] = copyState.board[startPosition][0];\n        copyState.board[startPosition][0] = null;\n        if (copyState.board[endPosition][0] !== null) {\n          let piece = copyState.board[endPosition][0];\n          if (piece && player1 && player2) {\n            piece.position = endPosition;\n            if (player1.name === piece.playerName) {\n              player1.alive.forEach((p) => {\n                  if (p.position === startPosition) {\n                      p.position = endPosition;\n                  }\n              });\n            } else {\n              player2.alive.forEach((p) => {\n                if (p.position === startPosition) {\n                    p.position = endPosition;\n                }\n              });\n            }\n          }\n        }\n      } else {\n        return { isValid: false, newState: copyState, newPlayer1: player1, newPlayer2: player2 };\n      }\n    }\n    return { isValid: true, newState: copyState, newPlayer1: player1, newPlayer2: player2 };\n  }\n\n  const [, dropRef] = useDrop({\n    accept: 'piece',\n    drop: (item: any, monitor) => {\n      if (item) {\n        const start = item.piece.position; \n        const end = position;\n        if (player1 && player2) {\n          const moveResult = process_move(start, end);\n          if (moveResult.isValid) {\n            item.piece.moved = true;\n            const message = JSON.stringify({type: 'valid-move', pieceColor: item.piece.isWhite, playerName: item.piece.playerName, gameId: gameId, newGameState: moveResult.newState })\n            sendMessage(message)\n            if (moveResult.newPlayer1 && moveResult.newPlayer2) {\n              setInitiatingUser(moveResult.newPlayer1);\n              setReceivingUser(moveResult.newPlayer2);\n            }\n            setGameState(moveResult.newState);\n          }\n          else {\n            setGameState(moveResult.newState);\n          }\n        }\n      }\n    },\n  })\n\n  const piece = gameState ? gameState.board[position][0] : null;\n\n  return (\n    <div ref={dropRef} className={`w-square h-square flex items-center justify-center ${squareColor}`}>\n      {piece ? <DraggablePiece piece={piece} /> : null}\n    </div>\n  );\n};\n\nconst DraggablePiece: React.FC<{ piece: Piece }> = ({ piece }) => {\n  const [{ isDragging }, dragRef] = useDrag({\n    type: 'piece',\n    item: { type: 'piece', piece },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  })\n\n  return (\n    <div ref={dragRef}>\n      {svgIcons[piece.pieceName]}\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}