{"ast":null,"code":"export default class ExpressAPI {\n  constructor() {\n    this.createUser = async data => {\n      const response = await fetch('http://localhost:3001/api/auth/register', {\n        method: 'post',\n        body: JSON.stringify(data),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      return this.checkStatus(response);\n    };\n    this.logUserIn = async data => {\n      const response = await fetch('http://localhost:3001/api/auth/login', {\n        method: 'post',\n        body: JSON.stringify(data),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      return this.checkStatus(response);\n    };\n    this.emailExists = async (fieldName, value) => {\n      const response = await fetch('http://localhost:3001/api/user/email-exists', {\n        method: 'post',\n        body: JSON.stringify(data),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      return this.checkStatus(response);\n    };\n    this.usernameExists = async data => {\n      const response = await fetch('http://localhost:3001/api/user/username-exists', {\n        method: 'post',\n        body: JSON.stringify(data),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      return this.checkStatus(response);\n    };\n  }\n  checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      const error = new MyError(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      console.log(error);\n      throw error;\n    }\n  }\n}\nclass MyError extends Error {\n  constructor() {\n    super(...arguments);\n    this.status = void 0;\n    this.response = void 0;\n  }\n}","map":{"version":3,"names":["ExpressAPI","constructor","createUser","data","response","fetch","method","body","JSON","stringify","headers","checkStatus","logUserIn","emailExists","fieldName","value","usernameExists","status","error","MyError","statusText","console","log","Error","arguments"],"sources":["/home/jake/rem-stack/chess/client/src/api/express-api.ts"],"sourcesContent":["export default class ExpressAPI {\n  createUser = async (data: Object): Promise<Response> => {\n    const response = await fetch('http://localhost:3001/api/auth/register', {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    })\n    return this.checkStatus(response)\n  }\n\n  logUserIn = async (data: object): Promise<Response> => {\n    const response = await fetch('http://localhost:3001/api/auth/login', {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    })\n    return this.checkStatus(response)\n  }\n\n  emailExists = async (fieldName: string, value: unknown): Promise<Response> => {\n    const response = await fetch('http://localhost:3001/api/user/email-exists', {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    })\n    return this.checkStatus(response)\n  }\n\n  usernameExists = async (data: object): Promise<Response> => {\n    const response = await fetch('http://localhost:3001/api/user/username-exists', {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    })\n    return this.checkStatus(response)\n  }\n\n  private checkStatus(response: Response): Response {\n    if (response.status >= 200 && response.status < 300) {\n        return response;\n    } else {\n        const error = new MyError(`HTTP Error ${response.statusText}`);\n        error.status = response.statusText;\n        error.response = response;\n        console.log(error);\n        throw error;\n    }\n  }\n}\n\nclass MyError extends Error {\n  status?: string;\n  response?: Response;\n}"],"mappings":"AAAA,eAAe,MAAMA,UAAU,CAAC;EAAAC,YAAA;IAAA,KAC9BC,UAAU,GAAG,MAAOC,IAAY,IAAwB;MACtD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;QACtEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;QAC1BO,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAO,IAAI,CAACC,WAAW,CAACP,QAAQ,CAAC;IACnC,CAAC;IAAA,KAEDQ,SAAS,GAAG,MAAOT,IAAY,IAAwB;MACrD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACnEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;QAC1BO,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAO,IAAI,CAACC,WAAW,CAACP,QAAQ,CAAC;IACnC,CAAC;IAAA,KAEDS,WAAW,GAAG,OAAOC,SAAiB,EAAEC,KAAc,KAAwB;MAC5E,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;QAC1EC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;QAC1BO,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAO,IAAI,CAACC,WAAW,CAACP,QAAQ,CAAC;IACnC,CAAC;IAAA,KAEDY,cAAc,GAAG,MAAOb,IAAY,IAAwB;MAC1D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgD,EAAE;QAC7EC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;QAC1BO,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAO,IAAI,CAACC,WAAW,CAACP,QAAQ,CAAC;IACnC,CAAC;EAAA;EAEOO,WAAWA,CAACP,QAAkB,EAAY;IAChD,IAAIA,QAAQ,CAACa,MAAM,IAAI,GAAG,IAAIb,QAAQ,CAACa,MAAM,GAAG,GAAG,EAAE;MACjD,OAAOb,QAAQ;IACnB,CAAC,MAAM;MACH,MAAMc,KAAK,GAAG,IAAIC,OAAO,CAAE,cAAaf,QAAQ,CAACgB,UAAW,EAAC,CAAC;MAC9DF,KAAK,CAACD,MAAM,GAAGb,QAAQ,CAACgB,UAAU;MAClCF,KAAK,CAACd,QAAQ,GAAGA,QAAQ;MACzBiB,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;MAClB,MAAMA,KAAK;IACf;EACF;AACF;AAEA,MAAMC,OAAO,SAASI,KAAK,CAAC;EAAAtB,YAAA;IAAA,SAAAuB,SAAA;IAAA,KAC1BP,MAAM;IAAA,KACNb,QAAQ;EAAA;AACV"},"metadata":{},"sourceType":"module","externalDependencies":[]}