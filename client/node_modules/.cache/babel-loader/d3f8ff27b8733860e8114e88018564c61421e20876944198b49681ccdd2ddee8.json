{"ast":null,"code":"export class Player {\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let alive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let grave = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    this.name = void 0;\n    this.color = void 0;\n    this.alive = void 0;\n    this.grave = void 0;\n    this.name = name;\n    this.color = color;\n    this.alive = alive;\n    this.grave = grave;\n  }\n}\nexport class Piece {\n  constructor(name, position, moved, player) {\n    this.name = name;\n    this.position = position;\n    this.moved = moved;\n    this.player = player;\n  }\n  get_all_diagonal(grid, state, col, row) {\n    let all_moves = [];\n    all_moves = all_moves.concat(this.recurse_diagonal(col + 1, 8, row + 1, grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col - 1, -1, row - 1, grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col + 1, 8, row - 1, grid, state, [], 'b-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col - 1, -1, row + 1, grid, state, [], 'b-slash'));\n    return all_moves;\n  }\n  recurse_straight(looper, end, anchor, grid, state, all_moves, axis) {\n    if (looper === end) {\n      return all_moves;\n    }\n    let spot = axis === 'vert' ? grid[anchor][looper] : grid[looper][anchor];\n    if (state[spot][0] === null) {\n      all_moves.push(spot);\n      if (end === 8) {\n        return this.recurse_straight(looper + 1, end, anchor, grid, state, all_moves, axis);\n      } else {\n        return this.recurse_straight(looper - 1, end, anchor, grid, state, all_moves, axis);\n      }\n    } else if (state[spot][0].player.color === this.player.color) {\n      return all_moves;\n    } else {\n      all_moves.push(spot);\n      return all_moves;\n    }\n  }\n  recurse_diagonal(col_rec, end, row_rec, grid, state, all_moves, axis) {\n    if (col_rec === 8 || col_rec === -1 || row_rec === 8 || row_rec === -1) {\n      return all_moves;\n    }\n    let spot = grid[col_rec][row_rec];\n    if (state[spot][0] === null) {\n      all_moves.push(spot);\n      if (axis === 'f-slash' && end === 8) {\n        return this.recurse_diagonal(col_rec + 1, end, row_rec + 1, grid, state, all_moves, axis);\n      } else if (axis === 'f-slash' && end !== 8) {\n        return this.recurse_diagonal(col_rec - 1, end, row_rec - 1, grid, state, all_moves, axis);\n      } else if (axis !== 'f-slash' && end === 8) {\n        return this.recurse_diagonal(col_rec + 1, end, row_rec - 1, grid, state, all_moves, axis);\n      } else {\n        return this.recurse_diagonal(col_rec - 1, end, row_rec + 1, grid, state, all_moves, axis);\n      }\n    } else if (state[spot][0].player.color === this.player.color) {\n      return all_moves;\n    } else {\n      all_moves.push(spot);\n      return all_moves;\n    }\n  }\n}\nexport class Pawn extends Piece {\n  validPawnMoves(grid, state, col, row) {\n    let all_moves = [];\n    if (state[grid[col][row - 1]][0] === null) {\n      all_moves.push(grid[col][row - 1]);\n    }\n    let attacks = [grid[col - 1][row - 1], grid[col + 1][row - 1]];\n    for (let d of attacks) {\n      if (state[d][0] === null) {\n        continue;\n      } else if (!this.player.alive.includes(state[d][0])) {\n        all_moves.push(d);\n      } else {\n        continue;\n      }\n    }\n    if (state[grid[col][row]].moved === 0) {\n      if (this.player.color === 'black') {\n        all_moves.push(grid[col][row - 2]);\n      } else {\n        all_moves.push(grid[col][row + 2]);\n      }\n    }\n    return all_moves;\n  }\n}\nexport class Rook extends Piece {}\nexport class Knight extends Piece {\n  validKnightMoves(grid, state, col, row) {\n    const allMoves = [];\n    const potentialMoves = [[col - 2, row - 1], [col - 2, row + 1], [col + 2, row - 1], [col + 2, row + 1], [col + 1, row + 2], [col - 1, row + 2], [col + 1, row - 2], [col - 1, row - 2]];\n    for (const move of potentialMoves) {\n      var _this$player;\n      if (move[0] < 0 || move[0] > 7 || move[1] < 0 || move[1] > 7) {\n        continue;\n      }\n      const spot = grid[move[0]][move[1]];\n      if (state[spot][0] === null || state[spot][0].player.color !== ((_this$player = this.player) === null || _this$player === void 0 ? void 0 : _this$player.color)) {\n        allMoves.push(spot);\n      }\n    }\n    return allMoves;\n  }\n}\nexport class Bishop extends Piece {}\nexport class Queen extends Piece {}\nexport class King extends Piece {\n  validKingMoves(grid, state, col, row) {\n    const cords = [[col, row + 1], [col - 1, row + 1], [col + 1, row + 1], [col, row - 1], [col - 1, row - 1], [col + 1, row - 1], [col + 1, row], [col - 1, row]];\n    const allMoves = [];\n    for (const c of cords) {\n      if (c[0] === 8 || c[0] === -1 || c[1] === 8 || c[1] === -1) {\n        continue;\n      } else {\n        var _this$player2;\n        const spot = grid[c[0]][c[1]];\n        if (state[spot][0] === null) {\n          allMoves.push(spot);\n        } else if (state[spot][0].player.color === ((_this$player2 = this.player) === null || _this$player2 === void 0 ? void 0 : _this$player2.color)) {\n          continue;\n        } else {\n          allMoves.push(spot);\n        }\n      }\n    }\n    return allMoves;\n  }\n}\nexport const assignWhitePieces = (grid, player) => {\n  for (let col of grid) {\n    player.alive.push(new Pawn('wP', col[6], false, player));\n  }\n  player.alive.push(new Rook('wR', grid[0][7], false, player), new Knight('wN', grid[1][7], false, player), new Bishop('wB', grid[2][7], false, player), new Queen('wQ', grid[3][7], false, player), new King('wK', grid[4][7], false, player), new Bishop('wB', grid[5][7], false, player), new Knight('wN', grid[6][7], false, player), new Rook('wR', grid[7][7], false, player));\n};\nexport const assignBlackPieces = (grid, player) => {\n  for (let col of grid) {\n    player.alive.push(new Pawn('bP', col[1], false, player));\n  }\n  player.alive.push(new Rook('bR', grid[0][0], false, player), new Knight('bN', grid[1][0], false, player), new Bishop('bB', grid[2][0], false, player), new Queen('bQ', grid[3][0], false, player), new King('bK', grid[4][0], false, player), new Bishop('bB', grid[5][0], false, player), new Knight('bN', grid[6][0], false, player), new Rook('bR', grid[7][0], false, player));\n};","map":{"version":3,"names":["Player","constructor","name","arguments","length","undefined","color","alive","grave","Piece","position","moved","player","get_all_diagonal","grid","state","col","row","all_moves","concat","recurse_diagonal","recurse_straight","looper","end","anchor","axis","spot","push","col_rec","row_rec","Pawn","validPawnMoves","attacks","d","includes","Rook","Knight","validKnightMoves","allMoves","potentialMoves","move","_this$player","Bishop","Queen","King","validKingMoves","cords","c","_this$player2","assignWhitePieces","assignBlackPieces"],"sources":["/home/jake/rem-stack/chess/client/src/utils/game-utils.ts"],"sourcesContent":["export interface Player {\n  name: string;\n  color: string;\n  alive: Piece[];\n  grace: Piece[];\n}\n\nexport class Player {\n  name: string;\n  color: string;\n  alive: Piece[];\n  grave: Piece[];\n\n  constructor(name: string = '', color: string = '', alive: Piece[] = [], grave: Piece[] = []) {\n    this.name = name;\n    this.color = color;\n    this.alive = alive;\n    this.grave = grave;\n  }\n}\n\nexport abstract class Piece {\n  constructor(\n    public name: string,\n    public position: string,\n    public moved: boolean,\n    public player: Player,\n  ) { }\n\n  get_all_diagonal(grid: string[][], state: any, col: number, row: number): string[] {\n    let all_moves: string[] = [];\n    all_moves = all_moves.concat(this.recurse_diagonal((col + 1), 8, (row + 1), grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col - 1), (-1), (row - 1), grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col + 1), 8, (row - 1), grid, state, [], 'b-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col - 1), (-1), (row + 1), grid, state, [], 'b-slash'));\n    return all_moves;\n  }\n\n  recurse_straight(looper: number, end: number, anchor: number, grid: string[][], state: any, all_moves: string[], axis: string): string[] {\n    if (looper === end) {\n        return all_moves;\n    }\n    let spot: string = axis === 'vert' ? grid[anchor][looper] : grid[looper][anchor];\n    if (state[spot][0] === null) {\n        all_moves.push(spot);\n        if (end === 8) {\n            return this.recurse_straight((looper + 1), end, anchor, grid, state, all_moves, axis);\n        } else {\n            return this.recurse_straight((looper - 1), end, anchor, grid, state, all_moves, axis);\n        }\n    } else if (state[spot][0].player.color === this.player.color) {\n        return all_moves;\n    } else {\n        all_moves.push(spot);\n        return all_moves;\n    }\n  }\n\n  recurse_diagonal(col_rec: number, end: number, row_rec: number, grid: string[][], state: any, all_moves: string[], axis: string): string[] {\n    if (col_rec === 8 || col_rec === (-1) || row_rec === 8 || row_rec === (-1)) {\n        return all_moves;\n    }\n    let spot: string = grid[col_rec][row_rec];\n    if (state[spot][0] === null) {\n        all_moves.push(spot);\n        if (axis === 'f-slash' && end === 8) {\n            return this.recurse_diagonal((col_rec + 1), end, (row_rec + 1), grid, state, all_moves, axis);\n        } else if (axis === 'f-slash' && end !== 8) {\n            return this.recurse_diagonal((col_rec - 1), end, (row_rec - 1), grid, state, all_moves, axis);\n        } else if (axis !== 'f-slash' && end === 8) {\n            return this.recurse_diagonal((col_rec + 1), end, (row_rec - 1), grid, state, all_moves, axis);\n        } else {\n            return this.recurse_diagonal((col_rec - 1), end, (row_rec + 1), grid, state, all_moves, axis);\n        }\n    } else if (state[spot][0].player.color === this.player.color) {\n        return all_moves;\n    } else {\n        all_moves.push(spot);\n        return all_moves;\n    }\n  }\n}\n\nexport class Pawn extends Piece {\n  validPawnMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    let all_moves: string[] = [];\n    if (state[grid[col][row - 1]][0] === null) {\n        all_moves.push(grid[col][row - 1]);\n    }\n\n    let attacks: string[] = [grid[(col - 1)][(row - 1)], grid[(col + 1)][(row - 1)]];\n    for (let d of attacks) {\n        if (state[d][0] === null) {\n            continue;\n        } else if (!this.player.alive.includes(state[d][0])) {\n            all_moves.push(d);\n        } else {\n            continue;\n        }\n    }\n\n    if (state[grid[col][row]].moved === 0) {\n        if (this.player.color === 'black') {\n            all_moves.push(grid[col][(row - 2)]);\n        } else {\n            all_moves.push(grid[col][(row + 2)]);\n        }\n    }\n    return all_moves;\n}\n}\n\nexport class Rook extends Piece {}\n\nexport class Knight extends Piece {\n  validKnightMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    const allMoves: string[] = [];\n    \n    const potentialMoves: [number, number][] = [\n      [col - 2, row - 1], [col - 2, row + 1],\n      [col + 2, row - 1], [col + 2, row + 1],\n      [col + 1, row + 2], [col - 1, row + 2],\n      [col + 1, row - 2], [col - 1, row - 2]\n    ];\n\n    for (const move of potentialMoves) {\n      if (move[0] < 0 || move[0] > 7 || move[1] < 0 || move[1] > 7) {\n        continue;\n      }\n\n      const spot = grid[move[0]][move[1]];\n      if (state[spot][0] === null || state[spot][0].player.color !== this.player?.color) {\n        allMoves.push(spot);\n      }\n    }\n\n    return allMoves;\n  }\n}\n\nexport class Bishop extends Piece {\n}\n\nexport class Queen extends Piece {}\n\nexport class King extends Piece {\n  validKingMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    const cords = [\n      [col, (row + 1)],\n      [(col - 1), (row + 1)],\n      [(col + 1), (row + 1)],\n      [col, (row - 1)],\n      [(col - 1), (row - 1)],\n      [(col + 1), (row - 1)],\n      [(col + 1), row],\n      [(col - 1), row]\n    ];\n\n    const allMoves: string[] = [];\n    for (const c of cords) {\n      if (c[0] === 8 || c[0] === -1 || c[1] === 8 || c[1] === -1) {\n        continue;\n      } else {\n        const spot = grid[c[0]][c[1]];\n        if (state[spot][0] === null) {\n          allMoves.push(spot);\n        } else if (state[spot][0].player.color === this.player?.color) {\n          continue;\n        } else {\n          allMoves.push(spot);\n        }\n      }\n    }\n\n    return allMoves;\n  }\n}\n\nexport const assignWhitePieces = (grid: string[][], player: Player): void => {\n  for (let col of grid) {\n    player.alive.push(new Pawn('wP', col[6], false, player));\n  }\n  player.alive.push(\n    new Rook('wR', grid[0][7], false, player),\n    new Knight('wN', grid[1][7], false, player),\n    new Bishop('wB', grid[2][7], false, player),\n    new Queen('wQ', grid[3][7], false, player),\n    new King('wK', grid[4][7], false, player),\n    new Bishop('wB', grid[5][7], false, player),\n    new Knight('wN', grid[6][7], false, player),\n    new Rook('wR', grid[7][7], false, player)\n  )\n}\n\nexport const assignBlackPieces = (grid: string[][], player: Player): void => {\n  for (let col of grid) {\n      player.alive.push(new Pawn('bP', col[1], false, player));\n  }\n  player.alive.push(\n      new Rook('bR', grid[0][0], false, player),\n      new Knight('bN', grid[1][0], false, player),\n      new Bishop('bB', grid[2][0], false, player),\n      new Queen('bQ', grid[3][0], false, player),\n      new King('bK', grid[4][0], false, player),\n      new Bishop('bB', grid[5][0], false, player),\n      new Knight('bN', grid[6][0], false, player),\n      new Rook('bR', grid[7][0], false, player)\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}