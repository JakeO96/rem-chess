{"ast":null,"code":"export default class ExpressAPI {\n  constructor() {\n    this.doesUsernameExist = async () => {\n      const response = await fetch('http://localhost:3001/', {\n        method: 'get',\n        headers: {\n          //'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      return this.checkStatus(response);\n    };\n    this.doesUsernameExist2 = async data => {\n      const response = await fetch('http://localhost:3001/auth/does-username-exist', {\n        method: 'get',\n        body: JSON.stringify(data),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      return this.checkStatus(response);\n    };\n  }\n  checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      const error = new MyError(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      console.log(error);\n      throw error;\n    }\n  }\n}\nclass MyError extends Error {\n  constructor() {\n    super(...arguments);\n    this.status = void 0;\n    this.response = void 0;\n  }\n}","map":{"version":3,"names":["ExpressAPI","constructor","doesUsernameExist","response","fetch","method","headers","checkStatus","doesUsernameExist2","data","body","JSON","stringify","status","error","MyError","statusText","console","log","Error","arguments"],"sources":["/home/jake/rem-stack/chess/client/src/api/express-api.ts"],"sourcesContent":["export default class ExpressAPI {\n  doesUsernameExist = async (): Promise<Response> => {\n    const response = await fetch('http://localhost:3001/', {\n      method: 'get',\n      headers: {\n        //'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    })\n    return this.checkStatus(response)\n  }\n\n  doesUsernameExist2 = async (data: String): Promise<Response> => {\n    const response = await fetch('http://localhost:3001/auth/does-username-exist', {\n      method: 'get',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    })\n    return this.checkStatus(response)\n  }\n\n  private checkStatus(response: Response): Response {\n    if (response.status >= 200 && response.status < 300) {\n        return response;\n    } else {\n        const error = new MyError(`HTTP Error ${response.statusText}`);\n        error.status = response.statusText;\n        error.response = response;\n        console.log(error);\n        throw error;\n    }\n  }\n}\n\nclass MyError extends Error {\n  status?: string;\n  response?: Response;\n}"],"mappings":"AAAA,eAAe,MAAMA,UAAU,CAAC;EAAAC,YAAA;IAAA,KAC9BC,iBAAiB,GAAG,YAA+B;MACjD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,EAAE;QACrDC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP;UACA,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAO,IAAI,CAACC,WAAW,CAACJ,QAAQ,CAAC;IACnC,CAAC;IAAA,KAEDK,kBAAkB,GAAG,MAAOC,IAAY,IAAwB;MAC9D,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgD,EAAE;QAC7EC,MAAM,EAAE,KAAK;QACbK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;QAC1BH,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAO,IAAI,CAACC,WAAW,CAACJ,QAAQ,CAAC;IACnC,CAAC;EAAA;EAEOI,WAAWA,CAACJ,QAAkB,EAAY;IAChD,IAAIA,QAAQ,CAACU,MAAM,IAAI,GAAG,IAAIV,QAAQ,CAACU,MAAM,GAAG,GAAG,EAAE;MACjD,OAAOV,QAAQ;IACnB,CAAC,MAAM;MACH,MAAMW,KAAK,GAAG,IAAIC,OAAO,CAAE,cAAaZ,QAAQ,CAACa,UAAW,EAAC,CAAC;MAC9DF,KAAK,CAACD,MAAM,GAAGV,QAAQ,CAACa,UAAU;MAClCF,KAAK,CAACX,QAAQ,GAAGA,QAAQ;MACzBc,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;MAClB,MAAMA,KAAK;IACf;EACF;AACF;AAEA,MAAMC,OAAO,SAASI,KAAK,CAAC;EAAAlB,YAAA;IAAA,SAAAmB,SAAA;IAAA,KAC1BP,MAAM;IAAA,KACNV,QAAQ;EAAA;AACV"},"metadata":{},"sourceType":"module","externalDependencies":[]}