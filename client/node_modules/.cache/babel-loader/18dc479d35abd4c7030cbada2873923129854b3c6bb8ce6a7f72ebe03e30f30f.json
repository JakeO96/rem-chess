{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React, { useEffect, useContext, useCallback } from 'react';\nimport { Pawn, Rook, Bishop, Knight, Queen, King, grid } from '../utils/game-utils';\nimport { GameContext } from \"../context/GameContext\";\nimport { useDrag, useDrop } from 'react-dnd';\nimport { svgIcons } from '../utils/svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ActiveGame = () => {\n  _s();\n  const {\n    challenger: player1,\n    opponent: player2,\n    gameState,\n    setGameState,\n    sendMessage,\n    lastMessage\n  } = useContext(GameContext);\n  const setPiecesOnBoard = useCallback(() => {\n    if (player1 && player2 && gameState) {\n      const allPieces = player1.alive.concat(player2.alive);\n      const allPositions = allPieces.map(p => p.position);\n      const newGameState = {\n        ...gameState\n      };\n      for (const spot in newGameState.board) {\n        if (allPositions.includes(spot)) {\n          for (const p of allPieces) {\n            if (p.position === spot) {\n              if (newGameState.board) newGameState.board[spot][0] = p;\n            }\n          }\n        }\n      }\n      setGameState(newGameState);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [player1, player2]);\n  useEffect(() => {\n    setPiecesOnBoard();\n  }, [setPiecesOnBoard]);\n  useEffect(() => {\n    function handleIncomingData(data) {\n      if (data.type === 'move-made') {\n        setGameState(data.newGameState);\n      }\n    }\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [sendMessage, lastMessage, setGameState]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ChessBoard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ActiveGame, \"x47IHf38UhqWWgplZ4UGf1mcc2Y=\");\n_c = ActiveGame;\nconst ChessBoard = () => {\n  _s2();\n  const {\n    challenger: challenger,\n    opponent,\n    gameState\n  } = useContext(GameContext);\n  const chessBoard = [];\n  for (let row_num = 0; row_num < 8; row_num++) {\n    let row = [];\n    for (let col_num = 0; col_num < 8; col_num++) {\n      if (gameState) {\n        let position = grid[col_num][row_num];\n        let squareColor = row_num % 2 === 0 ? col_num % 2 === 0 ? 'bg-black-square' : 'bg-white-square' : col_num % 2 === 0 ? 'bg-white-square' : 'bg-black-square';\n        row.push( /*#__PURE__*/_jsxDEV(Square, {\n          position: position,\n          squareColor: squareColor\n        }, `${row_num}-${col_num}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    chessBoard.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-screen flex items-center justify-center\",\n      children: row\n    }, row_num, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chess-board\",\n    children: [challenger && opponent ? challenger.color === 'black' ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"noct-teal\",\n      children: [challenger.name, \" - \", challenger.color]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 64\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"noct-teal\",\n      children: [opponent.name, \" - \", opponent.color]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 134\n    }, this) : null, chessBoard, challenger && opponent ? challenger.color === 'white' ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"noct-teal\",\n      children: [challenger.name, \" - \", challenger.color]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 64\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"noct-teal\",\n      children: [opponent.name, \" - \", opponent.color]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 134\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n// Square component\n_s2(ChessBoard, \"zG3vvnRV14fHdViZXEVBdWLiIA8=\");\n_c2 = ChessBoard;\nconst Square = _ref => {\n  _s3();\n  let {\n    position,\n    squareColor\n  } = _ref;\n  const {\n    challenger: player1,\n    opponent: player2,\n    gameId,\n    gameState,\n    setInitiatingUser,\n    setReceivingUser,\n    setGameState,\n    sendMessage\n  } = useContext(GameContext);\n  const process_move = (start, end) => {\n    let copyState = {\n      ...gameState\n    };\n    if (copyState.board) {\n      let startPosition = start[0] + start[1];\n      let endPosition = end[0] + end[1];\n      let startCol = copyState.board[startPosition][1];\n      let startRow = 7 - parseInt(startPosition[1]);\n      let piece = copyState.board[startPosition][0];\n      if (piece) {\n        if (piece.playerColor === 'white') {\n          if (piece.isWhite !== copyState.isWhiteTurn) {\n            return {\n              isValid: false,\n              newState: copyState,\n              newPlayer1: player1,\n              newPlayer2: player2\n            };\n          }\n        }\n      }\n      const board = copyState.board;\n      let allMoves = [];\n      // find what piece we are moving\n      if (piece instanceof Pawn) {\n        allMoves = piece.validPawnMoves(grid, board, startCol, startRow);\n      } else if (piece instanceof Knight) {\n        allMoves = piece.validKnightMoves(grid, board, startCol, startRow);\n      } else if (piece instanceof Rook) {\n        allMoves = piece.get_all_straight(grid, board, startCol, startRow);\n      } else if (piece instanceof Bishop) {\n        allMoves = piece.get_all_diagonal(grid, board, startCol, startRow);\n      } else if (piece instanceof Queen) {\n        allMoves = piece.get_all_straight(grid, board, startCol, startRow).concat(piece.get_all_diagonal(grid, board, startCol, startRow));\n      } else if (piece instanceof King) {\n        allMoves = piece.validKingMoves(grid, board, startCol, startRow);\n      }\n      if (allMoves.includes(endPosition)) {\n        // if the piece moving is taking an opponents piece\n        if (board[endPosition][0] !== null) {\n          const endSpotpiece = board[endPosition][0];\n          // update the alive and grave list for player losing a piece\n          if (endSpotpiece && player1 && player2) {\n            if (player1.alive.includes(endSpotpiece)) {\n              player1.grave.push(endSpotpiece);\n              player1.alive = player1.alive.filter(item => item !== endSpotpiece);\n            } else {\n              player2.grave.push(endSpotpiece);\n              player2.alive = player2.alive.filter(item => item !== endSpotpiece);\n            }\n          }\n        }\n\n        // update the positions of the pieces on the board\n        board[endPosition][0] = board[startPosition][0];\n        board[startPosition][0] = null;\n        if (board[endPosition][0] !== null) {\n          let piece = board[endPosition][0];\n          if (piece && player1 && player2) {\n            piece.position = endPosition;\n            if (player1.name === piece.playerName) {\n              player1.alive.forEach(p => {\n                if (p.position === startPosition) {\n                  p.position = endPosition;\n                }\n              });\n            } else {\n              player2.alive.forEach(p => {\n                if (p.position === startPosition) {\n                  p.position = endPosition;\n                }\n              });\n            }\n          }\n        }\n      } else {\n        return {\n          isValid: false,\n          newState: copyState,\n          newPlayer1: player1,\n          newPlayer2: player2\n        };\n      }\n    }\n    const newTurn = copyState.isWhiteTurn ? false : true;\n    copyState.isWhiteTurn = newTurn;\n    return {\n      isValid: true,\n      newState: copyState,\n      newPlayer1: player1,\n      newPlayer2: player2\n    };\n  };\n  const [, dropRef] = useDrop({\n    accept: 'piece',\n    drop: (item, monitor) => {\n      if (item) {\n        const start = item.piece.position;\n        const end = position;\n        if (player1 && player2) {\n          const moveResult = process_move(start, end);\n          if (moveResult.isValid) {\n            item.piece.moved = true;\n            const message = JSON.stringify({\n              type: 'valid-move',\n              pieceColor: item.piece.isWhite,\n              playerName: item.piece.playerName,\n              gameId: gameId,\n              newGameState: moveResult.newState\n            });\n            sendMessage(message);\n            if (moveResult.newPlayer1 && moveResult.newPlayer2) {\n              setInitiatingUser(moveResult.newPlayer1);\n              setReceivingUser(moveResult.newPlayer2);\n            }\n            setGameState(moveResult.newState);\n          } else {\n            alert('inValid Move');\n          }\n        }\n      }\n    }\n  });\n  const piece = gameState ? gameState.board[position][0] : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: dropRef,\n    className: `w-square h-square flex items-center justify-center ${squareColor}`,\n    children: piece ? /*#__PURE__*/_jsxDEV(DraggablePiece, {\n      piece: piece\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 16\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n};\n_s3(Square, \"tbN8IvCLJr8CTKv7k4DqgVf4St8=\", false, function () {\n  return [useDrop];\n});\n_c3 = Square;\nconst DraggablePiece = _ref2 => {\n  _s4();\n  let {\n    piece\n  } = _ref2;\n  const [{\n    isDragging\n  }, dragRef] = useDrag({\n    type: 'piece',\n    item: {\n      type: 'piece',\n      piece\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: dragRef,\n    children: svgIcons[piece.pieceName]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n_s4(DraggablePiece, \"PitWq9MEidg2fcoeQ58axdvz0w4=\", false, function () {\n  return [useDrag];\n});\n_c4 = DraggablePiece;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"ActiveGame\");\n$RefreshReg$(_c2, \"ChessBoard\");\n$RefreshReg$(_c3, \"Square\");\n$RefreshReg$(_c4, \"DraggablePiece\");","map":{"version":3,"names":["React","useEffect","useContext","useCallback","Pawn","Rook","Bishop","Knight","Queen","King","grid","GameContext","useDrag","useDrop","svgIcons","jsxDEV","_jsxDEV","Fragment","_Fragment","ActiveGame","_s","challenger","player1","opponent","player2","gameState","setGameState","sendMessage","lastMessage","setPiecesOnBoard","allPieces","alive","concat","allPositions","map","p","position","newGameState","spot","board","includes","handleIncomingData","data","type","Blob","reader","FileReader","onload","result","JSON","parse","readAsText","children","ChessBoard","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s2","chessBoard","row_num","row","col_num","squareColor","push","Square","className","color","name","_c2","_ref","_s3","gameId","setInitiatingUser","setReceivingUser","process_move","start","end","copyState","startPosition","endPosition","startCol","startRow","parseInt","piece","playerColor","isWhite","isWhiteTurn","isValid","newState","newPlayer1","newPlayer2","allMoves","validPawnMoves","validKnightMoves","get_all_straight","get_all_diagonal","validKingMoves","endSpotpiece","grave","filter","item","playerName","forEach","newTurn","dropRef","accept","drop","monitor","moveResult","moved","message","stringify","pieceColor","alert","ref","DraggablePiece","_c3","_ref2","_s4","isDragging","dragRef","collect","pieceName","_c4","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx"],"sourcesContent":["import React, { useEffect, useContext, useCallback } from 'react';\nimport { Player, Piece, Pawn, Rook, Bishop, Knight, Queen, King, grid } from '../utils/game-utils'\nimport type { GameState } from '../context/GameContext'\nimport { GameContext } from \"../context/GameContext\";\nimport { useDrag, useDrop } from 'react-dnd';\nimport { svgIcons } from '../utils/svg-icons';\n\ninterface MoveResult {\n  isValid: boolean;\n  newState: GameState;\n  newPlayer1: Player | null | undefined;\n  newPlayer2: Player | null | undefined;\n}\n\nexport const ActiveGame: React.FC<{}> = () => {\n\n  const { challenger: player1, opponent: player2, gameState, setGameState, sendMessage, lastMessage } = useContext(GameContext);\n\n  const setPiecesOnBoard = useCallback(() => {\n    if (player1 && player2 && gameState) {\n      const allPieces = player1.alive.concat(player2.alive);\n      const allPositions = allPieces.map(p => p.position);\n      const newGameState: GameState = {...gameState};\n      for (const spot in newGameState.board) {\n        if (allPositions.includes(spot)) {\n          for (const p of allPieces) {\n            if (p.position === spot) {\n              if (newGameState.board) newGameState.board[spot][0] = p;\n            }\n          }\n        }\n      }\n      setGameState(newGameState);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [player1, player2]);\n\n  useEffect(() => {\n    setPiecesOnBoard();\n  }, [setPiecesOnBoard]);\n\n  useEffect(() => {\n\n    function handleIncomingData(data: any) {\n      if (data.type === 'move-made') {\n        setGameState(data.newGameState);\n      }\n    }\n\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [sendMessage, lastMessage, setGameState])\n\n  return (\n    <>\n      <ChessBoard />\n    </>\n  );\n};\n\nconst ChessBoard: React.FC<{}> = () => {\n  const { challenger: challenger, opponent, gameState } = useContext(GameContext);\n  const chessBoard = [];\n\n  for (let row_num = 0; row_num < 8; row_num++) {\n    let row = [];\n    for (let col_num = 0; col_num < 8; col_num++) {\n      if (gameState) {\n        let position = grid[col_num][row_num];\n        let squareColor = row_num % 2 === 0 \n        ? col_num % 2 === 0 ? 'bg-black-square' : 'bg-white-square' \n        : col_num % 2 === 0 ? 'bg-white-square' : 'bg-black-square';\n        row.push(\n          <Square key={`${row_num}-${col_num}`} position={position} squareColor={squareColor} />\n        );\n      }\n    }\n    chessBoard.push(<div key={row_num} className=\"w-screen flex items-center justify-center\">{row}</div>);\n  }\n\n  return (\n    <div className=\"chess-board\">\n      {challenger && opponent ? challenger.color === 'black' ? <p className=\"noct-teal\">{challenger.name} - {challenger.color}</p> : <p className=\"noct-teal\">{opponent.name} - {opponent.color}</p> : null}\n      {chessBoard}\n      {challenger && opponent ? challenger.color === 'white' ? <p className=\"noct-teal\">{challenger.name} - {challenger.color}</p> : <p className=\"noct-teal\">{opponent.name} - {opponent.color}</p>: null}\n    </div>\n  );\n}\n\n// Square component\nconst Square: React.FC<{ position: string, squareColor: string }> = ({ position, squareColor }) => {\n  const { challenger: player1, opponent: player2, gameId, gameState, setInitiatingUser, setReceivingUser, setGameState, sendMessage } = useContext(GameContext);\n\n  const process_move = (start: string, end: string): MoveResult => {\n    let copyState = {...gameState as GameState};\n    if (copyState.board) {\n      let startPosition = start[0] + start[1];\n      let endPosition = end[0] + end[1];\n      let startCol = copyState.board[startPosition][1];\n      let startRow = 7 - parseInt(startPosition[1]);\n    \n      let piece = copyState.board[startPosition][0];\n      if (piece) {\n        if (piece.playerColor === 'white') {\n          if (piece.isWhite !== copyState.isWhiteTurn) {\n            return { isValid: false, newState: copyState, newPlayer1: player1, newPlayer2: player2 };\n          }\n        }\n      }\n      const board = copyState.board;\n      let allMoves: string[] = [];\n      // find what piece we are moving\n      if (piece instanceof Pawn) {\n          allMoves = piece.validPawnMoves(grid, board, startCol, startRow);\n      } else if (piece instanceof Knight) {\n          allMoves = piece.validKnightMoves(grid, board, startCol, startRow);\n      } else if (piece instanceof Rook) {\n          allMoves = piece.get_all_straight(grid, board, startCol, startRow);\n      } else if (piece instanceof Bishop) {\n          allMoves = piece.get_all_diagonal(grid, board, startCol, startRow);\n      } else if (piece instanceof Queen) {\n          allMoves = piece.get_all_straight(grid, board, startCol, startRow)\n              .concat(piece.get_all_diagonal(grid, board, startCol, startRow));\n      } else if (piece instanceof King) {\n          allMoves = piece.validKingMoves(grid, board, startCol, startRow);\n      }\n    \n      if (allMoves.includes(endPosition)) {\n        // if the piece moving is taking an opponents piece\n        if (board[endPosition][0] !== null) {\n          const endSpotpiece = board[endPosition][0];\n          // update the alive and grave list for player losing a piece\n          if (endSpotpiece && player1 && player2) {\n            if (player1.alive.includes(endSpotpiece)) {\n              player1.grave.push(endSpotpiece);\n              player1.alive = player1.alive.filter(item => item !== endSpotpiece);\n            } else {\n              player2.grave.push(endSpotpiece);\n              player2.alive = player2.alive.filter(item => item !== endSpotpiece);\n            }\n          }\n        }\n    \n        // update the positions of the pieces on the board\n        board[endPosition][0] = board[startPosition][0];\n        board[startPosition][0] = null;\n        if (board[endPosition][0] !== null) {\n          let piece = board[endPosition][0];\n          if (piece && player1 && player2) {\n            piece.position = endPosition;\n            if (player1.name === piece.playerName) {\n              player1.alive.forEach((p) => {\n                  if (p.position === startPosition) {\n                      p.position = endPosition;\n                  }\n              });\n            } else {\n              player2.alive.forEach((p) => {\n                if (p.position === startPosition) {\n                    p.position = endPosition;\n                }\n              });\n            }\n          }\n        }\n      } else {\n        return { isValid: false, newState: copyState, newPlayer1: player1, newPlayer2: player2 };\n      }\n    }\n    const newTurn = copyState.isWhiteTurn ? false : true;\n    copyState.isWhiteTurn = newTurn;\n    return { isValid: true, newState: copyState, newPlayer1: player1, newPlayer2: player2 };\n  }\n\n  const [, dropRef] = useDrop({\n    accept: 'piece',\n    drop: (item: any, monitor) => {\n      if (item) {\n        const start = item.piece.position; \n        const end = position;\n        if (player1 && player2) {\n          const moveResult = process_move(start, end);\n          if (moveResult.isValid) {\n            item.piece.moved = true;\n            const message = JSON.stringify({type: 'valid-move', pieceColor: item.piece.isWhite, playerName: item.piece.playerName, gameId: gameId, newGameState: moveResult.newState })\n            sendMessage(message)\n            if (moveResult.newPlayer1 && moveResult.newPlayer2) {\n              setInitiatingUser(moveResult.newPlayer1);\n              setReceivingUser(moveResult.newPlayer2);\n            }\n            setGameState(moveResult.newState);\n          }\n          else {\n            alert('inValid Move');\n          }\n        }\n      }\n    },\n  })\n\n  const piece = gameState ? gameState.board[position][0] : null;\n\n  return (\n    <div ref={dropRef} className={`w-square h-square flex items-center justify-center ${squareColor}`}>\n      {piece ? <DraggablePiece piece={piece} /> : null}\n    </div>\n  );\n};\n\nconst DraggablePiece: React.FC<{ piece: Piece }> = ({ piece }) => {\n  const [{ isDragging }, dragRef] = useDrag({\n    type: 'piece',\n    item: { type: 'piece', piece },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  })\n\n  return (\n    <div ref={dragRef}>\n      {svgIcons[piece.pieceName]}\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}