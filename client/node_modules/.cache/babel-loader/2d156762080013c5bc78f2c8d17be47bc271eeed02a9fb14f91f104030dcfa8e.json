{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx\",\n  _s = $RefreshSig$();\nimport { Pawn, Rook, Knight, Bishop, Queen, King, assignBlackPieces, assignWhitePieces } from '../utils/game-utils';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst grid = [['A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1', 'A0'], ['B7', 'B6', 'B5', 'B4', 'B3', 'B2', 'B1', 'B0'], ['C7', 'C6', 'C5', 'C4', 'C3', 'C2', 'C1', 'C0'], ['D7', 'D6', 'D5', 'D4', 'D3', 'D2', 'D1', 'D0'], ['E7', 'E6', 'E5', 'E4', 'E3', 'E2', 'E1', 'E0'], ['F7', 'F6', 'F5', 'F4', 'F3', 'F2', 'F1', 'F0'], ['G7', 'G6', 'G5', 'G4', 'G3', 'G2', 'G1', 'G0'], ['H7', 'H6', 'H5', 'H4', 'H3', 'H2', 'H1', 'H0']];\nexport const ActiveGame = _ref => {\n  _s();\n  let {\n    player1,\n    player2\n  } = _ref;\n  const [gameState, setGameState] = useState({});\n  useEffect(() => {\n    produceEmptyBoard();\n    randomlyAssignWhite();\n    setPiecesOnBoard();\n  }, []);\n  const produceEmptyBoard = () => {\n    let cCnt = 0;\n    const newGameState = {};\n    for (const col of grid) {\n      for (const cord of col) {\n        newGameState[cord] = [null, cCnt];\n      }\n      cCnt += 1;\n    }\n    setGameState(newGameState);\n  };\n  const randomlyAssignWhite = () => {\n    const r = Math.floor(Math.random() * 2);\n    if (r === 0) {\n      assignWhitePieces(grid, player1);\n      player1.color = 'white';\n      assignBlackPieces(grid, player2);\n      player2.color = 'black';\n    } else {\n      assignWhitePieces(grid, player2);\n      player2.color = 'white';\n      assignBlackPieces(grid, player1);\n      player1.color = 'black';\n    }\n  };\n  const setPiecesOnBoard = () => {\n    const allPieces = player1.alive.concat(player2.alive);\n    const allPositions = allPieces.map(p => p.position);\n    const newGameState = {\n      ...gameState\n    };\n    for (const spot in newGameState) {\n      if (allPositions.includes(spot)) {\n        for (const p of allPieces) {\n          if (p.position === spot) {\n            newGameState[spot][0] = p;\n          }\n        }\n      }\n    }\n    setGameState(newGameState);\n  };\n  const process_move = (start, end) => {\n    let copy_state = {\n      ...gameState\n    };\n    let adj_start = start[0] + (parseInt(start[1]) - 1).toString();\n    let adj_end = end[0] + (parseInt(end[1]) - 1).toString();\n    let start_col = gameState[adj_start][1];\n    let start_row = 7 - parseInt(adj_start[1]);\n    let piece = copy_state[adj_start][0];\n    let all_moves = [];\n    // find what piece we are moving\n    if (piece instanceof Pawn) {\n      all_moves = this.p1.find_pawn_moves(grid, this.gstate, start_col, start_row);\n    } else if (piece instanceof Knight) {\n      all_moves = piece.valid_knight_moves(grid, this.gstate, start_col, start_row);\n    } else if (piece instanceof Rook) {\n      all_moves = piece.get_all_straight(grid, this.gstate, start_col, start_row);\n    } else if (piece instanceof Bishop) {\n      all_moves = piece.get_all_diagonal(grid, this.gstate, start_col, start_row);\n    } else if (piece instanceof Queen) {\n      all_moves = piece.get_all_straight(grid, this.gstate, start_col, start_row).concat(piece.get_all_diagonal(grid, this.gstate, start_col, start_row));\n    } else if (piece instanceof King) {\n      all_moves = piece.valid_king_moves(grid, this.gstate, start_col, start_row);\n    }\n    if (all_moves.includes(adj_end)) {\n      // if the piece moving is taking an opponents piece\n      if (copy_state[adj_end][0] !== null) {\n        // update the alive and grave list for player losing a piece\n        if (this.p1.alive.includes(copy_state[adj_end][0])) {\n          this.p1.grave.push(copy_state[adj_end][0]);\n          this.p1.alive = this.p1.alive.filter(item => item !== copy_state[adj_end][0]);\n        } else {\n          this.p2.grave.push(copy_state[adj_end][0]);\n          this.p2.alive = this.p2.alive.filter(item => item !== copy_state[adj_end][0]);\n        }\n      }\n      // update the positions of the pieces on the board\n      this.gstate[adj_end][0] = copy_state[adj_start][0];\n      this.gstate[adj_start][0] = null;\n      this.gstate[adj_end][0].position = adj_end;\n      // update the position of the piece for the player who's color is the piece's color\n      if (this.p1 === this.gstate[adj_end][0].player) {\n        this.p1.alive.forEach(p => {\n          if (p.position === adj_start) {\n            p.position = adj_end;\n          }\n        });\n      } else {\n        this.p2.alive.forEach(p => {\n          if (p.position === adj_start) {\n            p.position = adj_end;\n          }\n        });\n      }\n    } else {\n      return false;\n    }\n    return true;\n  };\n  const renderBoard = () => {\n    // This function should return JSX that represents the board.\n    // This implementation depends on how you want to render the board.\n    // For simplicity, let's assume we're returning an empty div.\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(ActiveGame, \"b1N0qf7c+YN/lg5dRubxKOxv8uY=\");\n_c = ActiveGame;\nvar _c;\n$RefreshReg$(_c, \"ActiveGame\");","map":{"version":3,"names":["Pawn","Rook","Knight","Bishop","Queen","King","assignBlackPieces","assignWhitePieces","React","useState","useEffect","jsxDEV","_jsxDEV","grid","ActiveGame","_ref","_s","player1","player2","gameState","setGameState","produceEmptyBoard","randomlyAssignWhite","setPiecesOnBoard","cCnt","newGameState","col","cord","r","Math","floor","random","color","allPieces","alive","concat","allPositions","map","p","position","spot","includes","process_move","start","end","copy_state","adj_start","parseInt","toString","adj_end","start_col","start_row","piece","all_moves","p1","find_pawn_moves","gstate","valid_knight_moves","get_all_straight","get_all_diagonal","valid_king_moves","grave","push","filter","item","p2","player","forEach","renderBoard","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx"],"sourcesContent":["import MainLayout from \"./MainLayout\"\nimport { Player, Piece, Pawn, Rook, Knight, Bishop, Queen, King, assignBlackPieces, assignWhitePieces } from '../utils/game-utils'\nimport React, { useState, useEffect } from 'react';\n\nconst grid: string[][] = [\n    ['A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1', 'A0'],\n    ['B7', 'B6', 'B5', 'B4', 'B3', 'B2', 'B1', 'B0'],\n    ['C7', 'C6', 'C5', 'C4', 'C3', 'C2', 'C1', 'C0'],\n    ['D7', 'D6', 'D5', 'D4', 'D3', 'D2', 'D1', 'D0'],\n    ['E7', 'E6', 'E5', 'E4', 'E3', 'E2', 'E1', 'E0'],\n    ['F7', 'F6', 'F5', 'F4', 'F3', 'F2', 'F1', 'F0'],\n    ['G7', 'G6', 'G5', 'G4', 'G3', 'G2', 'G1', 'G0'],\n    ['H7', 'H6', 'H5', 'H4', 'H3', 'H2', 'H1', 'H0']\n];\n\ninterface GameState {\n  [key: string]: [Piece | null, number];\n}\n\ninterface ActiveGameProps {\n  player1: Player;\n  player2: Player;\n}\n\nexport const ActiveGame: React.FC<ActiveGameProps> = ({ player1, player2 }) => {\n  const [gameState, setGameState] = useState<GameState>({});\n\n  useEffect(() => {\n    produceEmptyBoard();\n    randomlyAssignWhite();\n    setPiecesOnBoard();\n  }, []);\n\n  const produceEmptyBoard = () => {\n    let cCnt = 0;\n    const newGameState: GameState = {};\n    for (const col of grid) {\n      for (const cord of col) {\n        newGameState[cord] = [null, cCnt];\n      }\n      cCnt += 1;\n    }\n    setGameState(newGameState);\n  }\n\n  const randomlyAssignWhite = () => {\n    const r = Math.floor(Math.random() * 2);\n    if (r === 0) {\n      assignWhitePieces(grid, player1);\n      player1.color = 'white';\n      assignBlackPieces(grid, player2);\n      player2.color = 'black';\n    } else {\n      assignWhitePieces(grid, player2);\n      player2.color = 'white';\n      assignBlackPieces(grid, player1);\n      player1.color = 'black';\n    }\n  }\n\n  const setPiecesOnBoard = () => {\n    const allPieces = player1.alive.concat(player2.alive);\n    const allPositions = allPieces.map(p => p.position);\n    const newGameState = {...gameState};\n    for (const spot in newGameState) {\n      if (allPositions.includes(spot)) {\n        for (const p of allPieces) {\n          if (p.position === spot) {\n            newGameState[spot][0] = p;\n          }\n        }\n      }\n    }\n    setGameState(newGameState);\n  }\n\n  const process_move = (start: string, end: string): boolean => {\n    let copy_state = {...gameState};\n    let adj_start = start[0] + ((parseInt(start[1]) - 1).toString());\n    let adj_end = end[0] + ((parseInt(end[1]) - 1).toString());\n    let start_col = gameState[adj_start][1];\n    let start_row = 7 - parseInt(adj_start[1]);\n\n    let piece = copy_state[adj_start][0];\n    let all_moves = [];\n    // find what piece we are moving\n    if (piece instanceof Pawn) {\n        all_moves = this.p1.find_pawn_moves(grid, this.gstate, start_col, start_row);\n    } else if (piece instanceof Knight) {\n        all_moves = piece.valid_knight_moves(grid, this.gstate, start_col, start_row);\n    } else if (piece instanceof Rook) {\n        all_moves = piece.get_all_straight(grid, this.gstate, start_col, start_row);\n    } else if (piece instanceof Bishop) {\n        all_moves = piece.get_all_diagonal(grid, this.gstate, start_col, start_row);\n    } else if (piece instanceof Queen) {\n        all_moves = piece.get_all_straight(grid, this.gstate, start_col, start_row)\n            .concat(piece.get_all_diagonal(grid, this.gstate, start_col, start_row));\n    } else if (piece instanceof King) {\n        all_moves = piece.valid_king_moves(grid, this.gstate, start_col, start_row);\n    }\n\n    if (all_moves.includes(adj_end)) {\n        // if the piece moving is taking an opponents piece\n        if (copy_state[adj_end][0] !== null) {\n            // update the alive and grave list for player losing a piece\n            if (this.p1.alive.includes(copy_state[adj_end][0])) {\n                this.p1.grave.push(copy_state[adj_end][0]);\n                this.p1.alive = this.p1.alive.filter(item => item !== copy_state[adj_end][0]);\n            } else {\n                this.p2.grave.push(copy_state[adj_end][0]);\n                this.p2.alive = this.p2.alive.filter(item => item !== copy_state[adj_end][0]);\n            }\n        }\n        // update the positions of the pieces on the board\n        this.gstate[adj_end][0] = copy_state[adj_start][0];\n        this.gstate[adj_start][0] = null;\n        this.gstate[adj_end][0].position = adj_end;\n        // update the position of the piece for the player who's color is the piece's color\n        if (this.p1 === this.gstate[adj_end][0].player) {\n            this.p1.alive.forEach((p) => {\n                if (p.position === adj_start) {\n                    p.position = adj_end;\n                }\n            });\n        } else {\n            this.p2.alive.forEach((p) => {\n                if (p.position === adj_start) {\n                    p.position = adj_end;\n                }\n            });\n        }\n    } else {\n        return false;\n    }\n    return true;\n  }\n\n  const renderBoard = (): JSX.Element => {\n    // This function should return JSX that represents the board.\n    // This implementation depends on how you want to render the board.\n    // For simplicity, let's assume we're returning an empty div.\n    return <div></div>;\n  }\n\n  return (\n    <div>\n      {renderBoard()}\n    </div>\n  );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}