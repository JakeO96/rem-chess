{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React, { useEffect, useContext, useCallback } from 'react';\nimport { Pawn, Rook, Bishop, Knight, Queen, King, grid } from '../utils/game-utils';\nimport { GameContext } from \"../context/GameContext\";\nimport { useDrag, useDrop } from 'react-dnd';\nimport { svgIcons } from '../utils/svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ActiveGame = () => {\n  _s();\n  const {\n    initiatingUser: player1,\n    receivingUser: player2,\n    gameState,\n    setGameState,\n    sendMessage,\n    lastMessage\n  } = useContext(GameContext);\n  console.log('activegame component rendering - gamestate is VVVV');\n  console.log(gameState);\n  const setPiecesOnBoard = useCallback(() => {\n    if (player1 && player2) {\n      const allPieces = player1.alive.concat(player2.alive);\n      const allPositions = allPieces.map(p => p.position);\n      const newGameState = {\n        ...gameState\n      };\n      for (const spot in newGameState) {\n        if (allPositions.includes(spot)) {\n          for (const p of allPieces) {\n            if (p.position === spot) {\n              newGameState[spot][0] = p;\n            }\n          }\n        }\n      }\n      setGameState(newGameState);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [player1, player2]);\n  useEffect(() => {\n    setPiecesOnBoard();\n  }, [setPiecesOnBoard]);\n  useEffect(() => {\n    function handleIncomingData(data) {\n      if (data.type === 'move-made') {\n        setGameState(data.newGameState);\n      }\n    }\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [sendMessage, lastMessage, setPiecesOnBoard, setGameState]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ChessBoard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ActiveGame, \"4Hdj/PsdpfCofQKWUeLSJdDy3+k=\");\n_c = ActiveGame;\nconst ChessBoard = () => {\n  _s2();\n  const {\n    gameState\n  } = useContext(GameContext);\n  const chessBoard = [];\n  for (let row_num = 0; row_num < 8; row_num++) {\n    let row = [];\n    for (let col_num = 0; col_num < 8; col_num++) {\n      if (gameState) {\n        let position = grid[col_num][row_num];\n        let squareColor = row_num % 2 === 0 ? col_num % 2 === 0 ? 'bg-black-square' : 'bg-white-square' : col_num % 2 === 0 ? 'bg-white-square' : 'bg-black-square';\n        row.push( /*#__PURE__*/_jsxDEV(Square, {\n          position: position,\n          squareColor: squareColor\n        }, `${row_num}-${col_num}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    chessBoard.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-screen flex items-center justify-center\",\n      children: row\n    }, row_num, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chess-board\",\n    children: chessBoard\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n// Square component\n_s2(ChessBoard, \"T2MsfJ6MfPSd6LIBzd8drYxXGwg=\");\n_c2 = ChessBoard;\nconst Square = _ref => {\n  _s3();\n  let {\n    position,\n    squareColor\n  } = _ref;\n  const {\n    initiatingUser: player1,\n    receivingUser: player2,\n    gameId,\n    gameState,\n    setInitiatingUser,\n    setReceivingUser,\n    setGameState,\n    sendMessage\n  } = useContext(GameContext);\n  const process_move = (start, end) => {\n    let copyState = {\n      ...gameState\n    };\n    let startPosition = start[0] + start[1];\n    console.log(`adjusted start: ${startPosition}`);\n    let endPosition = end[0] + end[1];\n    console.log(`adjusted start: ${endPosition}`);\n    let startCol = copyState[startPosition][1];\n    console.log(`start column: ${startCol}`);\n    let startRow = 7 - parseInt(startPosition[1]);\n    console.log(`start row: ${startRow}`);\n    let piece = copyState[startPosition][0];\n    console.log('piece VVVV');\n    console.log(piece);\n    let allMoves = [];\n    // find what piece we are moving\n    if (piece instanceof Pawn) {\n      allMoves = piece.validPawnMoves(grid, gameState, startCol, startRow);\n    } else if (piece instanceof Knight) {\n      allMoves = piece.validKnightMoves(grid, gameState, startCol, startRow);\n    } else if (piece instanceof Rook) {\n      allMoves = piece.get_all_straight(grid, gameState, startCol, startRow);\n    } else if (piece instanceof Bishop) {\n      allMoves = piece.get_all_diagonal(grid, gameState, startCol, startRow);\n    } else if (piece instanceof Queen) {\n      allMoves = piece.get_all_straight(grid, gameState, startCol, startRow).concat(piece.get_all_diagonal(grid, gameState, startCol, startRow));\n    } else if (piece instanceof King) {\n      allMoves = piece.validKingMoves(grid, gameState, startCol, startRow);\n    }\n    console.log('all moves after checking vvvv');\n    console.log(allMoves);\n    if (allMoves.includes(endPosition)) {\n      // if the piece moving is taking an opponents piece\n      if (copyState[endPosition][0] !== null) {\n        const piece = copyState[endPosition][0];\n        // update the alive and grave list for player losing a piece\n        if (piece && player1 && player2) {\n          if (player1.alive.includes(piece)) {\n            player1.grave.push(piece);\n            player1.alive = player1.alive.filter(item => item !== piece);\n          } else {\n            player2.grave.push(piece);\n            player2.alive = player2.alive.filter(item => item !== piece);\n          }\n        }\n      }\n\n      // update the positions of the pieces on the board\n      copyState[endPosition][0] = copyState[startPosition][0];\n      copyState[startPosition][0] = null;\n      if (copyState[endPosition][0] !== null) {\n        let piece = copyState[endPosition][0];\n        if (piece && player1 && player2) {\n          piece.position = endPosition;\n          if (player1.name === piece.playerName) {\n            player1.alive.forEach(p => {\n              if (p.position === startPosition) {\n                p.position = endPosition;\n              }\n            });\n          } else {\n            player2.alive.forEach(p => {\n              if (p.position === startPosition) {\n                p.position = endPosition;\n              }\n            });\n          }\n        }\n      }\n    } else {\n      if (player1 && player2) {\n        return {\n          isValid: false,\n          newState: copyState,\n          newPlayer1: player1,\n          newPlayer2: player2\n        };\n      } else {\n        return {\n          isvalid: false,\n          newState: copyState,\n          newPlayer1\n        };\n      }\n    }\n    return {\n      isValid: true,\n      newState: copyState,\n      newPlayer1: player1,\n      newPlayer2: player2\n    };\n  };\n  const [, dropRef] = useDrop({\n    accept: 'piece',\n    drop: (item, monitor) => {\n      console.log('drop firing');\n      console.log('spot piece in drop vvvv');\n      console.log(item);\n      if (item) {\n        const start = item.piece.position;\n        const end = position;\n        if (player1 && player2) {\n          const moveResult = process_move(start, end);\n          console.log(moveResult);\n          if (moveResult.isValid) {\n            item.piece.moved = true;\n            const message = JSON.stringify({\n              type: 'valid-move',\n              pieceColor: item.piece.isWhite,\n              player: playerName,\n              gameId: gameId,\n              newGameState: moveResult.newState\n            });\n            sendMessage(message);\n            setInitiatingUser(moveResult.player1);\n            setReceivingUser(moveResult.player2);\n            setGameState(moveResult.newState);\n          } else {\n            setGameState(moveResult.newState);\n          }\n        }\n      }\n    }\n  });\n  const piece = gameState ? gameState[position][0] : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: dropRef,\n    className: `w-square h-square flex items-center justify-center ${squareColor}`,\n    children: piece ? /*#__PURE__*/_jsxDEV(DraggablePiece, {\n      piece: piece\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 16\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n_s3(Square, \"1jnxV3I8yCrFxDl5d89ZxXOnMsY=\", false, function () {\n  return [useDrop];\n});\n_c3 = Square;\nconst DraggablePiece = _ref2 => {\n  _s4();\n  let {\n    piece\n  } = _ref2;\n  const [{\n    isDragging\n  }, dragRef] = useDrag({\n    type: 'piece',\n    item: {\n      type: 'piece',\n      piece\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: dragRef,\n    children: svgIcons[piece.pieceName]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n_s4(DraggablePiece, \"PitWq9MEidg2fcoeQ58axdvz0w4=\", false, function () {\n  return [useDrag];\n});\n_c4 = DraggablePiece;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"ActiveGame\");\n$RefreshReg$(_c2, \"ChessBoard\");\n$RefreshReg$(_c3, \"Square\");\n$RefreshReg$(_c4, \"DraggablePiece\");","map":{"version":3,"names":["React","useEffect","useContext","useCallback","Pawn","Rook","Bishop","Knight","Queen","King","grid","GameContext","useDrag","useDrop","svgIcons","jsxDEV","_jsxDEV","Fragment","_Fragment","ActiveGame","_s","initiatingUser","player1","receivingUser","player2","gameState","setGameState","sendMessage","lastMessage","console","log","setPiecesOnBoard","allPieces","alive","concat","allPositions","map","p","position","newGameState","spot","includes","handleIncomingData","data","type","Blob","reader","FileReader","onload","result","JSON","parse","readAsText","children","ChessBoard","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s2","chessBoard","row_num","row","col_num","squareColor","push","Square","className","_c2","_ref","_s3","gameId","setInitiatingUser","setReceivingUser","process_move","start","end","copyState","startPosition","endPosition","startCol","startRow","parseInt","piece","allMoves","validPawnMoves","validKnightMoves","get_all_straight","get_all_diagonal","validKingMoves","grave","filter","item","name","playerName","forEach","isValid","newState","newPlayer1","newPlayer2","isvalid","dropRef","accept","drop","monitor","moveResult","moved","message","stringify","pieceColor","isWhite","player","ref","DraggablePiece","_c3","_ref2","_s4","isDragging","dragRef","collect","pieceName","_c4","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx"],"sourcesContent":["import React, { useEffect, useContext, useCallback } from 'react';\nimport { Piece, Pawn, Rook, Bishop, Knight, Queen, King, grid } from '../utils/game-utils'\nimport type { MoveResult } from '../utils/game-utils'\nimport { GameContext } from \"../context/GameContext\";\nimport { useDrag, useDrop } from 'react-dnd';\nimport { svgIcons } from '../utils/svg-icons';\n\nexport const ActiveGame: React.FC<{}> = () => {\n\n  const { initiatingUser: player1, receivingUser: player2, gameState, setGameState, sendMessage, lastMessage } = useContext(GameContext);\n  console.log('activegame component rendering - gamestate is VVVV');\n  console.log(gameState);\n\n  const setPiecesOnBoard = useCallback(() => {\n    if (player1 && player2) {\n      const allPieces = player1.alive.concat(player2.alive);\n      const allPositions = allPieces.map(p => p.position);\n      const newGameState = {...gameState};\n      for (const spot in newGameState) {\n        if (allPositions.includes(spot)) {\n          for (const p of allPieces) {\n            if (p.position === spot) {\n              newGameState[spot][0] = p;\n            }\n          }\n        }\n      }\n      setGameState(newGameState);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [player1, player2]);\n\n  useEffect(() => {\n    setPiecesOnBoard();\n  }, [setPiecesOnBoard]);\n\n  useEffect(() => {\n\n    function handleIncomingData(data: any) {\n      if (data.type === 'move-made') {\n        setGameState(data.newGameState);\n      }\n    }\n\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [sendMessage, lastMessage, setPiecesOnBoard, setGameState])\n\n  return (\n    <>\n      <ChessBoard />\n    </>\n  );\n};\n\nconst ChessBoard: React.FC<{}> = () => {\n  const { gameState } = useContext(GameContext);\n  const chessBoard = [];\n\n  for (let row_num = 0; row_num < 8; row_num++) {\n    let row = [];\n    for (let col_num = 0; col_num < 8; col_num++) {\n      if (gameState) {\n        let position = grid[col_num][row_num];\n        let squareColor = row_num % 2 === 0 \n        ? col_num % 2 === 0 ? 'bg-black-square' : 'bg-white-square' \n        : col_num % 2 === 0 ? 'bg-white-square' : 'bg-black-square';\n        row.push(\n          <Square key={`${row_num}-${col_num}`} position={position} squareColor={squareColor} />\n        );\n      }\n    }\n    chessBoard.push(<div key={row_num} className=\"w-screen flex items-center justify-center\">{row}</div>);\n  }\n\n  return (\n    <div className=\"chess-board\">\n      {chessBoard}\n    </div>\n  );\n}\n\n// Square component\nconst Square: React.FC<{ position: string, squareColor: string }> = ({ position, squareColor }) => {\n  const { initiatingUser: player1, receivingUser: player2, gameId, gameState, setInitiatingUser, setReceivingUser, setGameState, sendMessage } = useContext(GameContext);\n\n  const process_move = (start: string, end: string): MoveResult | string => {\n    let copyState = {...gameState};\n    let startPosition = start[0] + start[1];\n    console.log(`adjusted start: ${startPosition}`)\n    let endPosition = end[0] + end[1];\n    console.log(`adjusted start: ${endPosition}`)\n    let startCol = copyState[startPosition][1];\n    console.log(`start column: ${startCol}`)\n    let startRow = 7 - parseInt(startPosition[1]);\n    console.log(`start row: ${startRow}`)\n  \n    let piece = copyState[startPosition][0];\n    console.log('piece VVVV');\n    console.log(piece)\n    let allMoves: string[] = [];\n    // find what piece we are moving\n    if (piece instanceof Pawn) {\n        allMoves = piece.validPawnMoves(grid, gameState, startCol, startRow);\n    } else if (piece instanceof Knight) {\n        allMoves = piece.validKnightMoves(grid, gameState, startCol, startRow);\n    } else if (piece instanceof Rook) {\n        allMoves = piece.get_all_straight(grid, gameState, startCol, startRow);\n    } else if (piece instanceof Bishop) {\n        allMoves = piece.get_all_diagonal(grid, gameState, startCol, startRow);\n    } else if (piece instanceof Queen) {\n        allMoves = piece.get_all_straight(grid, gameState, startCol, startRow)\n            .concat(piece.get_all_diagonal(grid, gameState, startCol, startRow));\n    } else if (piece instanceof King) {\n        allMoves = piece.validKingMoves(grid, gameState, startCol, startRow);\n    }\n  \n    console.log('all moves after checking vvvv')\n    console.log(allMoves)\n  \n    if (allMoves.includes(endPosition)) {\n      // if the piece moving is taking an opponents piece\n      if (copyState[endPosition][0] !== null) {\n        const piece = copyState[endPosition][0];\n        // update the alive and grave list for player losing a piece\n        if (piece && player1 && player2) {\n          if (player1.alive.includes(piece)) {\n            player1.grave.push(piece);\n            player1.alive = player1.alive.filter(item => item !== piece);\n          } else {\n            player2.grave.push(piece);\n            player2.alive = player2.alive.filter(item => item !== piece);\n          }\n        }\n      }\n  \n      // update the positions of the pieces on the board\n      copyState[endPosition][0] = copyState[startPosition][0];\n      copyState[startPosition][0] = null;\n      if (copyState[endPosition][0] !== null) {\n        let piece = copyState[endPosition][0];\n        if (piece && player1 && player2) {\n          piece.position = endPosition;\n          if (player1.name === piece.playerName) {\n            player1.alive.forEach((p) => {\n                if (p.position === startPosition) {\n                    p.position = endPosition;\n                }\n            });\n          } else {\n            player2.alive.forEach((p) => {\n              if (p.position === startPosition) {\n                  p.position = endPosition;\n              }\n            });\n          }\n        }\n      }\n    } else {\n      if (player1 && player2) {\n        return { isValid: false, newState: copyState, newPlayer1: player1, newPlayer2: player2 };\n      } else {\n        return { isvalid: false, newState: copyState, newPlayer1}\n      }\n    }\n    return { isValid: true, newState: copyState, newPlayer1: player1, newPlayer2: player2 };\n  }\n\n  const [, dropRef] = useDrop({\n    accept: 'piece',\n    drop: (item: any, monitor) => {\n      console.log('drop firing')\n      console.log('spot piece in drop vvvv')\n      console.log(item);\n      if (item) {\n        const start = item.piece.position; \n        const end = position;\n        if (player1 && player2) {\n          const moveResult = process_move(start, end);\n          console.log(moveResult)\n          if (moveResult.isValid) {\n            item.piece.moved = true;\n            const message = JSON.stringify({type: 'valid-move', pieceColor: item.piece.isWhite, player: playerName, gameId: gameId, newGameState: moveResult.newState })\n            sendMessage(message)\n            setInitiatingUser(moveResult.player1);\n            setReceivingUser(moveResult.player2);\n            setGameState(moveResult.newState);\n          }\n          else {\n            setGameState(moveResult.newState);\n          }\n        }\n      }\n    },\n  })\n\n  const piece = gameState ? gameState[position][0] : null;\n\n  return (\n    <div ref={dropRef} className={`w-square h-square flex items-center justify-center ${squareColor}`}>\n      {piece ? <DraggablePiece piece={piece} /> : null}\n    </div>\n  );\n};\n\nconst DraggablePiece: React.FC<{ piece: Piece }> = ({ piece }) => {\n  const [{ isDragging }, dragRef] = useDrag({\n    type: 'piece',\n    item: { type: 'piece', piece },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  })\n\n  return (\n    <div ref={dragRef}>\n      {svgIcons[piece.pieceName]}\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}