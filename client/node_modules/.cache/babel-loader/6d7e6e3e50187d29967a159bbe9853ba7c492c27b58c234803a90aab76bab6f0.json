{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx\",\n  _s = $RefreshSig$();\nimport { Pawn, Rook, Knight, Bishop, Queen, King, grid } from '../utils/game-utils';\nimport React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { GameContext } from \"../context/GameContext\";\nimport blackPawn from '../utils/game-piece-graphics/black-pawn.svg';\nimport blackKing from '../utils/game-piece-graphics/black-king.svg';\nimport blackQueen from '../utils/game-piece-graphics/black-queen.svg';\nimport blackBishop from '../utils/game-piece-graphics/black-bishop.svg';\nimport blackKnight from '../utils/game-piece-graphics/black-knight.svg';\nimport blackRook from '../utils/game-piece-graphics/black-rook.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst pieceSVGs = {\n  blackPawn: blackPawn,\n  blackKing: blackKing,\n  blackQueen: blackQueen,\n  blackBishop: blackBishop,\n  blackKnight: blackKnight,\n  blackRook: blackRook\n};\nconst produceEmptyBoard = () => {\n  let cordCount = 0;\n  const newGameState = {};\n  for (const col of grid) {\n    for (const cord of col) {\n      newGameState[cord] = [null, cordCount];\n    }\n    cordCount += 1;\n  }\n  return newGameState;\n};\nexport const ActiveGame = () => {\n  _s();\n  const {\n    initiatingUser: player1,\n    receivingUser: player2\n  } = useContext(GameContext);\n  const [gameState, setGameState] = useState(produceEmptyBoard());\n  const setPiecesOnBoard = useCallback(() => {\n    if (player1 && player2) {\n      const allPieces = player1.alive.concat(player2.alive);\n      const allPositions = allPieces.map(p => p.position);\n      const newGameState = {\n        ...gameState\n      };\n      for (const spot in newGameState) {\n        if (allPositions.includes(spot)) {\n          for (const p of allPieces) {\n            if (p.position === spot) {\n              newGameState[spot][0] = p;\n            }\n          }\n        }\n      }\n      setGameState(newGameState);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [player1, player2]);\n  const process_move = (start, end) => {\n    let copy_state = {\n      ...gameState\n    };\n    let adj_start = start[0] + (parseInt(start[1]) - 1).toString();\n    let adj_end = end[0] + (parseInt(end[1]) - 1).toString();\n    let start_col = gameState[adj_start][1];\n    let start_row = 7 - parseInt(adj_start[1]);\n    let piece = copy_state[adj_start][0];\n    let all_moves = [];\n    // find what piece we are moving\n    if (piece instanceof Pawn) {\n      all_moves = piece.validPawnMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Knight) {\n      all_moves = piece.validKnightMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Rook) {\n      all_moves = piece.get_all_straight(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Bishop) {\n      all_moves = piece.get_all_diagonal(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Queen) {\n      all_moves = piece.get_all_straight(grid, gameState, start_col, start_row).concat(piece.get_all_diagonal(grid, gameState, start_col, start_row));\n    } else if (piece instanceof King) {\n      all_moves = piece.validKingMoves(grid, gameState, start_col, start_row);\n    }\n    if (all_moves.includes(adj_end)) {\n      // if the piece moving is taking an opponents piece\n      if (copy_state[adj_end][0] !== null) {\n        const piece = copy_state[adj_end][0];\n        // update the alive and grave list for player losing a piece\n        if (piece && player1 && player2) {\n          if (player1.alive.includes(piece)) {\n            player1.grave.push(piece);\n            player1.alive = player1.alive.filter(item => item !== piece);\n          } else {\n            player2.grave.push(piece);\n            player2.alive = player2.alive.filter(item => item !== piece);\n          }\n        }\n      }\n\n      // update the positions of the pieces on the board\n      copy_state[adj_end][0] = copy_state[adj_start][0];\n      copy_state[adj_start][0] = null;\n      if (copy_state[adj_end][0] !== null) {\n        let piece = copy_state[adj_end][0];\n        if (piece) {\n          piece.position = adj_end;\n          if (player1 === piece.player) {\n            player1.alive.forEach(p => {\n              if (p.position === adj_start) {\n                p.position = adj_end;\n              }\n            });\n          } else {\n            if (player2) {\n              player2.alive.forEach(p => {\n                if (p.position === adj_start) {\n                  p.position = adj_end;\n                }\n              });\n            }\n          }\n        }\n      }\n      setGameState(copy_state);\n    } else {\n      return false;\n    }\n    return true;\n  };\n  useEffect(() => {\n    setPiecesOnBoard();\n  }, [setPiecesOnBoard]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Object.keys(gameState).length === 64 && /*#__PURE__*/_jsxDEV(ChessBoard, {\n      gameState: gameState,\n      grid: grid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 48\n    }, this)\n  }, void 0, false);\n};\n_s(ActiveGame, \"pi8/GLSYT//Umv9W/yWS/w27YCQ=\");\n_c = ActiveGame;\nconst ChessBoard = _ref => {\n  let {\n    gameState,\n    grid\n  } = _ref;\n  const chessBoard = [];\n  for (let row_num = 0; row_num < 8; row_num++) {\n    let row = [];\n    for (let col_num = 0; col_num < 8; col_num++) {\n      let spot_piece = gameState[grid[col_num][row_num]][0];\n      let squareColor = row_num % 2 === 0 ? col_num % 2 === 0 ? 'bg-black-square' : 'bg-white-square' : col_num % 2 === 0 ? 'bg-white-square' : 'bg-black-square';\n      row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `w-square h-square flex items-center justify-center ${squareColor}`,\n        children: spot_piece ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: pieceSVGs[spot_piece.pieceName],\n          alt: spot_piece.pieceName,\n          className: spot_piece.isWhite ? 'noct-white' : 'noct-black'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }, this) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this));\n    }\n    chessBoard.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-screen flex items-center justify-center\",\n      children: row\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chess-board\",\n    children: chessBoard\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ChessBoard;\nvar _c, _c2;\n$RefreshReg$(_c, \"ActiveGame\");\n$RefreshReg$(_c2, \"ChessBoard\");","map":{"version":3,"names":["Pawn","Rook","Knight","Bishop","Queen","King","grid","React","useState","useEffect","useContext","useCallback","GameContext","blackPawn","blackKing","blackQueen","blackBishop","blackKnight","blackRook","jsxDEV","_jsxDEV","Fragment","_Fragment","pieceSVGs","produceEmptyBoard","cordCount","newGameState","col","cord","ActiveGame","_s","initiatingUser","player1","receivingUser","player2","gameState","setGameState","setPiecesOnBoard","allPieces","alive","concat","allPositions","map","p","position","spot","includes","process_move","start","end","copy_state","adj_start","parseInt","toString","adj_end","start_col","start_row","piece","all_moves","validPawnMoves","validKnightMoves","get_all_straight","get_all_diagonal","validKingMoves","grave","push","filter","item","player","forEach","children","Object","keys","length","ChessBoard","fileName","_jsxFileName","lineNumber","columnNumber","_c","_ref","chessBoard","row_num","row","col_num","spot_piece","squareColor","className","src","pieceName","alt","isWhite","_c2","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx"],"sourcesContent":["import { Piece, Pawn, Rook, Knight, Bishop, Queen, King, grid } from '../utils/game-utils'\nimport React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { GameContext } from \"../context/GameContext\";\nimport blackPawn from '../utils/game-piece-graphics/black-pawn.svg';\nimport blackKing from '../utils/game-piece-graphics/black-king.svg';\nimport blackQueen from '../utils/game-piece-graphics/black-queen.svg';\nimport blackBishop from '../utils/game-piece-graphics/black-bishop.svg';\nimport blackKnight from '../utils/game-piece-graphics/black-knight.svg';\nimport blackRook from '../utils/game-piece-graphics/black-rook.svg';\nimport whitePawn from '../utils/game-piece-graphics/white-pawn.svg';\nimport whiteKing from '../utils/game-piece-graphics/white-king.svg';\nimport whiteQueen from '../utils/game-piece-graphics/white-queen.svg';\nimport whiteBishop from '../utils/game-piece-graphics/white-bishop.svg';\nimport whiteKnight from '../utils/game-piece-graphics/white-knight.svg';\nimport whiteRook from '../utils/game-piece-graphics/black-rook.svg';\n\nconst pieceSVGs = {\n  blackPawn: blackPawn,\n  blackKing: blackKing,\n  blackQueen: blackQueen,\n  blackBishop: blackBishop,\n  blackKnight: blackKnight,\n  blackRook: blackRook,\n}\n\n\ninterface GameState {\n  [key: string]: [Piece | null, number];\n}\n\ninterface ChessBoardProps {\n  gameState: GameState;\n  grid: string[][];\n}\n\nconst produceEmptyBoard = () => {\n  let cordCount = 0;\n  const newGameState: GameState = {};\n  for (const col of grid) {\n    for (const cord of col) {\n      newGameState[cord] = [null, cordCount];\n    }\n    cordCount += 1;\n  }\n  return newGameState;\n}\n\nexport const ActiveGame: React.FC<{}> = () => {\n\n  const { initiatingUser: player1, receivingUser: player2 } = useContext(GameContext);\n  const [gameState, setGameState] = useState<GameState>(produceEmptyBoard());\n  \n\n  const setPiecesOnBoard = useCallback(() => {\n    if (player1 && player2) {\n      const allPieces = player1.alive.concat(player2.alive);\n      const allPositions = allPieces.map(p => p.position);\n      const newGameState = {...gameState};\n      for (const spot in newGameState) {\n        if (allPositions.includes(spot)) {\n          for (const p of allPieces) {\n            if (p.position === spot) {\n              newGameState[spot][0] = p;\n            }\n          }\n        }\n      }\n      setGameState(newGameState);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [player1, player2]);\n\n  const process_move = (start: string, end: string): boolean => {\n    let copy_state = {...gameState};\n    let adj_start = start[0] + ((parseInt(start[1]) - 1).toString());\n    let adj_end = end[0] + ((parseInt(end[1]) - 1).toString());\n    let start_col = gameState[adj_start][1];\n    let start_row = 7 - parseInt(adj_start[1]);\n\n    let piece = copy_state[adj_start][0];\n    let all_moves: string[] = [];\n    // find what piece we are moving\n    if (piece instanceof Pawn) {\n        all_moves = piece.validPawnMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Knight) {\n        all_moves = piece.validKnightMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Rook) {\n        all_moves = piece.get_all_straight(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Bishop) {\n        all_moves = piece.get_all_diagonal(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Queen) {\n        all_moves = piece.get_all_straight(grid, gameState, start_col, start_row)\n            .concat(piece.get_all_diagonal(grid, gameState, start_col, start_row));\n    } else if (piece instanceof King) {\n        all_moves = piece.validKingMoves(grid, gameState, start_col, start_row);\n    }\n\n    if (all_moves.includes(adj_end)) {\n      // if the piece moving is taking an opponents piece\n      if (copy_state[adj_end][0] !== null) {\n        const piece = copy_state[adj_end][0];\n        // update the alive and grave list for player losing a piece\n        if (piece && player1 && player2) {\n          if (player1.alive.includes(piece)) {\n            player1.grave.push(piece);\n            player1.alive = player1.alive.filter(item => item !== piece);\n          } else {\n            player2.grave.push(piece);\n            player2.alive = player2.alive.filter(item => item !== piece);\n          }\n        }\n      }\n\n      // update the positions of the pieces on the board\n      copy_state[adj_end][0] = copy_state[adj_start][0];\n      copy_state[adj_start][0] = null;\n      if (copy_state[adj_end][0] !== null) {\n        let piece = copy_state[adj_end][0];\n        if (piece) {\n          piece.position = adj_end;\n          if (player1 === piece.player) {\n            player1.alive.forEach((p) => {\n                if (p.position === adj_start) {\n                    p.position = adj_end;\n                }\n            });\n          } else {\n            if (player2) {\n              player2.alive.forEach((p) => {\n                if (p.position === adj_start) {\n                    p.position = adj_end;\n                }\n            });\n            }\n          }\n        }\n      }\n      setGameState(copy_state);\n    } else {\n        return false;\n    }\n    return true;\n  }\n\n  useEffect(() => {\n    setPiecesOnBoard();\n  }, [setPiecesOnBoard]);\n\n  return (\n    <>\n      {Object.keys(gameState).length === 64 && <ChessBoard gameState={gameState} grid={grid} />}\n    </>\n  );\n};\n\nconst ChessBoard: React.FC<ChessBoardProps> = ({ gameState, grid }) => {\n  const chessBoard = [];\n\n  for (let row_num = 0; row_num < 8; row_num++) {\n    let row = [];\n    for (let col_num = 0; col_num < 8; col_num++) {\n      let spot_piece = gameState[grid[col_num][row_num]][0];\n      let squareColor = row_num % 2 === 0 \n        ? col_num % 2 === 0 ? 'bg-black-square' : 'bg-white-square' \n        : col_num % 2 === 0 ? 'bg-white-square' : 'bg-black-square';\n\n      row.push(\n        <div className={`w-square h-square flex items-center justify-center ${squareColor}`}>\n          {spot_piece ? <img src={pieceSVGs[spot_piece.pieceName as keyof typeof pieceSVGs]} alt={spot_piece.pieceName} className={spot_piece.isWhite ? 'noct-white' : 'noct-black'} /> : ''}\n        </div>\n      );\n    }\n    chessBoard.push(<div className=\"w-screen flex items-center justify-center\">{row}</div>);\n  }\n\n  return (\n    <div className=\"chess-board\">\n      {chessBoard}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}