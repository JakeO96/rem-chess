{"ast":null,"code":"class MyError extends Error {\n  constructor(message, stackTrace, response) {\n    super(message);\n    this.status = void 0;\n    this.response = void 0;\n    this.stackTrace = void 0;\n    this.stackTrace = stackTrace;\n    this.response = response;\n  }\n}\nexport default class ExpressAPI {\n  constructor() {\n    this.createUser = async data => {\n      const options = {\n        method: 'post',\n        body: JSON.stringify(data),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await fetch('http://localhost:3001/api/auth/register', {\n        method: 'post',\n        body: JSON.stringify(data),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      return response;\n    };\n    this.logUserIn = async data => {\n      const options = {\n        method: 'post',\n        body: JSON.stringify(data),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await fetch('http://localhost:3001/api/auth/login', options);\n      return response;\n    };\n    this.fieldExistsInDB = async (fieldName, value) => {\n      const options = {\n        method: 'get',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await this.makeApiCall(`http://localhost:3001/api/user/${fieldName}/${value}`, options);\n      return response;\n    };\n    this.makeApiCall = async (url, options) => {\n      try {\n        const response = await fetch(url, options);\n        if (response.status >= 200 && response.status < 300) {\n          return response.json();\n        } else {\n          const errorData = await response.json(); // This will contain the error details from your Express app\n          console.error('Error from API:', errorData);\n          throw new MyError(`HTTP Error ${response.status}: ${errorData.message}`, errorData.stackTrace, response);\n        }\n      } catch (error) {\n        console.error('Network error:', error);\n        throw error;\n      }\n    };\n  }\n}","map":{"version":3,"names":["MyError","Error","constructor","message","stackTrace","response","status","ExpressAPI","createUser","data","options","method","body","JSON","stringify","headers","fetch","logUserIn","fieldExistsInDB","fieldName","value","makeApiCall","url","json","errorData","console","error"],"sources":["/home/jake/rem-stack/chess/client/src/api/express-api.ts"],"sourcesContent":["class MyError extends Error {\n  status?: string;\n  response?: Response;\n  stackTrace?: string;\n\n  constructor(message: string, stackTrace?: string, response?: Response) {\n    super(message);\n    this.stackTrace = stackTrace;\n    this.response = response;\n  }\n}\n\nexport default class ExpressAPI {\n  createUser = async (data: Object): Promise<Response> => {\n    const options = {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }\n    const response = await fetch('http://localhost:3001/api/auth/register', {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    })\n    return response\n  }\n\n  logUserIn = async (data: object): Promise<Response> => {\n    const options = {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    }\n    const response = await fetch('http://localhost:3001/api/auth/login', options)\n    return response;\n  }\n\n  fieldExistsInDB = async (fieldName: string, value: any): Promise<Response> => {\n    const options = {\n      method: 'get',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    }\n    const response = await this.makeApiCall(`http://localhost:3001/api/user/${fieldName}/${value}`, options);\n    return response;\n  }\n\n  private makeApiCall = async (url: string, options: any): Promise<any> => {\n    try {\n      const response = await fetch(url, options);\n      if (response.status >= 200 && response.status < 300) {\n        return response.json();\n      } else {\n        const errorData = await response.json(); // This will contain the error details from your Express app\n        console.error('Error from API:', errorData);\n        throw new MyError(`HTTP Error ${response.status}: ${errorData.message}`, errorData.stackTrace, response);\n      }\n    } catch (error) {\n      console.error('Network error:', error);\n      throw error;\n    }\n  }\n}"],"mappings":"AAAA,MAAMA,OAAO,SAASC,KAAK,CAAC;EAK1BC,WAAWA,CAACC,OAAe,EAAEC,UAAmB,EAAEC,QAAmB,EAAE;IACrE,KAAK,CAACF,OAAO,CAAC;IAAC,KALjBG,MAAM;IAAA,KACND,QAAQ;IAAA,KACRD,UAAU;IAIR,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC1B;AACF;AAEA,eAAe,MAAME,UAAU,CAAC;EAAAL,YAAA;IAAA,KAC9BM,UAAU,GAAG,MAAOC,IAAY,IAAwB;MACtD,MAAMC,OAAO,GAAG;QACdC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC;QAC1BM,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QAClB;MACF,CAAC;MACD,MAAMV,QAAQ,GAAG,MAAMW,KAAK,CAAC,yCAAyC,EAAE;QACtEL,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC;QAC1BM,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAOV,QAAQ;IACjB,CAAC;IAAA,KAEDY,SAAS,GAAG,MAAOR,IAAY,IAAwB;MACrD,MAAMC,OAAO,GAAG;QACdC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC;QAC1BM,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QAClB;MACF,CAAC;MACD,MAAMV,QAAQ,GAAG,MAAMW,KAAK,CAAC,sCAAsC,EAAEN,OAAO,CAAC;MAC7E,OAAOL,QAAQ;IACjB,CAAC;IAAA,KAEDa,eAAe,GAAG,OAAOC,SAAiB,EAAEC,KAAU,KAAwB;MAC5E,MAAMV,OAAO,GAAG;QACdC,MAAM,EAAE,KAAK;QACbI,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QAClB;MACF,CAAC;MACD,MAAMV,QAAQ,GAAG,MAAM,IAAI,CAACgB,WAAW,CAAE,kCAAiCF,SAAU,IAAGC,KAAM,EAAC,EAAEV,OAAO,CAAC;MACxG,OAAOL,QAAQ;IACjB,CAAC;IAAA,KAEOgB,WAAW,GAAG,OAAOC,GAAW,EAAEZ,OAAY,KAAmB;MACvE,IAAI;QACF,MAAML,QAAQ,GAAG,MAAMW,KAAK,CAACM,GAAG,EAAEZ,OAAO,CAAC;QAC1C,IAAIL,QAAQ,CAACC,MAAM,IAAI,GAAG,IAAID,QAAQ,CAACC,MAAM,GAAG,GAAG,EAAE;UACnD,OAAOD,QAAQ,CAACkB,IAAI,CAAC,CAAC;QACxB,CAAC,MAAM;UACL,MAAMC,SAAS,GAAG,MAAMnB,QAAQ,CAACkB,IAAI,CAAC,CAAC,CAAC,CAAC;UACzCE,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEF,SAAS,CAAC;UAC3C,MAAM,IAAIxB,OAAO,CAAE,cAAaK,QAAQ,CAACC,MAAO,KAAIkB,SAAS,CAACrB,OAAQ,EAAC,EAAEqB,SAAS,CAACpB,UAAU,EAAEC,QAAQ,CAAC;QAC1G;MACF,CAAC,CAAC,OAAOqB,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;QACtC,MAAMA,KAAK;MACb;IACF,CAAC;EAAA;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}