{"ast":null,"code":"export const grid = [['A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1', 'A0'], ['B7', 'B6', 'B5', 'B4', 'B3', 'B2', 'B1', 'B0'], ['C7', 'C6', 'C5', 'C4', 'C3', 'C2', 'C1', 'C0'], ['D7', 'D6', 'D5', 'D4', 'D3', 'D2', 'D1', 'D0'], ['E7', 'E6', 'E5', 'E4', 'E3', 'E2', 'E1', 'E0'], ['F7', 'F6', 'F5', 'F4', 'F3', 'F2', 'F1', 'F0'], ['G7', 'G6', 'G5', 'G4', 'G3', 'G2', 'G1', 'G0'], ['H7', 'H6', 'H5', 'H4', 'H3', 'H2', 'H1', 'H0']];\nexport class Player {\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let alive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let grave = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    this.name = void 0;\n    this.color = void 0;\n    this.alive = void 0;\n    this.grave = void 0;\n    this.name = name;\n    this.color = color;\n    this.alive = alive;\n    this.grave = grave;\n  }\n}\nexport class Piece {\n  constructor(trackerTag, pieceName, position, moved, playerName, isWhite) {\n    this.trackerTag = trackerTag;\n    this.pieceName = pieceName;\n    this.position = position;\n    this.moved = moved;\n    this.playerName = playerName;\n    this.isWhite = isWhite;\n  }\n  get_all_diagonal(grid, state, col, row) {\n    let all_moves = [];\n    all_moves = all_moves.concat(this.recurse_diagonal(col + 1, 8, row + 1, grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col - 1, -1, row - 1, grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col + 1, 8, row - 1, grid, state, [], 'b-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal(col - 1, -1, row + 1, grid, state, [], 'b-slash'));\n    return all_moves;\n  }\n  get_all_straight(grid, state, col, row) {\n    let all_moves = [];\n    all_moves = all_moves.concat(this.recurse_straight(row + 1, 8, col, grid, state, [], 'vert'));\n    all_moves = all_moves.concat(this.recurse_straight(row - 1, -1, col, grid, state, [], 'vert'));\n    all_moves = all_moves.concat(this.recurse_straight(col + 1, 8, row, grid, state, [], 'hor'));\n    all_moves = all_moves.concat(this.recurse_straight(col - 1, -1, row, grid, state, [], 'hor'));\n    return all_moves;\n  }\n  recurse_straight(looper, end, anchor, grid, state, all_moves, axis) {\n    if (looper === end) {\n      return all_moves;\n    }\n    let spot = axis === 'vert' ? grid[anchor][looper] : grid[looper][anchor];\n    if (state[spot][0] === null) {\n      all_moves.push(spot);\n      if (end === 8) {\n        return this.recurse_straight(looper + 1, end, anchor, grid, state, all_moves, axis);\n      } else {\n        return this.recurse_straight(looper - 1, end, anchor, grid, state, all_moves, axis);\n      }\n    } else if (state[spot][0].player.color === this.player.color) {\n      return all_moves;\n    } else {\n      all_moves.push(spot);\n      return all_moves;\n    }\n  }\n  recurse_diagonal(col_rec, end, row_rec, grid, state, all_moves, axis) {\n    if (col_rec === 8 || col_rec === -1 || row_rec === 8 || row_rec === -1) {\n      return all_moves;\n    }\n    let spot = grid[col_rec][row_rec];\n    if (state[spot][0] === null) {\n      all_moves.push(spot);\n      if (axis === 'f-slash' && end === 8) {\n        return this.recurse_diagonal(col_rec + 1, end, row_rec + 1, grid, state, all_moves, axis);\n      } else if (axis === 'f-slash' && end !== 8) {\n        return this.recurse_diagonal(col_rec - 1, end, row_rec - 1, grid, state, all_moves, axis);\n      } else if (axis !== 'f-slash' && end === 8) {\n        return this.recurse_diagonal(col_rec + 1, end, row_rec - 1, grid, state, all_moves, axis);\n      } else {\n        return this.recurse_diagonal(col_rec - 1, end, row_rec + 1, grid, state, all_moves, axis);\n      }\n    } else if (state[spot][0].player.color === this.player.color) {\n      return all_moves;\n    } else {\n      all_moves.push(spot);\n      return all_moves;\n    }\n  }\n}\nexport class Pawn extends Piece {\n  validPawnMoves(grid, state, col, row) {\n    let all_moves = [];\n    // Check the color of the pawn to decide which direction it should move\n    let nextRow = this.isWhite ? row - 1 : row + 1;\n    if (state[grid[col][nextRow]][0] === null) {\n      all_moves.push(grid[col][nextRow]);\n    }\n    let attacks = [grid[col - 1][nextRow], grid[col + 1][nextRow]];\n    for (let d of attacks) {\n      if (state[d][0] === null) {\n        continue;\n      } else if (!this.player.alive.includes(state[d][0])) {\n        all_moves.push(d);\n      } else {\n        continue;\n      }\n    }\n\n    // If the pawn hasn't moved yet, it can move two spaces forward\n    if (!this.moved) {\n      nextRow = this.isWhite ? row - 2 : row + 2;\n      // The pawn can move two spaces forward only if both spaces in front of it are empty\n      if (state[grid[col][nextRow]][0] === null && state[grid[col][nextRow + (this.isWhite ? 1 : -1)]][0] === null) {\n        all_moves.push(grid[col][nextRow]);\n      }\n    }\n    return all_moves;\n  }\n}\nexport class Rook extends Piece {}\nexport class Knight extends Piece {\n  validKnightMoves(grid, state, col, row) {\n    const allMoves = [];\n    const potentialMoves = [[col - 2, row - 1], [col - 2, row + 1], [col + 2, row - 1], [col + 2, row + 1], [col + 1, row + 2], [col - 1, row + 2], [col + 1, row - 2], [col - 1, row - 2]];\n    for (const move of potentialMoves) {\n      var _this$player;\n      if (move[0] < 0 || move[0] > 7 || move[1] < 0 || move[1] > 7) {\n        continue;\n      }\n      const spot = grid[move[0]][move[1]];\n      if (state[spot][0] === null || state[spot][0].player.color !== ((_this$player = this.player) === null || _this$player === void 0 ? void 0 : _this$player.color)) {\n        allMoves.push(spot);\n      }\n    }\n    return allMoves;\n  }\n}\nexport class Bishop extends Piece {}\nexport class Queen extends Piece {}\nexport class King extends Piece {\n  validKingMoves(grid, state, col, row) {\n    const cords = [[col, row + 1], [col - 1, row + 1], [col + 1, row + 1], [col, row - 1], [col - 1, row - 1], [col + 1, row - 1], [col + 1, row], [col - 1, row]];\n    const allMoves = [];\n    for (const c of cords) {\n      if (c[0] === 8 || c[0] === -1 || c[1] === 8 || c[1] === -1) {\n        continue;\n      } else {\n        var _this$player2;\n        const spot = grid[c[0]][c[1]];\n        if (state[spot][0] === null) {\n          allMoves.push(spot);\n        } else if (state[spot][0].player.color === ((_this$player2 = this.player) === null || _this$player2 === void 0 ? void 0 : _this$player2.color)) {\n          continue;\n        } else {\n          allMoves.push(spot);\n        }\n      }\n    }\n    return allMoves;\n  }\n}\nexport const assignWhitePieces = (grid, player) => {\n  for (let col of grid) {\n    player.alive.push(new Pawn('wP', 'whitePawn', col[6], false, player, true));\n  }\n  player.alive.push(new Rook('wR', 'whiteRook', grid[0][7], false, player.name, true), new Knight('wN', 'whiteKnight', grid[1][7], false, player, true), new Bishop('wB', 'whiteBishop', grid[2][7], false, player, true), new Queen('wQ', 'whiteQueen', grid[3][7], false, player, true), new King('wK', 'whiteKing', grid[4][7], false, player, true), new Bishop('wB', 'whiteBishop', grid[5][7], false, player, true), new Knight('wN', 'whiteKnight', grid[6][7], false, player, true), new Rook('wR', 'whiteRook', grid[7][7], false, player, true));\n};\nexport const assignBlackPieces = (grid, player) => {\n  for (let col of grid) {\n    player.alive.push(new Pawn('bP', 'blackPawn', col[1], false, player, false));\n  }\n  player.alive.push(new Rook('bR', 'blackRook', grid[0][0], false, player, false), new Knight('bN', 'blackKnight', grid[1][0], false, player, false), new Bishop('bB', 'blackBishop', grid[2][0], false, player, false), new Queen('bQ', 'blackQueen', grid[3][0], false, player, false), new King('bK', 'blackKing', grid[4][0], false, player, false), new Bishop('bB', 'blackBishop', grid[5][0], false, player, false), new Knight('bN', 'blackKnight', grid[6][0], false, player, false), new Rook('bR', 'blackRook', grid[7][0], false, player, false));\n};","map":{"version":3,"names":["grid","Player","constructor","name","arguments","length","undefined","color","alive","grave","Piece","trackerTag","pieceName","position","moved","playerName","isWhite","get_all_diagonal","state","col","row","all_moves","concat","recurse_diagonal","get_all_straight","recurse_straight","looper","end","anchor","axis","spot","push","player","col_rec","row_rec","Pawn","validPawnMoves","nextRow","attacks","d","includes","Rook","Knight","validKnightMoves","allMoves","potentialMoves","move","_this$player","Bishop","Queen","King","validKingMoves","cords","c","_this$player2","assignWhitePieces","assignBlackPieces"],"sources":["/home/jake/rem-stack/chess/client/src/utils/game-utils.ts"],"sourcesContent":["interface GameState {\n  [key: string]: [Piece | null, number];\n}\n\nexport interface Player {\n  name: string;\n  color: string;\n  alive: Piece[];\n  grace: Piece[];\n}\n\nexport interface MoveResult {\n  isValid: boolean;\n  newState: GameState;\n  newPlayer1: Player | null;\n  newPlayer2: Player | null;\n}\n\nexport const grid: string[][] = [\n  ['A7', 'A6', 'A5', 'A4', 'A3', 'A2', 'A1', 'A0'],\n  ['B7', 'B6', 'B5', 'B4', 'B3', 'B2', 'B1', 'B0'],\n  ['C7', 'C6', 'C5', 'C4', 'C3', 'C2', 'C1', 'C0'],\n  ['D7', 'D6', 'D5', 'D4', 'D3', 'D2', 'D1', 'D0'],\n  ['E7', 'E6', 'E5', 'E4', 'E3', 'E2', 'E1', 'E0'],\n  ['F7', 'F6', 'F5', 'F4', 'F3', 'F2', 'F1', 'F0'],\n  ['G7', 'G6', 'G5', 'G4', 'G3', 'G2', 'G1', 'G0'],\n  ['H7', 'H6', 'H5', 'H4', 'H3', 'H2', 'H1', 'H0']\n];\n\nexport class Player {\n  name: string;\n  color: string;\n  alive: Piece[];\n  grave: Piece[];\n\n  constructor(name: string = '', color: string = '', alive: Piece[] = [], grave: Piece[] = []) {\n    this.name = name;\n    this.color = color;\n    this.alive = alive;\n    this.grave = grave;\n  }\n}\n\nexport abstract class Piece {\n  constructor(\n    public trackerTag: string,\n    public pieceName: string,\n    public position: string,\n    public moved: boolean,\n    public playerName: string,\n    public isWhite: boolean,\n  ) { }\n\n  get_all_diagonal(grid: string[][], state: any, col: number, row: number): string[] {\n    let all_moves: string[] = [];\n    all_moves = all_moves.concat(this.recurse_diagonal((col + 1), 8, (row + 1), grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col - 1), (-1), (row - 1), grid, state, [], 'f-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col + 1), 8, (row - 1), grid, state, [], 'b-slash'));\n    all_moves = all_moves.concat(this.recurse_diagonal((col - 1), (-1), (row + 1), grid, state, [], 'b-slash'));\n    return all_moves;\n  }\n\n  get_all_straight(grid: string[][], state: any, col: number, row: number): string[] {\n    let all_moves: string[] = [];\n    all_moves = all_moves.concat(this.recurse_straight((row + 1), 8, col, grid, state, [], 'vert'));\n    all_moves = all_moves.concat(this.recurse_straight((row - 1), -1, col, grid, state, [], 'vert'));\n    all_moves = all_moves.concat(this.recurse_straight((col + 1), 8, row, grid, state, [], 'hor'));\n    all_moves = all_moves.concat(this.recurse_straight((col - 1), -1, row, grid, state, [], 'hor'));\n    return all_moves;\n}\n\n  recurse_straight(looper: number, end: number, anchor: number, grid: string[][], state: any, all_moves: string[], axis: string): string[] {\n    if (looper === end) {\n        return all_moves;\n    }\n    let spot: string = axis === 'vert' ? grid[anchor][looper] : grid[looper][anchor];\n    if (state[spot][0] === null) {\n        all_moves.push(spot);\n        if (end === 8) {\n            return this.recurse_straight((looper + 1), end, anchor, grid, state, all_moves, axis);\n        } else {\n            return this.recurse_straight((looper - 1), end, anchor, grid, state, all_moves, axis);\n        }\n    } else if (state[spot][0].player.color === this.player.color) {\n        return all_moves;\n    } else {\n        all_moves.push(spot);\n        return all_moves;\n    }\n  }\n\n  recurse_diagonal(col_rec: number, end: number, row_rec: number, grid: string[][], state: any, all_moves: string[], axis: string): string[] {\n    if (col_rec === 8 || col_rec === (-1) || row_rec === 8 || row_rec === (-1)) {\n        return all_moves;\n    }\n    let spot: string = grid[col_rec][row_rec];\n    if (state[spot][0] === null) {\n        all_moves.push(spot);\n        if (axis === 'f-slash' && end === 8) {\n            return this.recurse_diagonal((col_rec + 1), end, (row_rec + 1), grid, state, all_moves, axis);\n        } else if (axis === 'f-slash' && end !== 8) {\n            return this.recurse_diagonal((col_rec - 1), end, (row_rec - 1), grid, state, all_moves, axis);\n        } else if (axis !== 'f-slash' && end === 8) {\n            return this.recurse_diagonal((col_rec + 1), end, (row_rec - 1), grid, state, all_moves, axis);\n        } else {\n            return this.recurse_diagonal((col_rec - 1), end, (row_rec + 1), grid, state, all_moves, axis);\n        }\n    } else if (state[spot][0].player.color === this.player.color) {\n        return all_moves;\n    } else {\n        all_moves.push(spot);\n        return all_moves;\n    }\n  }\n}\n\nexport class Pawn extends Piece {\n  validPawnMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    let all_moves: string[] = [];\n    // Check the color of the pawn to decide which direction it should move\n    let nextRow = this.isWhite ? row - 1 : row + 1;\n    if (state[grid[col][nextRow]][0] === null) {\n      all_moves.push(grid[col][nextRow]);\n    }\n  \n    let attacks: string[] = [grid[(col - 1)][nextRow], grid[(col + 1)][nextRow]];\n    for (let d of attacks) {\n      if (state[d][0] === null) {\n          continue;\n      } else if (!this.player.alive.includes(state[d][0])) {\n          all_moves.push(d);\n      } else {\n          continue;\n      }\n    }\n  \n    // If the pawn hasn't moved yet, it can move two spaces forward\n    if (!this.moved) {\n      nextRow = this.isWhite ? row - 2 : row + 2;\n      // The pawn can move two spaces forward only if both spaces in front of it are empty\n      if (state[grid[col][nextRow]][0] === null && state[grid[col][nextRow + (this.isWhite ? 1 : -1)]][0] === null) {\n        all_moves.push(grid[col][nextRow]);\n      }\n    }\n    \n    return all_moves;\n  }\n}\n\nexport class Rook extends Piece {}\n\nexport class Knight extends Piece {\n  validKnightMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    const allMoves: string[] = [];\n    \n    const potentialMoves: [number, number][] = [\n      [col - 2, row - 1], [col - 2, row + 1],\n      [col + 2, row - 1], [col + 2, row + 1],\n      [col + 1, row + 2], [col - 1, row + 2],\n      [col + 1, row - 2], [col - 1, row - 2]\n    ];\n\n    for (const move of potentialMoves) {\n      if (move[0] < 0 || move[0] > 7 || move[1] < 0 || move[1] > 7) {\n        continue;\n      }\n\n      const spot = grid[move[0]][move[1]];\n      if (state[spot][0] === null || state[spot][0].player.color !== this.player?.color) {\n        allMoves.push(spot);\n      }\n    }\n\n    return allMoves;\n  }\n}\n\nexport class Bishop extends Piece {\n}\n\nexport class Queen extends Piece {}\n\nexport class King extends Piece {\n  validKingMoves(grid: string[][], state: any, col: number, row: number): string[] {\n    const cords = [\n      [col, (row + 1)],\n      [(col - 1), (row + 1)],\n      [(col + 1), (row + 1)],\n      [col, (row - 1)],\n      [(col - 1), (row - 1)],\n      [(col + 1), (row - 1)],\n      [(col + 1), row],\n      [(col - 1), row]\n    ];\n\n    const allMoves: string[] = [];\n    for (const c of cords) {\n      if (c[0] === 8 || c[0] === -1 || c[1] === 8 || c[1] === -1) {\n        continue;\n      } else {\n        const spot = grid[c[0]][c[1]];\n        if (state[spot][0] === null) {\n          allMoves.push(spot);\n        } else if (state[spot][0].player.color === this.player?.color) {\n          continue;\n        } else {\n          allMoves.push(spot);\n        }\n      }\n    }\n\n    return allMoves;\n  }\n}\n\nexport const assignWhitePieces = (grid: string[][], player: Player): void => {\n  for (let col of grid) {\n    player.alive.push(new Pawn('wP', 'whitePawn', col[6], false, player, true));\n  }\n  player.alive.push(\n    new Rook('wR', 'whiteRook', grid[0][7], false, player.name, true),\n    new Knight('wN', 'whiteKnight', grid[1][7], false, player, true),\n    new Bishop('wB', 'whiteBishop', grid[2][7], false, player, true),\n    new Queen('wQ', 'whiteQueen', grid[3][7], false, player, true),\n    new King('wK', 'whiteKing', grid[4][7], false, player, true),\n    new Bishop('wB', 'whiteBishop', grid[5][7], false, player, true),\n    new Knight('wN', 'whiteKnight', grid[6][7], false, player, true),\n    new Rook('wR', 'whiteRook', grid[7][7], false, player, true)\n  )\n}\n\nexport const assignBlackPieces = (grid: string[][], player: Player): void => {\n  for (let col of grid) {\n      player.alive.push(new Pawn('bP', 'blackPawn', col[1], false, player, false));\n  }\n  player.alive.push(\n      new Rook('bR', 'blackRook', grid[0][0], false, player, false),\n      new Knight('bN', 'blackKnight', grid[1][0], false, player, false),\n      new Bishop('bB', 'blackBishop', grid[2][0], false, player, false),\n      new Queen('bQ', 'blackQueen', grid[3][0], false, player, false),\n      new King('bK', 'blackKing', grid[4][0], false, player, false),\n      new Bishop('bB', 'blackBishop', grid[5][0], false, player, false),\n      new Knight('bN', 'blackKnight', grid[6][0], false, player, false),\n      new Rook('bR', 'blackRook', grid[7][0], false, player, false)\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}