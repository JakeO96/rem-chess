{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/StartGamePortal.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\n//import { useNavigate } from 'react-router-dom'\n\n//import { AuthContext } from \"../context/AuthContext\";\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StartGamePortal = _ref => {\n  _s();\n  let {\n    expressApi\n  } = _ref;\n  console.log('StartGamePortal render');\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:3001');\n  const [messageHistory, setMessageHistory] = useState([]);\n  const {\n    sendMessage,\n    lastMessage,\n    readyState\n  } = useWebSocket(socketUrl, {\n    onOpen: () => console.log('opened'),\n    shouldReconnect: closeEvent => true\n  });\n\n  //const navigate = useNavigate();\n  //const { isLoggedIn, username } = useContext(AuthContext);\n\n  useEffect(() => {\n    expressApi.getLoggedInUsers().then(res => res.json()).then(data => {\n      setUsers(data);\n      setIsLoading(false);\n    }).catch(err => {\n      console.error(err);\n      setIsLoading(false);\n    });\n  }, [expressApi]);\n  useEffect(() => {\n    if (lastMessage !== null) {\n      setMessageHistory(prev => prev.concat(lastMessage.data));\n    }\n  }, [lastMessage, setMessageHistory]);\n\n  /** \n  useEffect(() => {\n    const ws = new WebSocket('ws://localhost:3001');\n    setWs(ws);\n     // Handle WebSocket events here...\n    if (ws) {\n      ws.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        if (data.message) {\n          console.log(data.message)\n        }\n        if (data.type === 'game-invite') {\n          const accepted = window.confirm(`You have been invited to a game by ${data.inviterUsername}. Do you accept?`);\n          const message = JSON.stringify({ type: 'game-invite-response', accepted });\n          ws.send(message);\n        } else if (data.type === 'game-start') {\n          navigate(`/game/${data.gameId}`);\n        }\n      };\n    }\n  }, [navigate]);\n  */\n\n  /** \n    useEffect(() => {\n      if (!isLoggedIn && ws) {\n        ws.close();\n      }\n    }, [isLoggedIn, ws]);\n  */\n\n  const handleUsernameClick = useCallback(evt => {\n    const player2 = evt.currentTarget.dataset.username;\n    const message = JSON.stringify({\n      type: 'game-invite',\n      invitedUser: player2\n    });\n    sendMessage(message);\n  }, [sendMessage]);\n\n  /** \n      const handleGameStart = (gameId: string) => {\n        const message = JSON.stringify({ type: 'game-start', gameId });\n        if (ws) ws.send(message);\n      };\n      expressApi.createGame({ player1: username, player2 }, handleGameStart);\n    }\n  */\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated'\n  }[readyState];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this) : users.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map((username, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: readyState !== ReadyState.OPEN,\n          \"data-username\": username,\n          onClick: handleUsernameClick,\n          children: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No users are currently logged in.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"The WebSocket is currently \", connectionStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }, this), lastMessage ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Last message: \", lastMessage.data]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 22\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messageHistory.map((message, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: message ? message : null\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(StartGamePortal, \"wcT7C0Eywhj0yZiewNS2Dkpf6Y4=\", false, function () {\n  return [useWebSocket];\n});\n_c = StartGamePortal;\nvar _c;\n$RefreshReg$(_c, \"StartGamePortal\");","map":{"version":3,"names":["useCallback","useEffect","useState","useWebSocket","ReadyState","jsxDEV","_jsxDEV","Fragment","_Fragment","StartGamePortal","_ref","_s","expressApi","console","log","users","setUsers","isLoading","setIsLoading","socketUrl","setSocketUrl","messageHistory","setMessageHistory","sendMessage","lastMessage","readyState","onOpen","shouldReconnect","closeEvent","getLoggedInUsers","then","res","json","data","catch","err","error","prev","concat","handleUsernameClick","evt","player2","currentTarget","dataset","username","message","JSON","stringify","type","invitedUser","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","disabled","onClick","idx","_c","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/StartGamePortal.tsx"],"sourcesContent":["import { FC, useCallback, useEffect, useState } from \"react\"\n//import { useNavigate } from 'react-router-dom'\nimport ExpressAPI from \"../api/express-api\";\n//import { AuthContext } from \"../context/AuthContext\";\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\n\ninterface StartGamePortalProps {\n  expressApi: ExpressAPI;\n}\n\nexport const StartGamePortal: FC<StartGamePortalProps> = ({ expressApi }) => {\n  console.log('StartGamePortal render');\n\n  const [users, setUsers] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:3001');\n  const [messageHistory, setMessageHistory] = useState<string[]>([]);\n\n  const { \n    sendMessage, \n    lastMessage, \n    readyState \n  } = useWebSocket(socketUrl, { \n    onOpen: () => console.log('opened'), \n    shouldReconnect: (closeEvent) => true,\n  });\n\n\n  //const navigate = useNavigate();\n  //const { isLoggedIn, username } = useContext(AuthContext);\n\n  useEffect(() => {\n    expressApi.getLoggedInUsers()\n      .then((res) =>  res.json() )\n      .then((data) => {\n        setUsers(data);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        console.error(err);\n        setIsLoading(false);\n      });\n  }, [expressApi]);\n\n  useEffect(() => {\n    if (lastMessage !== null) {\n      setMessageHistory((prev) => prev.concat(lastMessage.data));\n    }\n  }, [lastMessage, setMessageHistory]);\n\n  /** \n  useEffect(() => {\n    const ws = new WebSocket('ws://localhost:3001');\n    setWs(ws);\n\n    // Handle WebSocket events here...\n    if (ws) {\n      ws.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        if (data.message) {\n          console.log(data.message)\n        }\n        if (data.type === 'game-invite') {\n          const accepted = window.confirm(`You have been invited to a game by ${data.inviterUsername}. Do you accept?`);\n          const message = JSON.stringify({ type: 'game-invite-response', accepted });\n          ws.send(message);\n        } else if (data.type === 'game-start') {\n          navigate(`/game/${data.gameId}`);\n        }\n      };\n    }\n  }, [navigate]);\n*/\n\n/** \n  useEffect(() => {\n    if (!isLoggedIn && ws) {\n      ws.close();\n    }\n  }, [isLoggedIn, ws]);\n*/\n\nconst handleUsernameClick = useCallback((evt: React.MouseEvent<HTMLButtonElement>) => {\n  const player2 = evt.currentTarget.dataset.username;\n  const message = JSON.stringify({ type: 'game-invite', invitedUser: player2 });\n  sendMessage(message);\n}, [sendMessage]);\n\n/** \n    const handleGameStart = (gameId: string) => {\n      const message = JSON.stringify({ type: 'game-start', gameId });\n      if (ws) ws.send(message);\n    };\n    expressApi.createGame({ player1: username, player2 }, handleGameStart);\n  }\n*/\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n  }[readyState];\n\n  return (\n    <>\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : users.length > 0 ? (\n        <ul>\n          {users.map((username, index) => (\n            <li key={index}>\n              <button \n                disabled={readyState !== ReadyState.OPEN} \n                data-username={username} \n                onClick={handleUsernameClick}>\n                {username}\n              </button>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No users are currently logged in.</p>\n      )}\n\n    <span>The WebSocket is currently {connectionStatus}</span>\n      {lastMessage ? <span>Last message: {lastMessage.data}</span> : null}\n      <ul>\n        {messageHistory.map((message, idx) => (\n          <span key={idx}>{message ? message : null}</span>\n        ))}\n      </ul>\n    </>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}