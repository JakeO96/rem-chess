{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/StartGamePortal.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { GameContext } from \"../context/GameContext\";\nimport { ReadyState } from \"react-use-websocket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StartGamePortal = _ref => {\n  _s();\n  let {\n    expressApi\n  } = _ref;\n  const [navigateReady, setNavigateReady] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const {\n    username\n  } = useContext(AuthContext);\n  const {\n    initiatingUser,\n    receivingUser,\n    gameId,\n    setGameId,\n    setInitiatingUser,\n    setReceivingUser,\n    sendMessage,\n    lastMessage,\n    readyState\n  } = useContext(GameContext);\n  useEffect(() => {\n    expressApi.getLoggedInUsers().then(res => res.json()).then(data => {\n      setUsers(data);\n      setIsLoading(false);\n    }).catch(err => {\n      console.error(err);\n      setIsLoading(false);\n    });\n  }, [expressApi]);\n  useEffect(() => {\n    function handleIncomingData(data) {\n      if (data.type === 'game-invite') {\n        const accepted = window.confirm(`You have been invited to a game by ${data.inviterUsername}. Do you accept?`);\n        const responseMessage = JSON.stringify({\n          type: 'game-invite-response',\n          accepted,\n          challenger: data.callenger,\n          opponent: data.opponent\n        });\n        sendMessage(responseMessage);\n      } else if (data.type === 'create-game') {\n        expressApi.createGame(data, gameId => {\n          const responseMessage = JSON.stringify({\n            type: 'game-created',\n            recievingUser: data.initiatingUser,\n            initiatingUser: data.recievingUser,\n            gameId: gameId\n          });\n          sendMessage(responseMessage);\n        });\n      } else if (data.type === 'start-game') {\n        if (data.gameId) {\n          setGameId(data.gameId);\n        }\n        setInitiatingUser(prevState => {\n          if (prevState) {\n            return {\n              ...prevState,\n              name: data.initiatingUser\n            };\n          } else {\n            // Return a new state when prevState is undefined\n            // You may need to adjust this according to your needs\n            return {\n              name: data.initiatingUser,\n              color: \"\",\n              // Example value\n              alive: [],\n              // Example value\n              grave: [] // Example value\n            };\n          }\n        });\n\n        setReceivingUser(prevState => {\n          if (prevState) {\n            return {\n              ...prevState,\n              name: data.receivingUser\n            };\n          } else {\n            // Return a new state when prevState is undefined\n            // You may need to adjust this according to your needs\n            return {\n              name: data.receivingUser,\n              color: \"\",\n              // Example value\n              alive: [],\n              // Example value\n              grave: [] // Example value\n            };\n          }\n        });\n\n        setNavigateReady(true);\n      } else if (data.type === 'game-decline') {\n        alert(`${data.initiatingUser} declined to start a game.`);\n      }\n    }\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [lastMessage, expressApi, sendMessage, setGameId, setInitiatingUser, setReceivingUser]);\n  const handleUsernameClick = useCallback(evt => {\n    const player2 = evt.currentTarget.dataset.username;\n    const message = JSON.stringify({\n      type: 'game-invite',\n      recievingUser: player2,\n      initiatingUser: username\n    });\n    sendMessage(message);\n  }, [sendMessage, username]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: navigateReady ? /*#__PURE__*/_jsxDEV(Navigate, {\n      to: `/game/${gameId}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this) : isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }, this) : users.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map((username, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: readyState !== ReadyState.OPEN,\n          \"data-username\": username,\n          onClick: handleUsernameClick,\n          children: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No users are currently logged in.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n};\n_s(StartGamePortal, \"UAQRiH5Ff5JLtSCW/WzNVcpS4tY=\");\n_c = StartGamePortal;\nvar _c;\n$RefreshReg$(_c, \"StartGamePortal\");","map":{"version":3,"names":["useCallback","useContext","useEffect","useState","Navigate","AuthContext","GameContext","ReadyState","jsxDEV","_jsxDEV","Fragment","_Fragment","StartGamePortal","_ref","_s","expressApi","navigateReady","setNavigateReady","users","setUsers","isLoading","setIsLoading","username","initiatingUser","receivingUser","gameId","setGameId","setInitiatingUser","setReceivingUser","sendMessage","lastMessage","readyState","getLoggedInUsers","then","res","json","data","catch","err","console","error","handleIncomingData","type","accepted","window","confirm","inviterUsername","responseMessage","JSON","stringify","challenger","callenger","opponent","createGame","recievingUser","prevState","name","color","alive","grave","alert","Blob","reader","FileReader","onload","result","parse","readAsText","handleUsernameClick","evt","player2","currentTarget","dataset","message","children","to","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","disabled","OPEN","onClick","_c","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/StartGamePortal.tsx"],"sourcesContent":["import { FC, useCallback, useContext, useEffect, useState } from \"react\"\nimport ExpressAPI from \"../api/express-api\";\nimport { Navigate } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { GameContext, StartGameMessageObject } from \"../context/GameContext\";\nimport { ReadyState } from \"react-use-websocket\";\nimport type { Player } from \"../utils/game-utils\";\n\ninterface StartGamePortalProps {\n  expressApi: ExpressAPI;\n}\n\nexport const StartGamePortal: FC<StartGamePortalProps> = ({ expressApi }) => {\n\n  const [navigateReady, setNavigateReady] = useState<boolean>(false);\n  const [users, setUsers] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const { username } = useContext(AuthContext)\n  const { initiatingUser, receivingUser, gameId, setGameId, setInitiatingUser, setReceivingUser,sendMessage, lastMessage, readyState } = useContext(GameContext)\n\n  useEffect(() => {\n    expressApi.getLoggedInUsers()\n      .then((res) =>  res.json() )\n      .then((data) => {\n        setUsers(data);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        console.error(err);\n        setIsLoading(false);\n      });\n  }, [expressApi]);\n\n  useEffect(() => {\n    function handleIncomingData(data: StartGameMessageObject) {\n      if (data.type === 'game-invite') {\n        const accepted = window.confirm(`You have been invited to a game by ${data.inviterUsername}. Do you accept?`);\n        const responseMessage = JSON.stringify({ type: 'game-invite-response', accepted, challenger: data.callenger, opponent: data.opponent });\n        sendMessage(responseMessage);\n      } else if (data.type === 'create-game') {\n        expressApi.createGame(data, ((gameId) => {\n          const responseMessage = JSON.stringify({ type: 'game-created', recievingUser: data.initiatingUser, initiatingUser: data.recievingUser, gameId: gameId})\n          sendMessage(responseMessage);\n        }))\n      } else if (data.type === 'start-game') {\n        if (data.gameId) {\n          setGameId(data.gameId);\n        }\n        setInitiatingUser((prevState: Player | undefined) => {\n          if (prevState) {\n            return {\n              ...prevState,\n              name: data.initiatingUser,\n            };\n          } else {\n            // Return a new state when prevState is undefined\n            // You may need to adjust this according to your needs\n            return {\n              name: data.initiatingUser,\n              color: \"\", // Example value\n              alive: [], // Example value\n              grave: [], // Example value\n            };\n          }\n        });\n        setReceivingUser((prevState: Player | undefined) => {\n          if (prevState) {\n            return {\n              ...prevState,\n              name: data.receivingUser,\n            };\n          } else {\n            // Return a new state when prevState is undefined\n            // You may need to adjust this according to your needs\n            return {\n              name: data.receivingUser,\n              color: \"\", // Example value\n              alive: [], // Example value\n              grave: [], // Example value\n            };\n          }\n        });\n        setNavigateReady(true);\n      } else if (data.type === 'game-decline') {\n        alert(`${data.initiatingUser} declined to start a game.`);\n      }\n    }\n\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [lastMessage, expressApi, sendMessage, setGameId, setInitiatingUser, setReceivingUser]);\n\n  const handleUsernameClick = useCallback((evt: React.MouseEvent<HTMLButtonElement>) => {\n    const player2 = evt.currentTarget.dataset.username;\n    const message = JSON.stringify({ type: 'game-invite', recievingUser: player2, initiatingUser: username });\n    sendMessage(message);\n  }, [sendMessage, username]);\n\n  return (\n    <>\n      {\n      navigateReady ? (\n        <Navigate to={`/game/${gameId}`} />\n      ) :  isLoading ? (\n          <p>Loading...</p>\n        ) : users.length > 0 ? (\n          <ul>\n            {users.map((username, index) => (\n              <li key={index}>\n                <button \n                  disabled={readyState !== ReadyState.OPEN} \n                  data-username={username} \n                  onClick={handleUsernameClick}>\n                  {username}\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>No users are currently logged in.</p>\n        )\n      }\n    </>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}