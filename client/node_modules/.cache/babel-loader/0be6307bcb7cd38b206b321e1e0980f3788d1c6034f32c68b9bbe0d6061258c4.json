{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({\n  isLoggedIn: false,\n  logIn: async () => true || false,\n  logOut: async () => true || false,\n  register: async () => true || false\n});\nexport const AuthProvider = _ref => {\n  _s();\n  let {\n    children,\n    expressApi\n  } = _ref;\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const logIn = async fields => {\n    try {\n      const res = await expressApi.logUserIn(fields);\n      const data = await res.json();\n      if (data.success) {\n        setIsLoggedIn(true);\n        return true;\n      }\n    } catch (err) {\n      console.error(err);\n      return false;\n    }\n  };\n  const logOut = async () => {\n    try {\n      const res = await expressApi.logUserOut();\n      const data = await res.json();\n      if (data.success) {\n        setIsLoggedIn(false);\n        return true;\n      }\n    } catch (err) {\n      console.error(err);\n      return false;\n    }\n  };\n  const register = async fields => {\n    try {\n      const res = await expressApi.createUser(fields);\n      const data = await res.json();\n      console.log(data);\n      if (data.success) {\n        return true;\n      }\n    } catch (err) {\n      console.error(err);\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      logIn,\n      logOut,\n      register\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"g0MSgNVZk+vKiEFnDJ9VPEfswFA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","jsxDEV","_jsxDEV","AuthContext","isLoggedIn","logIn","logOut","register","AuthProvider","_ref","_s","children","expressApi","setIsLoggedIn","fields","res","logUserIn","data","json","success","err","console","error","logUserOut","createUser","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/context/AuthContext.tsx"],"sourcesContent":["import { createContext, useState } from 'react';\nimport ExpressAPI from '../api/express-api';\n\ntype AuthContextType = {\n  isLoggedIn: boolean;\n  logIn: (fields: { email: string; password: string }) => Promise<boolean | undefined>;\n  logOut: () => Promise<boolean | undefined>;\n  register: (fields: { email: string; username: string; password: string }) => Promise<boolean | undefined>;\n};\n\nexport const AuthContext = createContext<AuthContextType>({\n  isLoggedIn: false,\n  logIn: async () => true || false,\n  logOut: async () => true || false,\n  register: async () => true || false,\n});\n\ntype AuthProviderProps = {\n  children: React.ReactNode;\n  expressApi: ExpressAPI;\n};\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children, expressApi }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const logIn = async (fields: { email: string; password: string }) => {\n    try {\n      const res = await expressApi.logUserIn(fields);\n      const data = await res.json();\n\n      if (data.success) {\n        setIsLoggedIn(true);\n        return true;\n      }\n    } catch (err) {\n      console.error(err);\n      return false;\n    }\n  };\n\n  const logOut = async () => {\n    try {\n      const res = await expressApi.logUserOut();\n      const data = await res.json();\n\n      if (data.success) {\n        setIsLoggedIn(false);\n        return true;\n      }\n    } catch (err) {\n      console.error(err)\n      return false;\n    }\n  };\n\n  const register = async (fields: { email: string; username: string; password: string }) => {\n    try {\n      const res = await expressApi.createUser(fields);\n      const data = await res.json();\n\n      console.log(data);\n\n      if (data.success) {\n        return true;\n      }\n    } catch (err) {\n      console.error(err);\n      return false;\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, logIn, logOut, register }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUhD,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,CAAkB;EACxDK,UAAU,EAAE,KAAK;EACjBC,KAAK,EAAE,MAAAA,CAAA,KAAY,IAAI,IAAI,KAAK;EAChCC,MAAM,EAAE,MAAAA,CAAA,KAAY,IAAI,IAAI,KAAK;EACjCC,QAAQ,EAAE,MAAAA,CAAA,KAAY,IAAI,IAAI;AAChC,CAAC,CAAC;AAOF,OAAO,MAAMC,YAAyC,GAAGC,IAAA,IAA8B;EAAAC,EAAA;EAAA,IAA7B;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAAH,IAAA;EAChF,MAAM,CAACL,UAAU,EAAES,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMK,KAAK,GAAG,MAAOS,MAA2C,IAAK;IACnE,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMH,UAAU,CAACI,SAAS,CAACF,MAAM,CAAC;MAC9C,MAAMG,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;MAE7B,IAAID,IAAI,CAACE,OAAO,EAAE;QAChBN,aAAa,CAAC,IAAI,CAAC;QACnB,OAAO,IAAI;MACb;IACF,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMd,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAMS,GAAG,GAAG,MAAMH,UAAU,CAACW,UAAU,CAAC,CAAC;MACzC,MAAMN,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;MAE7B,IAAID,IAAI,CAACE,OAAO,EAAE;QAChBN,aAAa,CAAC,KAAK,CAAC;QACpB,OAAO,IAAI;MACb;IACF,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMb,QAAQ,GAAG,MAAOO,MAA6D,IAAK;IACxF,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMH,UAAU,CAACY,UAAU,CAACV,MAAM,CAAC;MAC/C,MAAMG,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;MAE7BG,OAAO,CAACI,GAAG,CAACR,IAAI,CAAC;MAEjB,IAAIA,IAAI,CAACE,OAAO,EAAE;QAChB,OAAO,IAAI;MACb;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB,OAAO,KAAK;IACd;EACF,CAAC;EAED,oBACElB,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEvB,UAAU;MAAEC,KAAK;MAAEC,MAAM;MAAEC;IAAS,CAAE;IAAAI,QAAA,EAClEA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACrB,EAAA,CAtDWF,YAAyC;AAAAwB,EAAA,GAAzCxB,YAAyC;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}