{"ast":null,"code":"var _jsxFileName = \"/home/jake/rem-stack/chess/client/src/components/StartGamePortal.tsx\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { GameContext } from \"../context/GameContext\";\nimport { ReadyState } from \"react-use-websocket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StartGamePortal = _ref => {\n  _s();\n  let {\n    expressApi\n  } = _ref;\n  const [navigateReady, setNavigateReady] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const {\n    currentClientUsername\n  } = useContext(AuthContext);\n  const {\n    challenger,\n    opponent,\n    gameId,\n    setGameId,\n    setChallenger,\n    setOpponent,\n    sendMessage,\n    lastMessage,\n    readyState,\n    initiatePlayers\n  } = useContext(GameContext);\n  useEffect(() => {\n    expressApi.getLoggedInUsers().then(res => res.json()).then(data => {\n      setUsers(data);\n      setIsLoading(false);\n    }).catch(err => {\n      console.error(err);\n      setIsLoading(false);\n    });\n  }, [expressApi]);\n  useEffect(() => {\n    function handleIncomingData(data) {\n      if (data.type === 'game-invite') {\n        console.log(data.challenger);\n        console.log(data.opponent);\n        const deserializedChallenger = JSON.parse(data.challenger);\n        const accepted = window.confirm(`You have been invited to a game by ${data.challenger}. Do you accept?`);\n        const responseMessage = JSON.stringify({\n          type: 'game-invite-response',\n          accepted,\n          challenger: data.challenger,\n          opponent: data.opponent\n        });\n        sendMessage(responseMessage);\n      } else if (data.type === 'create-game') {\n        const deserializedOpponent = JSON.parse(data.opponent);\n        const deserializedChallenger = JSON.parse(data.challenger);\n        expressApi.createGame(data, gameId => {\n          const responseMessage = JSON.stringify({\n            type: 'game-created',\n            challenger: deserializedChallenger,\n            opponent: deserializedOpponent,\n            gameId: gameId\n          });\n          sendMessage(responseMessage);\n        });\n      } else if (data.type === 'start-game') {\n        const deserializedOpponent = JSON.parse(data.opponent);\n        const deserializedChallenger = JSON.parse(data.challenger);\n        console.log('challenger in StartGamePortal start-game response vvv');\n        console.log(deserializedChallenger);\n        console.log('opponent in StartGamePortal start-game response vvv');\n        console.log(deserializedOpponent);\n        setChallenger(deserializedChallenger);\n        setOpponent(deserializedOpponent);\n        if (data.gameId) {\n          setGameId(data.gameId);\n        }\n        setNavigateReady(true);\n      } else if (data.type === 'game-decline') {\n        alert(`${data.initiatingUser} declined to start a game.`);\n      }\n    }\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [lastMessage, expressApi, sendMessage, setGameId, setChallenger, setOpponent, currentClientUsername, challenger, opponent]);\n  const handleUsernameClick = evt => {\n    const opponentUsername = evt.currentTarget.dataset.username;\n    console.log(`oppponentUsernae: ${opponentUsername}`);\n    console.log(`username: ${currentClientUsername}`);\n    const [initializedChallenger, initializedOpponent] = opponentUsername ? initiatePlayers(currentClientUsername, opponentUsername) : [null, null];\n    console.log('initializeChallenger in handleUsernameClick vvvvvv');\n    console.log(initializedChallenger);\n    console.log('initializedOpponent in handleUsernameClick vvvvvv');\n    console.log(initializedOpponent);\n    if (initializedChallenger && initializedOpponent) {\n      const jsonChallenger = JSON.stringify(initializedChallenger);\n      const jsonOpponent = JSON.stringify(initializedOpponent);\n      const message = JSON.stringify({\n        type: 'game-invite',\n        challenger: jsonChallenger,\n        opponent: jsonOpponent\n      });\n      sendMessage(message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: navigateReady ? /*#__PURE__*/_jsxDEV(Navigate, {\n      to: `/game/${gameId}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this) : isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }, this) : users.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map((username, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: readyState !== ReadyState.OPEN,\n          \"data-username\": username,\n          onClick: handleUsernameClick,\n          children: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No users are currently logged in.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n};\n_s(StartGamePortal, \"qoBiOpaLC5kLYuFQaW6I3adZT68=\");\n_c = StartGamePortal;\nvar _c;\n$RefreshReg$(_c, \"StartGamePortal\");","map":{"version":3,"names":["useContext","useEffect","useState","Navigate","AuthContext","GameContext","ReadyState","jsxDEV","_jsxDEV","Fragment","_Fragment","StartGamePortal","_ref","_s","expressApi","navigateReady","setNavigateReady","users","setUsers","isLoading","setIsLoading","currentClientUsername","challenger","opponent","gameId","setGameId","setChallenger","setOpponent","sendMessage","lastMessage","readyState","initiatePlayers","getLoggedInUsers","then","res","json","data","catch","err","console","error","handleIncomingData","type","log","deserializedChallenger","JSON","parse","accepted","window","confirm","responseMessage","stringify","deserializedOpponent","createGame","alert","initiatingUser","Blob","reader","FileReader","onload","result","readAsText","handleUsernameClick","evt","opponentUsername","currentTarget","dataset","username","initializedChallenger","initializedOpponent","jsonChallenger","jsonOpponent","message","children","to","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","disabled","OPEN","onClick","_c","$RefreshReg$"],"sources":["/home/jake/rem-stack/chess/client/src/components/StartGamePortal.tsx"],"sourcesContent":["import { FC, useCallback, useContext, useEffect, useState } from \"react\"\nimport ExpressAPI from \"../api/express-api\";\nimport { Navigate } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { GameContext, StartGameMessageObject } from \"../context/GameContext\";\nimport { ReadyState } from \"react-use-websocket\";\n\ninterface StartGamePortalProps {\n  expressApi: ExpressAPI;\n}\n\nexport const StartGamePortal: FC<StartGamePortalProps> = ({ expressApi }) => {\n\n  const [navigateReady, setNavigateReady] = useState<boolean>(false);\n  const [users, setUsers] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const { currentClientUsername } = useContext(AuthContext)\n  const { challenger, opponent, gameId, setGameId, setChallenger, setOpponent, sendMessage, lastMessage, readyState, initiatePlayers } = useContext(GameContext)\n\n  useEffect(() => {\n    expressApi.getLoggedInUsers()\n      .then((res) =>  res.json() )\n      .then((data) => {\n        setUsers(data);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        console.error(err);\n        setIsLoading(false);\n      });\n  }, [expressApi]);\n\n  useEffect(() => {\n    function handleIncomingData(data: StartGameMessageObject) {\n      if (data.type === 'game-invite') {\n        console.log(data.challenger)\n        console.log(data.opponent)\n        const deserializedChallenger = JSON.parse(data.challenger);\n        const accepted = window.confirm(`You have been invited to a game by ${data.challenger}. Do you accept?`);\n        const responseMessage = JSON.stringify({ type: 'game-invite-response', accepted, challenger: data.challenger, opponent: data.opponent });\n        sendMessage(responseMessage);\n      } else if (data.type === 'create-game') {\n        const deserializedOpponent = JSON.parse(data.opponent);\n        const deserializedChallenger = JSON.parse(data.challenger);\n        expressApi.createGame(data, ((gameId) => {\n          const responseMessage = JSON.stringify({ type: 'game-created', challenger: deserializedChallenger, opponent: deserializedOpponent, gameId: gameId})\n          sendMessage(responseMessage);\n        }))\n      } else if (data.type === 'start-game') {\n        const deserializedOpponent = JSON.parse(data.opponent);\n        const deserializedChallenger = JSON.parse(data.challenger);\n        console.log('challenger in StartGamePortal start-game response vvv')\n        console.log(deserializedChallenger)\n        console.log('opponent in StartGamePortal start-game response vvv')\n        console.log(deserializedOpponent)\n        setChallenger(deserializedChallenger);\n        setOpponent(deserializedOpponent);\n        if (data.gameId) {\n          setGameId(data.gameId);\n        }\n        setNavigateReady(true);\n      } else if (data.type === 'game-decline') {\n        alert(`${data.initiatingUser} declined to start a game.`);\n      }\n    }\n\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [lastMessage, expressApi, sendMessage, setGameId, setChallenger, setOpponent, currentClientUsername, challenger, opponent]);\n\n  const handleUsernameClick = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    const opponentUsername = evt.currentTarget.dataset.username;\n    console.log(`oppponentUsernae: ${opponentUsername}`)\n    console.log(`username: ${currentClientUsername}`)\n    const [initializedChallenger, initializedOpponent] = opponentUsername ? initiatePlayers(currentClientUsername, opponentUsername) : [null, null]\n    console.log('initializeChallenger in handleUsernameClick vvvvvv')\n    console.log(initializedChallenger)\n    console.log('initializedOpponent in handleUsernameClick vvvvvv')\n    console.log(initializedOpponent)\n    if (initializedChallenger && initializedOpponent) {\n      const jsonChallenger = JSON.stringify(initializedChallenger);\n      const jsonOpponent = JSON.stringify(initializedOpponent)\n      const message = JSON.stringify({ type: 'game-invite', challenger: jsonChallenger, opponent: jsonOpponent });\n      sendMessage(message);\n    }\n  }\n\n  return (\n    <>\n      {\n      navigateReady ? (\n        <Navigate to={`/game/${gameId}`} />\n      ) :  isLoading ? (\n          <p>Loading...</p>\n        ) : users.length > 0 ? (\n          <ul>\n            {users.map((username, index) => (\n              <li key={index}>\n                <button \n                  disabled={readyState !== ReadyState.OPEN} \n                  data-username={username} \n                  onClick={handleUsernameClick}>\n                  {username}\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>No users are currently logged in.</p>\n        )\n      }\n    </>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}