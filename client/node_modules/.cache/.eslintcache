[{"/home/jake/rem-stack/chess/client/src/index.tsx":"1","/home/jake/rem-stack/chess/client/src/reportWebVitals.ts":"2","/home/jake/rem-stack/chess/client/src/App.tsx":"3","/home/jake/rem-stack/chess/client/src/api/express-api.ts":"4","/home/jake/rem-stack/chess/client/src/pages/HomePage.tsx":"5","/home/jake/rem-stack/chess/client/src/pages/LogInPage.tsx":"6","/home/jake/rem-stack/chess/client/src/components/LogInForm.tsx":"7","/home/jake/rem-stack/chess/client/src/components/MainLayout.tsx":"8","/home/jake/rem-stack/chess/client/src/components/MainHeader.tsx":"9","/home/jake/rem-stack/chess/client/src/components/FormFields.tsx":"10","/home/jake/rem-stack/chess/client/src/pages/UserDashboardPage.tsx":"11","/home/jake/rem-stack/chess/client/src/components/RegisterForm.tsx":"12","/home/jake/rem-stack/chess/client/src/pages/RegisterPage.tsx":"13","/home/jake/rem-stack/chess/client/src/context/AuthContext.tsx":"14","/home/jake/rem-stack/chess/client/src/components/ProtectedRoute.tsx":"15","/home/jake/rem-stack/chess/client/src/components/StartGamePortal.tsx":"16","/home/jake/rem-stack/chess/client/src/pages/ActiveGamePage.tsx":"17","/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx":"18","/home/jake/rem-stack/chess/client/src/pages/NewUserRedirectVerifyEmail.tsx":"19","/home/jake/rem-stack/chess/client/src/utils/game-utils.ts":"20","/home/jake/rem-stack/chess/client/src/context/GameContext.tsx":"21"},{"size":554,"mtime":1688152721958,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1687374351293,"results":"24","hashOfConfig":"23"},{"size":1664,"mtime":1690652883906,"results":"25","hashOfConfig":"23"},{"size":2829,"mtime":1690086852749,"results":"26","hashOfConfig":"23"},{"size":403,"mtime":1688260808268,"results":"27","hashOfConfig":"23"},{"size":245,"mtime":1689788180322,"results":"28","hashOfConfig":"23"},{"size":5215,"mtime":1689875330530,"results":"29","hashOfConfig":"23"},{"size":372,"mtime":1689102191033,"results":"30","hashOfConfig":"23"},{"size":2147,"mtime":1689788881927,"results":"31","hashOfConfig":"23"},{"size":4980,"mtime":1690608231720,"results":"32","hashOfConfig":"23"},{"size":526,"mtime":1689920191128,"results":"33","hashOfConfig":"23"},{"size":6571,"mtime":1690652897218,"results":"34","hashOfConfig":"23"},{"size":418,"mtime":1689009207632,"results":"35","hashOfConfig":"23"},{"size":2393,"mtime":1690087532067,"results":"36","hashOfConfig":"23"},{"size":563,"mtime":1689874298008,"results":"37","hashOfConfig":"23"},{"size":5355,"mtime":1690682221593,"results":"38","hashOfConfig":"23"},{"size":254,"mtime":1690088633023,"results":"39","hashOfConfig":"23"},{"size":6553,"mtime":1690699409553,"results":"40","hashOfConfig":"23"},{"size":902,"mtime":1690652846174,"results":"41","hashOfConfig":"23"},{"size":8208,"mtime":1690699466586,"results":"42","hashOfConfig":"23"},{"size":1268,"mtime":1690682222583,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"2lf18s",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"47"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jake/rem-stack/chess/client/src/index.tsx",[],[],[],"/home/jake/rem-stack/chess/client/src/reportWebVitals.ts",[],[],"/home/jake/rem-stack/chess/client/src/App.tsx",[],[],"/home/jake/rem-stack/chess/client/src/api/express-api.ts",[],[],"/home/jake/rem-stack/chess/client/src/pages/HomePage.tsx",[],[],"/home/jake/rem-stack/chess/client/src/pages/LogInPage.tsx",[],[],"/home/jake/rem-stack/chess/client/src/components/LogInForm.tsx",[],[],"/home/jake/rem-stack/chess/client/src/components/MainLayout.tsx",[],[],"/home/jake/rem-stack/chess/client/src/components/MainHeader.tsx",[],[],"/home/jake/rem-stack/chess/client/src/components/FormFields.tsx",[],[],"/home/jake/rem-stack/chess/client/src/pages/UserDashboardPage.tsx",["111","112"],[],"import { FC, useEffect, useState } from \"react\";\nimport MainLayout from \"../components/MainLayout\";\nimport ExpressAPI from \"../api/express-api\";\nimport { StartGamePortal } from \"../components/StartGamePortal\";\n\ninterface DashboardPageProps {\n  expressApi: ExpressAPI\n}\n\nexport const DashboardPage: FC<DashboardPageProps> = ({ expressApi }) => {\n\n  return (\n    <MainLayout>\n      <header>\n        <h1>\n          DASHBOARD\n        </h1>\n      </header>\n      <StartGamePortal expressApi={expressApi} />\n    </MainLayout>\n  );\n}","/home/jake/rem-stack/chess/client/src/components/RegisterForm.tsx",[],[],"/home/jake/rem-stack/chess/client/src/pages/RegisterPage.tsx",[],[],"/home/jake/rem-stack/chess/client/src/context/AuthContext.tsx",[],[],"/home/jake/rem-stack/chess/client/src/components/ProtectedRoute.tsx",[],[],"/home/jake/rem-stack/chess/client/src/components/StartGamePortal.tsx",["113","114"],[],"import { FC, useCallback, useContext, useEffect, useState } from \"react\"\nimport ExpressAPI from \"../api/express-api\";\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { Navigate } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { JsonObject } from \"react-use-websocket/dist/lib/types\";\nimport { GameContext } from \"../context/GameContext\";\nimport { Player, assignBlackPieces, assignWhitePieces, grid } from \"../utils/game-utils\";\n\ninterface StartGamePortalProps {\n  expressApi: ExpressAPI;\n}\n\ninterface StartGameMessageObject extends JsonObject {\n  type: string;\n  accepted?: boolean;\n  initiatingUser: string;\n  recievingUser: string;\n  gameId?: string;\n}\n\nexport const StartGamePortal: FC<StartGamePortalProps> = ({ expressApi }) => {\n  console.log('StartGamePortal render');\n\n  const [navigateReady, setNavigateReady] = useState<boolean>(false);\n  const [users, setUsers] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:3001');\n  const { username } = useContext(AuthContext)\n  const { gameId, setGameId, setInitiatingUser, setReceivingUser } = useContext(GameContext)\n  const { \n    sendMessage, \n    lastMessage,\n    readyState \n  } = useWebSocket<StartGameMessageObject>(socketUrl, { \n    onOpen: () => console.log('opened'), \n    shouldReconnect: (closeEvent) => true,\n  });\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n  }[readyState];\n\n  useEffect(() => {\n    expressApi.getLoggedInUsers()\n      .then((res) =>  res.json() )\n      .then((data) => {\n        setUsers(data);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        console.error(err);\n        setIsLoading(false);\n      });\n  }, [expressApi]);\n\n  useEffect(() => {\n    function randomlyAssignWhite() {\n      let player1 = new Player('', '', [], []);\n      let player2 = new Player('', '', [], []);\n      const r = Math.floor(Math.random() * 2);\n      if (r === 0) {\n        assignWhitePieces(grid, player1);\n          player1.color = 'white';\n          assignBlackPieces(grid, player2);\n          player2.color = 'black';\n        } else {\n          assignWhitePieces(grid, player2);\n          player2.color = 'white';\n          assignBlackPieces(grid, player1);\n          player1.color = 'black';\n        }\n      return [player1, player2];\n    }\n\n    function handleIncomingData(data: StartGameMessageObject) {\n      if (data.type === 'game-invite') {\n        const accepted = window.confirm(`You have been invited to a game by ${data.inviterUsername}. Do you accept?`);\n        const responseMessage = JSON.stringify({ type: 'game-invite-response', accepted, recievingUser: data.initiatingUser, initiatingUser: data.recievingUser });\n        sendMessage(responseMessage);\n      } else if (data.type === 'create-game') {\n        expressApi.createGame(data, ((gameId) => {\n          const responseMessage = JSON.stringify({ type: 'game-created', recievingUser: data.initiatingUser, initiatingUser: data.recievingUser, gameId: gameId})\n          sendMessage(responseMessage);\n        }))\n      } else if (data.type === 'start-game') {\n          let [player1, player2] = randomlyAssignWhite();\n          player1.name = data.initiatingUser;\n          player2.name = data.initiatingUser\n          if (data.gameId) {\n            setGameId(data.gameId);\n          }\n          setInitiatingUser(player1);\n          setReceivingUser(player2);\n          setNavigateReady(true);\n      } else if (data.type === 'game-decline') {\n        alert(`${data.initiatingUser} declined to start a game.`);\n      }\n    }\n\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [lastMessage, expressApi, sendMessage, setGameId, setInitiatingUser, setReceivingUser]);\n\n  const handleUsernameClick = useCallback((evt: React.MouseEvent<HTMLButtonElement>) => {\n    const player2 = evt.currentTarget.dataset.username;\n    const message = JSON.stringify({ type: 'game-invite', recievingUser: player2, initiatingUser: username });\n    sendMessage(message);\n  }, [sendMessage, username]);\n\n  return (\n    <>\n      {\n      navigateReady ? (\n        <Navigate to={`/game/${gameId}`} />\n      ) :  isLoading ? (\n          <p>Loading...</p>\n        ) : users.length > 0 ? (\n          <ul>\n            {users.map((username, index) => (\n              <li key={index}>\n                <button \n                  disabled={readyState !== ReadyState.OPEN} \n                  data-username={username} \n                  onClick={handleUsernameClick}>\n                  {username}\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>No users are currently logged in.</p>\n        )\n      }\n    </>\n  )\n}","/home/jake/rem-stack/chess/client/src/pages/ActiveGamePage.tsx",[],[],"/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx",["115"],["116"],"import { Piece, Pawn, Rook, Knight, Bishop, Queen, King, grid } from '../utils/game-utils'\nimport React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { GameContext } from \"../context/GameContext\";\nimport blackPawn from '../utils/game-piece-graphics/black-pawn.svg';\nimport blackKing from '../utils/game-piece-graphics/black-king.svg';\nimport blackQueen from '../utils/game-piece-graphics/black-queen.svg';\nimport blackBishop from '../utils/game-piece-graphics/black-bishop.svg';\nimport blackKnight from '../utils/game-piece-graphics/black-knight.svg';\nimport blackRook from '../utils/game-piece-graphics/black-rook.svg';\nimport whitePawn from '../utils/game-piece-graphics/white-pawn.svg';\nimport whiteKing from '../utils/game-piece-graphics/white-king.svg';\nimport whiteQueen from '../utils/game-piece-graphics/white-queen.svg';\nimport whiteBishop from '../utils/game-piece-graphics/white-bishop.svg';\nimport whiteKnight from '../utils/game-piece-graphics/white-knight.svg';\nimport whiteRook from '../utils/game-piece-graphics/white-rook.svg';\n\nconst pieceSVGs = {\n  blackPawn: blackPawn,\n  blackKing: blackKing,\n  blackQueen: blackQueen,\n  blackBishop: blackBishop,\n  blackKnight: blackKnight,\n  blackRook: blackRook,\n  whitePawn: whitePawn,\n  whiteKing: whiteKing,\n  whiteQueen: whiteQueen,\n  whiteBishop: whiteBishop,\n  whiteKnight: whiteKnight,\n  whiteRook: whiteRook,\n}\n\n\ninterface GameState {\n  [key: string]: [Piece | null, number];\n}\n\ninterface ChessBoardProps {\n  gameState: GameState;\n  grid: string[][];\n}\n\nconst produceEmptyBoard = () => {\n  let cordCount = 0;\n  const newGameState: GameState = {};\n  for (const col of grid) {\n    for (const cord of col) {\n      newGameState[cord] = [null, cordCount];\n    }\n    cordCount += 1;\n  }\n  return newGameState;\n}\n\nexport const ActiveGame: React.FC<{}> = () => {\n\n  const { initiatingUser: player1, receivingUser: player2 } = useContext(GameContext);\n  const [gameState, setGameState] = useState<GameState>(produceEmptyBoard());\n  \n\n  const setPiecesOnBoard = useCallback(() => {\n    if (player1 && player2) {\n      const allPieces = player1.alive.concat(player2.alive);\n      const allPositions = allPieces.map(p => p.position);\n      const newGameState = {...gameState};\n      for (const spot in newGameState) {\n        if (allPositions.includes(spot)) {\n          for (const p of allPieces) {\n            if (p.position === spot) {\n              newGameState[spot][0] = p;\n            }\n          }\n        }\n      }\n      setGameState(newGameState);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [player1, player2]);\n\n  const process_move = (start: string, end: string): boolean => {\n    let copy_state = {...gameState};\n    let adj_start = start[0] + ((parseInt(start[1]) - 1).toString());\n    let adj_end = end[0] + ((parseInt(end[1]) - 1).toString());\n    let start_col = gameState[adj_start][1];\n    let start_row = 7 - parseInt(adj_start[1]);\n\n    let piece = copy_state[adj_start][0];\n    let all_moves: string[] = [];\n    // find what piece we are moving\n    if (piece instanceof Pawn) {\n        all_moves = piece.validPawnMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Knight) {\n        all_moves = piece.validKnightMoves(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Rook) {\n        all_moves = piece.get_all_straight(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Bishop) {\n        all_moves = piece.get_all_diagonal(grid, gameState, start_col, start_row);\n    } else if (piece instanceof Queen) {\n        all_moves = piece.get_all_straight(grid, gameState, start_col, start_row)\n            .concat(piece.get_all_diagonal(grid, gameState, start_col, start_row));\n    } else if (piece instanceof King) {\n        all_moves = piece.validKingMoves(grid, gameState, start_col, start_row);\n    }\n\n    if (all_moves.includes(adj_end)) {\n      // if the piece moving is taking an opponents piece\n      if (copy_state[adj_end][0] !== null) {\n        const piece = copy_state[adj_end][0];\n        // update the alive and grave list for player losing a piece\n        if (piece && player1 && player2) {\n          if (player1.alive.includes(piece)) {\n            player1.grave.push(piece);\n            player1.alive = player1.alive.filter(item => item !== piece);\n          } else {\n            player2.grave.push(piece);\n            player2.alive = player2.alive.filter(item => item !== piece);\n          }\n        }\n      }\n\n      // update the positions of the pieces on the board\n      copy_state[adj_end][0] = copy_state[adj_start][0];\n      copy_state[adj_start][0] = null;\n      if (copy_state[adj_end][0] !== null) {\n        let piece = copy_state[adj_end][0];\n        if (piece) {\n          piece.position = adj_end;\n          if (player1 === piece.player) {\n            player1.alive.forEach((p) => {\n                if (p.position === adj_start) {\n                    p.position = adj_end;\n                }\n            });\n          } else {\n            if (player2) {\n              player2.alive.forEach((p) => {\n                if (p.position === adj_start) {\n                    p.position = adj_end;\n                }\n            });\n            }\n          }\n        }\n      }\n      setGameState(copy_state);\n    } else {\n        return false;\n    }\n    return true;\n  }\n\n  useEffect(() => {\n    setPiecesOnBoard();\n  }, [setPiecesOnBoard]);\n\n  return (\n    <>\n      {Object.keys(gameState).length === 64 && <ChessBoard gameState={gameState} grid={grid} />}\n    </>\n  );\n};\n\nconst ChessBoard: React.FC<ChessBoardProps> = ({ gameState, grid }) => {\n  const chessBoard = [];\n\n  for (let row_num = 0; row_num < 8; row_num++) {\n    let row = [];\n    for (let col_num = 0; col_num < 8; col_num++) {\n      let spot_piece = gameState[grid[col_num][row_num]][0];\n      let squareColor = row_num % 2 === 0 \n        ? col_num % 2 === 0 ? 'bg-black-square' : 'bg-white-square' \n        : col_num % 2 === 0 ? 'bg-white-square' : 'bg-black-square';\n\n      row.push(\n        <div className={`w-square h-square flex items-center justify-center ${squareColor}`}>\n          {spot_piece ? <img src={pieceSVGs[spot_piece.pieceName as keyof typeof pieceSVGs]} alt={spot_piece.pieceName} className={spot_piece.isWhite ? 'noct-white' : 'noct-black'} /> : ''}\n        </div>\n      );\n    }\n    chessBoard.push(<div className=\"w-screen flex items-center justify-center\">{row}</div>);\n  }\n\n  return (\n    <div className=\"chess-board\">\n      {chessBoard}\n    </div>\n  );\n}\n","/home/jake/rem-stack/chess/client/src/pages/NewUserRedirectVerifyEmail.tsx",[],[],"/home/jake/rem-stack/chess/client/src/utils/game-utils.ts",[],[],"/home/jake/rem-stack/chess/client/src/context/GameContext.tsx",[],[],{"ruleId":"117","severity":1,"message":"118","line":1,"column":14,"nodeType":"119","messageId":"120","endLine":1,"endColumn":23},{"ruleId":"117","severity":1,"message":"121","line":1,"column":25,"nodeType":"119","messageId":"120","endLine":1,"endColumn":33},{"ruleId":"117","severity":1,"message":"122","line":28,"column":21,"nodeType":"119","messageId":"120","endLine":28,"endColumn":33},{"ruleId":"117","severity":1,"message":"123","line":39,"column":9,"nodeType":"119","messageId":"120","endLine":39,"endColumn":25},{"ruleId":"117","severity":1,"message":"124","line":79,"column":9,"nodeType":"119","messageId":"120","endLine":79,"endColumn":21},{"ruleId":"125","severity":1,"message":"126","line":77,"column":6,"nodeType":"127","endLine":77,"endColumn":24,"suggestions":"128","suppressions":"129"},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'setSocketUrl' is assigned a value but never used.","'connectionStatus' is assigned a value but never used.","'process_move' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'gameState'. Either include it or remove the dependency array.","ArrayExpression",["130"],["131"],{"desc":"132","fix":"133"},{"kind":"134","justification":"135"},"Update the dependencies array to be: [gameState, player1, player2]",{"range":"136","text":"137"},"directive","",[2605,2623],"[gameState, player1, player2]"]