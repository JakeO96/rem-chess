[{"/home/jake/rem-stack/chess/client/src/index.tsx":"1","/home/jake/rem-stack/chess/client/src/reportWebVitals.ts":"2","/home/jake/rem-stack/chess/client/src/App.tsx":"3","/home/jake/rem-stack/chess/client/src/api/express-api.ts":"4","/home/jake/rem-stack/chess/client/src/pages/HomePage.tsx":"5","/home/jake/rem-stack/chess/client/src/pages/LogInPage.tsx":"6","/home/jake/rem-stack/chess/client/src/components/LogInForm.tsx":"7","/home/jake/rem-stack/chess/client/src/components/MainLayout.tsx":"8","/home/jake/rem-stack/chess/client/src/components/MainHeader.tsx":"9","/home/jake/rem-stack/chess/client/src/components/FormFields.tsx":"10","/home/jake/rem-stack/chess/client/src/pages/UserDashboardPage.tsx":"11","/home/jake/rem-stack/chess/client/src/components/RegisterForm.tsx":"12","/home/jake/rem-stack/chess/client/src/pages/RegisterPage.tsx":"13","/home/jake/rem-stack/chess/client/src/context/AuthContext.tsx":"14","/home/jake/rem-stack/chess/client/src/components/ProtectedRoute.tsx":"15","/home/jake/rem-stack/chess/client/src/components/StartGamePortal.tsx":"16","/home/jake/rem-stack/chess/client/src/pages/ActiveGamePage.tsx":"17","/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx":"18","/home/jake/rem-stack/chess/client/src/pages/NewUserRedirectVerifyEmail.tsx":"19","/home/jake/rem-stack/chess/client/src/utils/game-utils.ts":"20","/home/jake/rem-stack/chess/client/src/context/GameContext.tsx":"21","/home/jake/rem-stack/chess/client/src/utils/svg-icons.tsx":"22"},{"size":554,"mtime":1688152721958,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":1687374351293,"results":"25","hashOfConfig":"24"},{"size":1875,"mtime":1690851974681,"results":"26","hashOfConfig":"24"},{"size":2829,"mtime":1690086852749,"results":"27","hashOfConfig":"24"},{"size":403,"mtime":1688260808268,"results":"28","hashOfConfig":"24"},{"size":245,"mtime":1689788180322,"results":"29","hashOfConfig":"24"},{"size":5215,"mtime":1689875330530,"results":"30","hashOfConfig":"24"},{"size":372,"mtime":1689102191033,"results":"31","hashOfConfig":"24"},{"size":2147,"mtime":1689788881927,"results":"32","hashOfConfig":"24"},{"size":4980,"mtime":1690608231720,"results":"33","hashOfConfig":"24"},{"size":526,"mtime":1689920191128,"results":"34","hashOfConfig":"24"},{"size":6571,"mtime":1690652897218,"results":"35","hashOfConfig":"24"},{"size":418,"mtime":1689009207632,"results":"36","hashOfConfig":"24"},{"size":2393,"mtime":1690087532067,"results":"37","hashOfConfig":"24"},{"size":563,"mtime":1689874298008,"results":"38","hashOfConfig":"24"},{"size":4602,"mtime":1691096430879,"results":"39","hashOfConfig":"24"},{"size":254,"mtime":1690851990193,"results":"40","hashOfConfig":"24"},{"size":8108,"mtime":1691100556695,"results":"41","hashOfConfig":"24"},{"size":902,"mtime":1690652846174,"results":"42","hashOfConfig":"24"},{"size":9192,"mtime":1691098854236,"results":"43","hashOfConfig":"24"},{"size":3050,"mtime":1691098307503,"results":"44","hashOfConfig":"24"},{"size":13889,"mtime":1690856369004,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"2lf18s",{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"49"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jake/rem-stack/chess/client/src/index.tsx",[],[],[],"/home/jake/rem-stack/chess/client/src/reportWebVitals.ts",[],[],"/home/jake/rem-stack/chess/client/src/App.tsx",[],[],"/home/jake/rem-stack/chess/client/src/api/express-api.ts",[],[],"/home/jake/rem-stack/chess/client/src/pages/HomePage.tsx",[],[],"/home/jake/rem-stack/chess/client/src/pages/LogInPage.tsx",[],[],"/home/jake/rem-stack/chess/client/src/components/LogInForm.tsx",[],[],"/home/jake/rem-stack/chess/client/src/components/MainLayout.tsx",[],[],"/home/jake/rem-stack/chess/client/src/components/MainHeader.tsx",[],[],"/home/jake/rem-stack/chess/client/src/components/FormFields.tsx",[],[],"/home/jake/rem-stack/chess/client/src/pages/UserDashboardPage.tsx",["116","117"],[],"import { FC, useEffect, useState } from \"react\";\nimport MainLayout from \"../components/MainLayout\";\nimport ExpressAPI from \"../api/express-api\";\nimport { StartGamePortal } from \"../components/StartGamePortal\";\n\ninterface DashboardPageProps {\n  expressApi: ExpressAPI\n}\n\nexport const DashboardPage: FC<DashboardPageProps> = ({ expressApi }) => {\n\n  return (\n    <MainLayout>\n      <header>\n        <h1>\n          DASHBOARD\n        </h1>\n      </header>\n      <StartGamePortal expressApi={expressApi} />\n    </MainLayout>\n  );\n}","/home/jake/rem-stack/chess/client/src/components/RegisterForm.tsx",[],[],"/home/jake/rem-stack/chess/client/src/pages/RegisterPage.tsx",[],[],"/home/jake/rem-stack/chess/client/src/context/AuthContext.tsx",[],[],"/home/jake/rem-stack/chess/client/src/components/ProtectedRoute.tsx",[],[],"/home/jake/rem-stack/chess/client/src/components/StartGamePortal.tsx",["118"],[],"/home/jake/rem-stack/chess/client/src/pages/ActiveGamePage.tsx",[],[],[],"/home/jake/rem-stack/chess/client/src/components/ActiveGame.tsx",["119"],["120"],"import React, { useEffect, useContext, useCallback } from 'react';\nimport { Player, Piece, Pawn, Rook, Bishop, Knight, Queen, King, grid } from '../utils/game-utils'\nimport type { GameState } from '../context/GameContext'\nimport { GameContext } from \"../context/GameContext\";\nimport { useDrag, useDrop } from 'react-dnd';\nimport { svgIcons } from '../utils/svg-icons';\n\ninterface MoveResult {\n  isValid: boolean;\n  newState: GameState;\n  newPlayer1: Player | null | undefined;\n  newPlayer2: Player | null | undefined;\n}\n\nexport const ActiveGame: React.FC<{}> = () => {\n\n  const { initiatingUser: player1, receivingUser: player2, gameState, setGameState, sendMessage, lastMessage } = useContext(GameContext);\n\n  const setPiecesOnBoard = useCallback(() => {\n    if (player1 && player2 && gameState) {\n      const allPieces = player1.alive.concat(player2.alive);\n      const allPositions = allPieces.map(p => p.position);\n      const newGameState: GameState = {...gameState};\n      for (const spot in newGameState.board) {\n        if (allPositions.includes(spot)) {\n          for (const p of allPieces) {\n            if (p.position === spot) {\n              if (newGameState.board) newGameState.board[spot][0] = p;\n            }\n          }\n        }\n      }\n      setGameState(newGameState);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [player1, player2]);\n\n  useEffect(() => {\n    setPiecesOnBoard();\n  }, [setPiecesOnBoard]);\n\n  useEffect(() => {\n\n    function handleIncomingData(data: any) {\n      if (data.type === 'move-made') {\n        setGameState(data.newGameState);\n      }\n    }\n\n    if (lastMessage !== null) {\n      if (lastMessage.data instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (typeof reader.result === 'string') {\n            const data = JSON.parse(reader.result);\n            handleIncomingData(data);\n          }\n        };\n        reader.readAsText(lastMessage.data);\n      } else {\n        const data = JSON.parse(lastMessage.data);\n        handleIncomingData(data);\n      }\n    }\n  }, [sendMessage, lastMessage, setGameState])\n\n  return (\n    <>\n      <ChessBoard />\n    </>\n  );\n};\n\nconst ChessBoard: React.FC<{}> = () => {\n  const { gameState } = useContext(GameContext);\n  const chessBoard = [];\n\n  for (let row_num = 0; row_num < 8; row_num++) {\n    let row = [];\n    for (let col_num = 0; col_num < 8; col_num++) {\n      if (gameState) {\n        let position = grid[col_num][row_num];\n        let squareColor = row_num % 2 === 0 \n        ? col_num % 2 === 0 ? 'bg-black-square' : 'bg-white-square' \n        : col_num % 2 === 0 ? 'bg-white-square' : 'bg-black-square';\n        row.push(\n          <Square key={`${row_num}-${col_num}`} position={position} squareColor={squareColor} />\n        );\n      }\n    }\n    chessBoard.push(<div key={row_num} className=\"w-screen flex items-center justify-center\">{row}</div>);\n  }\n\n  return (\n    <div className=\"chess-board\">\n      {chessBoard}\n    </div>\n  );\n}\n\n// Square component\nconst Square: React.FC<{ position: string, squareColor: string }> = ({ position, squareColor }) => {\n  const { initiatingUser: player1, receivingUser: player2, gameId, gameState, setInitiatingUser, setReceivingUser, setGameState, sendMessage } = useContext(GameContext);\n\n  const process_move = (start: string, end: string): MoveResult => {\n    let copyState = {...gameState as GameState};\n    if (copyState.board) {\n      let startPosition = start[0] + start[1];\n      let endPosition = end[0] + end[1];\n      let startCol = copyState.board[startPosition][1];\n      let startRow = 7 - parseInt(startPosition[1]);\n    \n      let piece = copyState.board[startPosition][0];\n      if (piece) {\n        if (piece.isWhite !== copyState.isWhiteTurn) {\n          return { isValid: false, newState: copyState, newPlayer1: player1, newPlayer2: player2 };\n        }\n      }\n      const board = copyState.board;\n      let allMoves: string[] = [];\n      // find what piece we are moving\n      if (piece instanceof Pawn) {\n          allMoves = piece.validPawnMoves(grid, board, startCol, startRow);\n      } else if (piece instanceof Knight) {\n          allMoves = piece.validKnightMoves(grid, board, startCol, startRow);\n      } else if (piece instanceof Rook) {\n          allMoves = piece.get_all_straight(grid, board, startCol, startRow);\n      } else if (piece instanceof Bishop) {\n          allMoves = piece.get_all_diagonal(grid, board, startCol, startRow);\n      } else if (piece instanceof Queen) {\n          allMoves = piece.get_all_straight(grid, board, startCol, startRow)\n              .concat(piece.get_all_diagonal(grid, board, startCol, startRow));\n      } else if (piece instanceof King) {\n          allMoves = piece.validKingMoves(grid, board, startCol, startRow);\n      }\n    \n      if (allMoves.includes(endPosition)) {\n        // if the piece moving is taking an opponents piece\n        if (board[endPosition][0] !== null) {\n          const endSpotpiece = board[endPosition][0];\n          // update the alive and grave list for player losing a piece\n          if (endSpotpiece && player1 && player2) {\n            if (player1.alive.includes(endSpotpiece)) {\n              player1.grave.push(endSpotpiece);\n              player1.alive = player1.alive.filter(item => item !== endSpotpiece);\n            } else {\n              player2.grave.push(endSpotpiece);\n              player2.alive = player2.alive.filter(item => item !== endSpotpiece);\n            }\n          }\n        }\n    \n        // update the positions of the pieces on the board\n        board[endPosition][0] = board[startPosition][0];\n        board[startPosition][0] = null;\n        if (board[endPosition][0] !== null) {\n          let piece = board[endPosition][0];\n          if (piece && player1 && player2) {\n            piece.position = endPosition;\n            if (player1.name === piece.playerName) {\n              player1.alive.forEach((p) => {\n                  if (p.position === startPosition) {\n                      p.position = endPosition;\n                  }\n              });\n            } else {\n              player2.alive.forEach((p) => {\n                if (p.position === startPosition) {\n                    p.position = endPosition;\n                }\n              });\n            }\n          }\n        }\n      } else {\n        return { isValid: false, newState: copyState, newPlayer1: player1, newPlayer2: player2 };\n      }\n    }\n    copyState.isWhiteTurn = !copyState.isWhiteTurn;\n    return { isValid: true, newState: copyState, newPlayer1: player1, newPlayer2: player2 };\n  }\n\n  const [, dropRef] = useDrop({\n    accept: 'piece',\n    drop: (item: any, monitor) => {\n      if (item) {\n        const start = item.piece.position; \n        const end = position;\n        if (player1 && player2) {\n          const moveResult = process_move(start, end);\n          if (moveResult.isValid) {\n            item.piece.moved = true;\n            const message = JSON.stringify({type: 'valid-move', pieceColor: item.piece.isWhite, playerName: item.piece.playerName, gameId: gameId, newGameState: moveResult.newState })\n            sendMessage(message)\n            if (moveResult.newPlayer1 && moveResult.newPlayer2) {\n              setInitiatingUser(moveResult.newPlayer1);\n              setReceivingUser(moveResult.newPlayer2);\n            }\n            setGameState(moveResult.newState);\n          }\n          else {\n            alert('inValid Move');\n          }\n        }\n      }\n    },\n  })\n\n  const piece = gameState ? gameState.board[position][0] : null;\n\n  return (\n    <div ref={dropRef} className={`w-square h-square flex items-center justify-center ${squareColor}`}>\n      {piece ? <DraggablePiece piece={piece} /> : null}\n    </div>\n  );\n};\n\nconst DraggablePiece: React.FC<{ piece: Piece }> = ({ piece }) => {\n  const [{ isDragging }, dragRef] = useDrag({\n    type: 'piece',\n    item: { type: 'piece', piece },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  })\n\n  return (\n    <div ref={dragRef}>\n      {svgIcons[piece.pieceName]}\n    </div>\n  )\n}\n","/home/jake/rem-stack/chess/client/src/pages/NewUserRedirectVerifyEmail.tsx",[],[],"/home/jake/rem-stack/chess/client/src/utils/game-utils.ts",[],[],"/home/jake/rem-stack/chess/client/src/context/GameContext.tsx",[],[],"/home/jake/rem-stack/chess/client/src/utils/svg-icons.tsx",[],[],{"ruleId":"121","severity":1,"message":"122","line":1,"column":14,"nodeType":"123","messageId":"124","endLine":1,"endColumn":23},{"ruleId":"121","severity":1,"message":"125","line":1,"column":25,"nodeType":"123","messageId":"124","endLine":1,"endColumn":33},{"ruleId":"121","severity":1,"message":"126","line":6,"column":56,"nodeType":"123","messageId":"124","endLine":6,"endColumn":60},{"ruleId":"121","severity":1,"message":"127","line":219,"column":12,"nodeType":"123","messageId":"124","endLine":219,"endColumn":22},{"ruleId":"128","severity":1,"message":"129","line":36,"column":6,"nodeType":"130","endLine":36,"endColumn":24,"suggestions":"131","suppressions":"132"},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'grid' is defined but never used.","'isDragging' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'gameState' and 'setGameState'. Either include them or remove the dependency array.","ArrayExpression",["133"],["134"],{"desc":"135","fix":"136"},{"kind":"137","justification":"138"},"Update the dependencies array to be: [gameState, player1, player2, setGameState]",{"range":"139","text":"140"},"directive","",[1359,1377],"[gameState, player1, player2, setGameState]"]